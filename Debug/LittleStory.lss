
LittleStory.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006bc8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000023c  00800060  00006bc8  00006c5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080029c  0080029c  00006e98  2**0
                  ALLOC
  3 .stab         00005b08  00000000  00000000  00006e98  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001738  00000000  00000000  0000c9a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000e0d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000e278  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000e46a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00010875  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00011bfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00012dd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00012f94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0001328a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00013bf8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ef 08 	jmp	0x11de	; 0x11de <__vector_1>
       8:	0c 94 22 09 	jmp	0x1244	; 0x1244 <__vector_2>
       c:	0c 94 55 09 	jmp	0x12aa	; 0x12aa <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 83 0f 	jmp	0x1f06	; 0x1f06 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ec       	ldi	r30, 0xC8	; 200
      68:	fb e6       	ldi	r31, 0x6B	; 107
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3a       	cpi	r26, 0xA4	; 164
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 13 27 	call	0x4e26	; 0x4e26 <main>
      8a:	0c 94 e2 35 	jmp	0x6bc4	; 0x6bc4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ab 35 	jmp	0x6b56	; 0x6b56 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e0       	ldi	r26, 0x02	; 2
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c7 35 	jmp	0x6b8e	; 0x6b8e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b7 35 	jmp	0x6b6e	; 0x6b6e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d3 35 	jmp	0x6ba6	; 0x6ba6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b7 35 	jmp	0x6b6e	; 0x6b6e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d3 35 	jmp	0x6ba6	; 0x6ba6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ab 35 	jmp	0x6b56	; 0x6b56 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e0       	ldi	r24, 0x02	; 2
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c7 35 	jmp	0x6b8e	; 0x6b8e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b3 35 	jmp	0x6b66	; 0x6b66 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 e0       	ldi	r22, 0x02	; 2
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 cf 35 	jmp	0x6b9e	; 0x6b9e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b7 35 	jmp	0x6b6e	; 0x6b6e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 d3 35 	jmp	0x6ba6	; 0x6ba6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b7 35 	jmp	0x6b6e	; 0x6b6e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 d3 35 	jmp	0x6ba6	; 0x6ba6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 b7 35 	jmp	0x6b6e	; 0x6b6e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 d3 35 	jmp	0x6ba6	; 0x6ba6 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 bb 35 	jmp	0x6b76	; 0x6b76 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 d7 35 	jmp	0x6bae	; 0x6bae <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 b3 35 	jmp	0x6b66	; 0x6b66 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 cf 35 	jmp	0x6b9e	; 0x6b9e <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e6 5f       	subi	r30, 0xF6	; 246
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <GIE_voidEnable>:

#include "../../../Library/STD_types.h"
#include "../../../Library/Bit_Math.h"
#include "../Header/GIE_Interface.h"

void GIE_voidEnable(){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, SREG_I);
     e36:	af e5       	ldi	r26, 0x5F	; 95
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	ef e5       	ldi	r30, 0x5F	; 95
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	80 68       	ori	r24, 0x80	; 128
     e42:	8c 93       	st	X, r24
}
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <GIE_voidDisable>:

void GIE_voidDisable(){
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, SREG_I);
     e52:	af e5       	ldi	r26, 0x5F	; 95
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	ef e5       	ldi	r30, 0x5F	; 95
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8f 77       	andi	r24, 0x7F	; 127
     e5e:	8c 93       	st	X, r24
}
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <EXTI0_voidInit>:
void (*Global_EXTI0_CallBack)(void)= NULL;
void (*Global_EXTI1_CallBack)(void)= NULL;
void (*Global_EXTI2_CallBack)(void)= NULL;

//init the INT with sensing mood in preprocessing stage
void EXTI0_voidInit(void){
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00);
	CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01);

#elif 	INT0_SENSE == EXTI_FALLING

	CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00);
     e6e:	a5 e5       	ldi	r26, 0x55	; 85
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e5 e5       	ldi	r30, 0x55	; 85
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	8e 7f       	andi	r24, 0xFE	; 254
     e7a:	8c 93       	st	X, r24
	SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01);
     e7c:	a5 e5       	ldi	r26, 0x55	; 85
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e5 e5       	ldi	r30, 0x55	; 85
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	82 60       	ori	r24, 0x02	; 2
     e88:	8c 93       	st	X, r24
	SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01);

#else
#error "WRONG SENSE CONTROL CONFIGURATION FOR INT0"
#endif
}
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <EXTI1_voidInit>:
void EXTI1_voidInit(void){
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC10);
	CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC11);

#elif 	INT1_SENSE == EXTI_FALLING

	CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC10);
     e98:	a5 e5       	ldi	r26, 0x55	; 85
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e5 e5       	ldi	r30, 0x55	; 85
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	8b 7f       	andi	r24, 0xFB	; 251
     ea4:	8c 93       	st	X, r24
	SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC11);
     ea6:	a5 e5       	ldi	r26, 0x55	; 85
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e5 e5       	ldi	r30, 0x55	; 85
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	88 60       	ori	r24, 0x08	; 8
     eb2:	8c 93       	st	X, r24
	SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC11);

#else
#error "WRONG SENSE CONTROL CONFIGURATION FOR INT0"
#endif
}
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	08 95       	ret

00000eba <EXTI2_voidInit>:
void EXTI2_voidInit(void){
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
	/*Check sense control of Pin INT0*/
#if 	INT2_SENSE == EXTI_FALLING
	CLR_BIT(EXTI_MCUCSR,EXTI_MCUCSR_ISC2);
     ec2:	a4 e5       	ldi	r26, 0x54	; 84
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e4 e5       	ldi	r30, 0x54	; 84
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	8f 7b       	andi	r24, 0xBF	; 191
     ece:	8c 93       	st	X, r24
	SET_BIT(EXTI_MCUCSR,EXTI_MCUCSR_ISC2);

#else
#error "WRONG SENSE CONTROL CONFIGURATION FOR INT0"
#endif
}
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <EXTI0_voidEnable>:

//enable EXTI
void EXTI0_voidEnable(void){
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_GICR,EXTI_GICR_INT0);
     ede:	ab e5       	ldi	r26, 0x5B	; 91
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	eb e5       	ldi	r30, 0x5B	; 91
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	80 64       	ori	r24, 0x40	; 64
     eea:	8c 93       	st	X, r24
}
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <EXTI1_voidEnable>:
void EXTI1_voidEnable(void){
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_GICR,EXTI_GICR_INT1);
     efa:	ab e5       	ldi	r26, 0x5B	; 91
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	eb e5       	ldi	r30, 0x5B	; 91
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	80 68       	ori	r24, 0x80	; 128
     f06:	8c 93       	st	X, r24
}
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	08 95       	ret

00000f0e <EXTI2_voidEnable>:
void EXTI2_voidEnable(void){
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_GICR,EXTI_GICR_INT2);
     f16:	ab e5       	ldi	r26, 0x5B	; 91
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	eb e5       	ldi	r30, 0x5B	; 91
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	80 62       	ori	r24, 0x20	; 32
     f22:	8c 93       	st	X, r24
}
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <EXTI0_voidDisable>:

//disable EXTI
void EXTI0_voidDisable(void){
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_GICR,EXTI_GICR_INT0);
     f32:	ab e5       	ldi	r26, 0x5B	; 91
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	eb e5       	ldi	r30, 0x5B	; 91
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	8f 7b       	andi	r24, 0xBF	; 191
     f3e:	8c 93       	st	X, r24
}
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <EXTI1_voidDisable>:
void EXTI1_voidDisable(void){
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_GICR,EXTI_GICR_INT1);
     f4e:	ab e5       	ldi	r26, 0x5B	; 91
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	eb e5       	ldi	r30, 0x5B	; 91
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	8f 77       	andi	r24, 0x7F	; 127
     f5a:	8c 93       	st	X, r24
}
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	08 95       	ret

00000f62 <EXTI2_voidDisable>:
void EXTI2_voidDisable(void){
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_GICR,EXTI_GICR_INT2);
     f6a:	ab e5       	ldi	r26, 0x5B	; 91
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	eb e5       	ldi	r30, 0x5B	; 91
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	8f 7d       	andi	r24, 0xDF	; 223
     f76:	8c 93       	st	X, r24
}
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	08 95       	ret

00000f7e <EXTI0_voidSetSignalch>:

//change the INT with sensing mood in runtime
void EXTI0_voidSetSignalch(u8 SenseCpy){
     f7e:	df 93       	push	r29
     f80:	cf 93       	push	r28
     f82:	00 d0       	rcall	.+0      	; 0xf84 <EXTI0_voidSetSignalch+0x6>
     f84:	0f 92       	push	r0
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
     f8a:	89 83       	std	Y+1, r24	; 0x01
	switch(SenseCpy){
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	3b 83       	std	Y+3, r19	; 0x03
     f94:	2a 83       	std	Y+2, r18	; 0x02
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	9b 81       	ldd	r25, Y+3	; 0x03
     f9a:	81 30       	cpi	r24, 0x01	; 1
     f9c:	91 05       	cpc	r25, r1
     f9e:	99 f1       	breq	.+102    	; 0x1006 <EXTI0_voidSetSignalch+0x88>
     fa0:	2a 81       	ldd	r18, Y+2	; 0x02
     fa2:	3b 81       	ldd	r19, Y+3	; 0x03
     fa4:	22 30       	cpi	r18, 0x02	; 2
     fa6:	31 05       	cpc	r19, r1
     fa8:	2c f4       	brge	.+10     	; 0xfb4 <EXTI0_voidSetSignalch+0x36>
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	9b 81       	ldd	r25, Y+3	; 0x03
     fae:	00 97       	sbiw	r24, 0x00	; 0
     fb0:	c9 f1       	breq	.+114    	; 0x1024 <EXTI0_voidSetSignalch+0xa6>
     fb2:	46 c0       	rjmp	.+140    	; 0x1040 <EXTI0_voidSetSignalch+0xc2>
     fb4:	2a 81       	ldd	r18, Y+2	; 0x02
     fb6:	3b 81       	ldd	r19, Y+3	; 0x03
     fb8:	22 30       	cpi	r18, 0x02	; 2
     fba:	31 05       	cpc	r19, r1
     fbc:	31 f0       	breq	.+12     	; 0xfca <EXTI0_voidSetSignalch+0x4c>
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	9b 81       	ldd	r25, Y+3	; 0x03
     fc2:	83 30       	cpi	r24, 0x03	; 3
     fc4:	91 05       	cpc	r25, r1
     fc6:	81 f0       	breq	.+32     	; 0xfe8 <EXTI0_voidSetSignalch+0x6a>
     fc8:	3b c0       	rjmp	.+118    	; 0x1040 <EXTI0_voidSetSignalch+0xc2>
	case EXTI_FALLING:
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00);
     fca:	a5 e5       	ldi	r26, 0x55	; 85
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e5 e5       	ldi	r30, 0x55	; 85
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	8e 7f       	andi	r24, 0xFE	; 254
     fd6:	8c 93       	st	X, r24
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01);
     fd8:	a5 e5       	ldi	r26, 0x55	; 85
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e5 e5       	ldi	r30, 0x55	; 85
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	82 60       	ori	r24, 0x02	; 2
     fe4:	8c 93       	st	X, r24
     fe6:	2c c0       	rjmp	.+88     	; 0x1040 <EXTI0_voidSetSignalch+0xc2>
		break;
	case EXTI_RISING:
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00);
     fe8:	a5 e5       	ldi	r26, 0x55	; 85
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e5 e5       	ldi	r30, 0x55	; 85
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	81 60       	ori	r24, 0x01	; 1
     ff4:	8c 93       	st	X, r24
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01);
     ff6:	a5 e5       	ldi	r26, 0x55	; 85
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e5 e5       	ldi	r30, 0x55	; 85
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	82 60       	ori	r24, 0x02	; 2
    1002:	8c 93       	st	X, r24
    1004:	1d c0       	rjmp	.+58     	; 0x1040 <EXTI0_voidSetSignalch+0xc2>
		break;
	case EXTI_IOC:
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00);
    1006:	a5 e5       	ldi	r26, 0x55	; 85
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	e5 e5       	ldi	r30, 0x55	; 85
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	81 60       	ori	r24, 0x01	; 1
    1012:	8c 93       	st	X, r24
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01);
    1014:	a5 e5       	ldi	r26, 0x55	; 85
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e5 e5       	ldi	r30, 0x55	; 85
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	8d 7f       	andi	r24, 0xFD	; 253
    1020:	8c 93       	st	X, r24
    1022:	0e c0       	rjmp	.+28     	; 0x1040 <EXTI0_voidSetSignalch+0xc2>
		break;
	case EXTI_LOW:
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00);
    1024:	a5 e5       	ldi	r26, 0x55	; 85
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e5 e5       	ldi	r30, 0x55	; 85
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	8e 7f       	andi	r24, 0xFE	; 254
    1030:	8c 93       	st	X, r24
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01);
    1032:	a5 e5       	ldi	r26, 0x55	; 85
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e5 e5       	ldi	r30, 0x55	; 85
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	8d 7f       	andi	r24, 0xFD	; 253
    103e:	8c 93       	st	X, r24
		break;
	}
}
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	0f 90       	pop	r0
    1046:	cf 91       	pop	r28
    1048:	df 91       	pop	r29
    104a:	08 95       	ret

0000104c <EXTI1_voidSetSignalch>:
void EXTI1_voidSetSignalch(u8 SenseCpy){
    104c:	df 93       	push	r29
    104e:	cf 93       	push	r28
    1050:	00 d0       	rcall	.+0      	; 0x1052 <EXTI1_voidSetSignalch+0x6>
    1052:	0f 92       	push	r0
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
    1058:	89 83       	std	Y+1, r24	; 0x01
	switch(SenseCpy){
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	3b 83       	std	Y+3, r19	; 0x03
    1062:	2a 83       	std	Y+2, r18	; 0x02
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	9b 81       	ldd	r25, Y+3	; 0x03
    1068:	81 30       	cpi	r24, 0x01	; 1
    106a:	91 05       	cpc	r25, r1
    106c:	99 f1       	breq	.+102    	; 0x10d4 <EXTI1_voidSetSignalch+0x88>
    106e:	2a 81       	ldd	r18, Y+2	; 0x02
    1070:	3b 81       	ldd	r19, Y+3	; 0x03
    1072:	22 30       	cpi	r18, 0x02	; 2
    1074:	31 05       	cpc	r19, r1
    1076:	2c f4       	brge	.+10     	; 0x1082 <EXTI1_voidSetSignalch+0x36>
    1078:	8a 81       	ldd	r24, Y+2	; 0x02
    107a:	9b 81       	ldd	r25, Y+3	; 0x03
    107c:	00 97       	sbiw	r24, 0x00	; 0
    107e:	c9 f1       	breq	.+114    	; 0x10f2 <EXTI1_voidSetSignalch+0xa6>
    1080:	46 c0       	rjmp	.+140    	; 0x110e <EXTI1_voidSetSignalch+0xc2>
    1082:	2a 81       	ldd	r18, Y+2	; 0x02
    1084:	3b 81       	ldd	r19, Y+3	; 0x03
    1086:	22 30       	cpi	r18, 0x02	; 2
    1088:	31 05       	cpc	r19, r1
    108a:	31 f0       	breq	.+12     	; 0x1098 <EXTI1_voidSetSignalch+0x4c>
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	9b 81       	ldd	r25, Y+3	; 0x03
    1090:	83 30       	cpi	r24, 0x03	; 3
    1092:	91 05       	cpc	r25, r1
    1094:	81 f0       	breq	.+32     	; 0x10b6 <EXTI1_voidSetSignalch+0x6a>
    1096:	3b c0       	rjmp	.+118    	; 0x110e <EXTI1_voidSetSignalch+0xc2>
	case EXTI_FALLING:
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC10);
    1098:	a5 e5       	ldi	r26, 0x55	; 85
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e5 e5       	ldi	r30, 0x55	; 85
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	8b 7f       	andi	r24, 0xFB	; 251
    10a4:	8c 93       	st	X, r24
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC11);
    10a6:	a5 e5       	ldi	r26, 0x55	; 85
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e5 e5       	ldi	r30, 0x55	; 85
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	88 60       	ori	r24, 0x08	; 8
    10b2:	8c 93       	st	X, r24
    10b4:	2c c0       	rjmp	.+88     	; 0x110e <EXTI1_voidSetSignalch+0xc2>
		break;
	case EXTI_RISING:
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC10);
    10b6:	a5 e5       	ldi	r26, 0x55	; 85
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	e5 e5       	ldi	r30, 0x55	; 85
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	84 60       	ori	r24, 0x04	; 4
    10c2:	8c 93       	st	X, r24
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC11);
    10c4:	a5 e5       	ldi	r26, 0x55	; 85
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e5 e5       	ldi	r30, 0x55	; 85
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	88 60       	ori	r24, 0x08	; 8
    10d0:	8c 93       	st	X, r24
    10d2:	1d c0       	rjmp	.+58     	; 0x110e <EXTI1_voidSetSignalch+0xc2>
		break;
	case EXTI_IOC:
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC10);
    10d4:	a5 e5       	ldi	r26, 0x55	; 85
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e5 e5       	ldi	r30, 0x55	; 85
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	84 60       	ori	r24, 0x04	; 4
    10e0:	8c 93       	st	X, r24
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC11);
    10e2:	a5 e5       	ldi	r26, 0x55	; 85
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e5 e5       	ldi	r30, 0x55	; 85
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	87 7f       	andi	r24, 0xF7	; 247
    10ee:	8c 93       	st	X, r24
    10f0:	0e c0       	rjmp	.+28     	; 0x110e <EXTI1_voidSetSignalch+0xc2>
		break;
	case EXTI_LOW:
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC10);
    10f2:	a5 e5       	ldi	r26, 0x55	; 85
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	e5 e5       	ldi	r30, 0x55	; 85
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	8b 7f       	andi	r24, 0xFB	; 251
    10fe:	8c 93       	st	X, r24
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC11);
    1100:	a5 e5       	ldi	r26, 0x55	; 85
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e5 e5       	ldi	r30, 0x55	; 85
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	87 7f       	andi	r24, 0xF7	; 247
    110c:	8c 93       	st	X, r24
		break;
	}
}
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	cf 91       	pop	r28
    1116:	df 91       	pop	r29
    1118:	08 95       	ret

0000111a <EXTI2_voidSetSignalch>:
void EXTI2_voidSetSignalch(u8 SenseCpy){
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	00 d0       	rcall	.+0      	; 0x1120 <EXTI2_voidSetSignalch+0x6>
    1120:	0f 92       	push	r0
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	89 83       	std	Y+1, r24	; 0x01
	switch(SenseCpy){
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	3b 83       	std	Y+3, r19	; 0x03
    1130:	2a 83       	std	Y+2, r18	; 0x02
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	9b 81       	ldd	r25, Y+3	; 0x03
    1136:	82 30       	cpi	r24, 0x02	; 2
    1138:	91 05       	cpc	r25, r1
    113a:	31 f0       	breq	.+12     	; 0x1148 <EXTI2_voidSetSignalch+0x2e>
    113c:	2a 81       	ldd	r18, Y+2	; 0x02
    113e:	3b 81       	ldd	r19, Y+3	; 0x03
    1140:	23 30       	cpi	r18, 0x03	; 3
    1142:	31 05       	cpc	r19, r1
    1144:	49 f0       	breq	.+18     	; 0x1158 <EXTI2_voidSetSignalch+0x3e>
    1146:	0f c0       	rjmp	.+30     	; 0x1166 <EXTI2_voidSetSignalch+0x4c>
	case EXTI_FALLING:
		CLR_BIT(EXTI_MCUCSR,EXTI_MCUCSR_ISC2);
    1148:	a4 e5       	ldi	r26, 0x54	; 84
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e4 e5       	ldi	r30, 0x54	; 84
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	8f 7b       	andi	r24, 0xBF	; 191
    1154:	8c 93       	st	X, r24
    1156:	07 c0       	rjmp	.+14     	; 0x1166 <EXTI2_voidSetSignalch+0x4c>
		break;
	case EXTI_RISING:
		SET_BIT(EXTI_MCUCSR,EXTI_MCUCSR_ISC2);
    1158:	a4 e5       	ldi	r26, 0x54	; 84
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e4 e5       	ldi	r30, 0x54	; 84
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	80 64       	ori	r24, 0x40	; 64
    1164:	8c 93       	st	X, r24
		break;
	}
}
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	cf 91       	pop	r28
    116e:	df 91       	pop	r29
    1170:	08 95       	ret

00001172 <EXTI0_VID_SET_CALL_BACK>:

//callback function
void EXTI0_VID_SET_CALL_BACK(void (*PTR)(void)){
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	00 d0       	rcall	.+0      	; 0x1178 <EXTI0_VID_SET_CALL_BACK+0x6>
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
    117c:	9a 83       	std	Y+2, r25	; 0x02
    117e:	89 83       	std	Y+1, r24	; 0x01
	Global_EXTI0_CallBack = PTR;
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	9a 81       	ldd	r25, Y+2	; 0x02
    1184:	90 93 9d 02 	sts	0x029D, r25
    1188:	80 93 9c 02 	sts	0x029C, r24
}
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	08 95       	ret

00001196 <EXTI1_VID_SET_CALL_BACK>:
void EXTI1_VID_SET_CALL_BACK(void (*PTR)(void)){
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	00 d0       	rcall	.+0      	; 0x119c <EXTI1_VID_SET_CALL_BACK+0x6>
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
    11a0:	9a 83       	std	Y+2, r25	; 0x02
    11a2:	89 83       	std	Y+1, r24	; 0x01
	Global_EXTI1_CallBack = PTR;
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	9a 81       	ldd	r25, Y+2	; 0x02
    11a8:	90 93 9f 02 	sts	0x029F, r25
    11ac:	80 93 9e 02 	sts	0x029E, r24
}
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	08 95       	ret

000011ba <EXTI2_VID_SET_CALL_BACK>:
void EXTI2_VID_SET_CALL_BACK(void (*PTR)(void)){
    11ba:	df 93       	push	r29
    11bc:	cf 93       	push	r28
    11be:	00 d0       	rcall	.+0      	; 0x11c0 <EXTI2_VID_SET_CALL_BACK+0x6>
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
    11c4:	9a 83       	std	Y+2, r25	; 0x02
    11c6:	89 83       	std	Y+1, r24	; 0x01
	Global_EXTI2_CallBack = PTR;
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	9a 81       	ldd	r25, Y+2	; 0x02
    11cc:	90 93 a1 02 	sts	0x02A1, r25
    11d0:	80 93 a0 02 	sts	0x02A0, r24
}
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	08 95       	ret

000011de <__vector_1>:

void __vector_1 (void){
    11de:	1f 92       	push	r1
    11e0:	0f 92       	push	r0
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	0f 92       	push	r0
    11e6:	11 24       	eor	r1, r1
    11e8:	2f 93       	push	r18
    11ea:	3f 93       	push	r19
    11ec:	4f 93       	push	r20
    11ee:	5f 93       	push	r21
    11f0:	6f 93       	push	r22
    11f2:	7f 93       	push	r23
    11f4:	8f 93       	push	r24
    11f6:	9f 93       	push	r25
    11f8:	af 93       	push	r26
    11fa:	bf 93       	push	r27
    11fc:	ef 93       	push	r30
    11fe:	ff 93       	push	r31
    1200:	df 93       	push	r29
    1202:	cf 93       	push	r28
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
	if(Global_EXTI0_CallBack != NULL){
    1208:	80 91 9c 02 	lds	r24, 0x029C
    120c:	90 91 9d 02 	lds	r25, 0x029D
    1210:	00 97       	sbiw	r24, 0x00	; 0
    1212:	29 f0       	breq	.+10     	; 0x121e <__vector_1+0x40>
		Global_EXTI0_CallBack();
    1214:	e0 91 9c 02 	lds	r30, 0x029C
    1218:	f0 91 9d 02 	lds	r31, 0x029D
    121c:	09 95       	icall
	}
}
    121e:	cf 91       	pop	r28
    1220:	df 91       	pop	r29
    1222:	ff 91       	pop	r31
    1224:	ef 91       	pop	r30
    1226:	bf 91       	pop	r27
    1228:	af 91       	pop	r26
    122a:	9f 91       	pop	r25
    122c:	8f 91       	pop	r24
    122e:	7f 91       	pop	r23
    1230:	6f 91       	pop	r22
    1232:	5f 91       	pop	r21
    1234:	4f 91       	pop	r20
    1236:	3f 91       	pop	r19
    1238:	2f 91       	pop	r18
    123a:	0f 90       	pop	r0
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	0f 90       	pop	r0
    1240:	1f 90       	pop	r1
    1242:	18 95       	reti

00001244 <__vector_2>:
void __vector_2 (void){
    1244:	1f 92       	push	r1
    1246:	0f 92       	push	r0
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	0f 92       	push	r0
    124c:	11 24       	eor	r1, r1
    124e:	2f 93       	push	r18
    1250:	3f 93       	push	r19
    1252:	4f 93       	push	r20
    1254:	5f 93       	push	r21
    1256:	6f 93       	push	r22
    1258:	7f 93       	push	r23
    125a:	8f 93       	push	r24
    125c:	9f 93       	push	r25
    125e:	af 93       	push	r26
    1260:	bf 93       	push	r27
    1262:	ef 93       	push	r30
    1264:	ff 93       	push	r31
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
	if(Global_EXTI1_CallBack != NULL){
    126e:	80 91 9e 02 	lds	r24, 0x029E
    1272:	90 91 9f 02 	lds	r25, 0x029F
    1276:	00 97       	sbiw	r24, 0x00	; 0
    1278:	29 f0       	breq	.+10     	; 0x1284 <__vector_2+0x40>
		Global_EXTI1_CallBack();
    127a:	e0 91 9e 02 	lds	r30, 0x029E
    127e:	f0 91 9f 02 	lds	r31, 0x029F
    1282:	09 95       	icall
	}
}
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	ff 91       	pop	r31
    128a:	ef 91       	pop	r30
    128c:	bf 91       	pop	r27
    128e:	af 91       	pop	r26
    1290:	9f 91       	pop	r25
    1292:	8f 91       	pop	r24
    1294:	7f 91       	pop	r23
    1296:	6f 91       	pop	r22
    1298:	5f 91       	pop	r21
    129a:	4f 91       	pop	r20
    129c:	3f 91       	pop	r19
    129e:	2f 91       	pop	r18
    12a0:	0f 90       	pop	r0
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	0f 90       	pop	r0
    12a6:	1f 90       	pop	r1
    12a8:	18 95       	reti

000012aa <__vector_3>:
void __vector_3 (void){
    12aa:	1f 92       	push	r1
    12ac:	0f 92       	push	r0
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	0f 92       	push	r0
    12b2:	11 24       	eor	r1, r1
    12b4:	2f 93       	push	r18
    12b6:	3f 93       	push	r19
    12b8:	4f 93       	push	r20
    12ba:	5f 93       	push	r21
    12bc:	6f 93       	push	r22
    12be:	7f 93       	push	r23
    12c0:	8f 93       	push	r24
    12c2:	9f 93       	push	r25
    12c4:	af 93       	push	r26
    12c6:	bf 93       	push	r27
    12c8:	ef 93       	push	r30
    12ca:	ff 93       	push	r31
    12cc:	df 93       	push	r29
    12ce:	cf 93       	push	r28
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
	if(Global_EXTI2_CallBack != NULL){
    12d4:	80 91 a0 02 	lds	r24, 0x02A0
    12d8:	90 91 a1 02 	lds	r25, 0x02A1
    12dc:	00 97       	sbiw	r24, 0x00	; 0
    12de:	29 f0       	breq	.+10     	; 0x12ea <__vector_3+0x40>
		Global_EXTI2_CallBack();
    12e0:	e0 91 a0 02 	lds	r30, 0x02A0
    12e4:	f0 91 a1 02 	lds	r31, 0x02A1
    12e8:	09 95       	icall
	}
}
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	ff 91       	pop	r31
    12f0:	ef 91       	pop	r30
    12f2:	bf 91       	pop	r27
    12f4:	af 91       	pop	r26
    12f6:	9f 91       	pop	r25
    12f8:	8f 91       	pop	r24
    12fa:	7f 91       	pop	r23
    12fc:	6f 91       	pop	r22
    12fe:	5f 91       	pop	r21
    1300:	4f 91       	pop	r20
    1302:	3f 91       	pop	r19
    1304:	2f 91       	pop	r18
    1306:	0f 90       	pop	r0
    1308:	0f be       	out	0x3f, r0	; 63
    130a:	0f 90       	pop	r0
    130c:	1f 90       	pop	r1
    130e:	18 95       	reti

00001310 <DIO_voidInit>:
#include "../../../Library/STD_types.h"
#include "../../../Library/Bit_Math.h"
#include "../Header/DIO_Interface.h"
#include "../Header/DIO_Register.h"

void DIO_voidInit(){
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(DIO_PortA,concate(DIO_PINA7, DIO_PINA6, DIO_PINA5, DIO_PINA4, DIO_PINA3, DIO_PINA2, DIO_PINA1, DIO_PINA0));
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	6c ef       	ldi	r22, 0xFC	; 252
    131c:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(DIO_PortB,concate(DIO_PINB7, DIO_PINB6, DIO_PINB5, DIO_PINB4, DIO_PINB3, DIO_PINB2, DIO_PINB1, DIO_PINB0));
    1320:	82 e0       	ldi	r24, 0x02	; 2
    1322:	6f ef       	ldi	r22, 0xFF	; 255
    1324:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(DIO_PortC,concate(DIO_PINC7, DIO_PINC6, DIO_PINC5, DIO_PINC4, DIO_PINC3, DIO_PINC2, DIO_PINC1, DIO_PINC0));
    1328:	83 e0       	ldi	r24, 0x03	; 3
    132a:	60 e0       	ldi	r22, 0x00	; 0
    132c:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(DIO_PortD,concate(DIO_PIND7, DIO_PIND6, DIO_PIND5, DIO_PIND4, DIO_PIND3, DIO_PIND2, DIO_PIND1, DIO_PIND0));
    1330:	84 e0       	ldi	r24, 0x04	; 4
    1332:	63 ef       	ldi	r22, 0xF3	; 243
    1334:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <DIO_voidSetPortDir>
}
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	08 95       	ret

0000133e <DIO_voidSetPinDir>:

void DIO_voidSetPinDir(u8 Local_PortName,u8 Local_PinNumber,u8 Local_PinDir){
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
    1346:	27 97       	sbiw	r28, 0x07	; 7
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	f8 94       	cli
    134c:	de bf       	out	0x3e, r29	; 62
    134e:	0f be       	out	0x3f, r0	; 63
    1350:	cd bf       	out	0x3d, r28	; 61
    1352:	89 83       	std	Y+1, r24	; 0x01
    1354:	6a 83       	std	Y+2, r22	; 0x02
    1356:	4b 83       	std	Y+3, r20	; 0x03
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	85 30       	cpi	r24, 0x05	; 5
    135c:	08 f0       	brcs	.+2      	; 0x1360 <DIO_voidSetPinDir+0x22>
    135e:	f4 c0       	rjmp	.+488    	; 0x1548 <DIO_voidSetPinDir+0x20a>
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	88 23       	and	r24, r24
    1364:	09 f4       	brne	.+2      	; 0x1368 <DIO_voidSetPinDir+0x2a>
    1366:	f0 c0       	rjmp	.+480    	; 0x1548 <DIO_voidSetPinDir+0x20a>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	88 30       	cpi	r24, 0x08	; 8
    136c:	08 f0       	brcs	.+2      	; 0x1370 <DIO_voidSetPinDir+0x32>
    136e:	ec c0       	rjmp	.+472    	; 0x1548 <DIO_voidSetPinDir+0x20a>
			if(Local_PinDir == Output){
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	81 30       	cpi	r24, 0x01	; 1
    1374:	09 f0       	breq	.+2      	; 0x1378 <DIO_voidSetPinDir+0x3a>
    1376:	70 c0       	rjmp	.+224    	; 0x1458 <DIO_voidSetPinDir+0x11a>
				switch(Local_PortName){
    1378:	89 81       	ldd	r24, Y+1	; 0x01
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	3f 83       	std	Y+7, r19	; 0x07
    1380:	2e 83       	std	Y+6, r18	; 0x06
    1382:	8e 81       	ldd	r24, Y+6	; 0x06
    1384:	9f 81       	ldd	r25, Y+7	; 0x07
    1386:	82 30       	cpi	r24, 0x02	; 2
    1388:	91 05       	cpc	r25, r1
    138a:	51 f1       	breq	.+84     	; 0x13e0 <DIO_voidSetPinDir+0xa2>
    138c:	2e 81       	ldd	r18, Y+6	; 0x06
    138e:	3f 81       	ldd	r19, Y+7	; 0x07
    1390:	23 30       	cpi	r18, 0x03	; 3
    1392:	31 05       	cpc	r19, r1
    1394:	34 f4       	brge	.+12     	; 0x13a2 <DIO_voidSetPinDir+0x64>
    1396:	8e 81       	ldd	r24, Y+6	; 0x06
    1398:	9f 81       	ldd	r25, Y+7	; 0x07
    139a:	81 30       	cpi	r24, 0x01	; 1
    139c:	91 05       	cpc	r25, r1
    139e:	61 f0       	breq	.+24     	; 0x13b8 <DIO_voidSetPinDir+0x7a>
    13a0:	d3 c0       	rjmp	.+422    	; 0x1548 <DIO_voidSetPinDir+0x20a>
    13a2:	2e 81       	ldd	r18, Y+6	; 0x06
    13a4:	3f 81       	ldd	r19, Y+7	; 0x07
    13a6:	23 30       	cpi	r18, 0x03	; 3
    13a8:	31 05       	cpc	r19, r1
    13aa:	71 f1       	breq	.+92     	; 0x1408 <DIO_voidSetPinDir+0xca>
    13ac:	8e 81       	ldd	r24, Y+6	; 0x06
    13ae:	9f 81       	ldd	r25, Y+7	; 0x07
    13b0:	84 30       	cpi	r24, 0x04	; 4
    13b2:	91 05       	cpc	r25, r1
    13b4:	e9 f1       	breq	.+122    	; 0x1430 <DIO_voidSetPinDir+0xf2>
    13b6:	c8 c0       	rjmp	.+400    	; 0x1548 <DIO_voidSetPinDir+0x20a>
				case DIO_PortA:
					Set_Bit(DIO_DDRA,Local_PinNumber);
    13b8:	aa e3       	ldi	r26, 0x3A	; 58
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	ea e3       	ldi	r30, 0x3A	; 58
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	48 2f       	mov	r20, r24
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	02 2e       	mov	r0, r18
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <DIO_voidSetPinDir+0x98>
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	0a 94       	dec	r0
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <DIO_voidSetPinDir+0x94>
    13da:	84 2b       	or	r24, r20
    13dc:	8c 93       	st	X, r24
    13de:	b4 c0       	rjmp	.+360    	; 0x1548 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortB:
					Set_Bit(DIO_DDRB,Local_PinNumber);
    13e0:	a7 e3       	ldi	r26, 0x37	; 55
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e7 e3       	ldi	r30, 0x37	; 55
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	48 2f       	mov	r20, r24
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	02 2e       	mov	r0, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <DIO_voidSetPinDir+0xc0>
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	0a 94       	dec	r0
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <DIO_voidSetPinDir+0xbc>
    1402:	84 2b       	or	r24, r20
    1404:	8c 93       	st	X, r24
    1406:	a0 c0       	rjmp	.+320    	; 0x1548 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortC:
					Set_Bit(DIO_DDRC,Local_PinNumber);
    1408:	a4 e3       	ldi	r26, 0x34	; 52
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e4 e3       	ldi	r30, 0x34	; 52
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	48 2f       	mov	r20, r24
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	02 2e       	mov	r0, r18
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <DIO_voidSetPinDir+0xe8>
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	0a 94       	dec	r0
    1428:	e2 f7       	brpl	.-8      	; 0x1422 <DIO_voidSetPinDir+0xe4>
    142a:	84 2b       	or	r24, r20
    142c:	8c 93       	st	X, r24
    142e:	8c c0       	rjmp	.+280    	; 0x1548 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortD:
					Set_Bit(DIO_DDRD,Local_PinNumber);
    1430:	a1 e3       	ldi	r26, 0x31	; 49
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	e1 e3       	ldi	r30, 0x31	; 49
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	48 2f       	mov	r20, r24
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	02 2e       	mov	r0, r18
    1448:	02 c0       	rjmp	.+4      	; 0x144e <DIO_voidSetPinDir+0x110>
    144a:	88 0f       	add	r24, r24
    144c:	99 1f       	adc	r25, r25
    144e:	0a 94       	dec	r0
    1450:	e2 f7       	brpl	.-8      	; 0x144a <DIO_voidSetPinDir+0x10c>
    1452:	84 2b       	or	r24, r20
    1454:	8c 93       	st	X, r24
    1456:	78 c0       	rjmp	.+240    	; 0x1548 <DIO_voidSetPinDir+0x20a>
					break;
				}
			}
			else if(Local_PinDir == Input){
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	88 23       	and	r24, r24
    145c:	09 f0       	breq	.+2      	; 0x1460 <DIO_voidSetPinDir+0x122>
    145e:	74 c0       	rjmp	.+232    	; 0x1548 <DIO_voidSetPinDir+0x20a>
				switch(Local_PortName){
    1460:	89 81       	ldd	r24, Y+1	; 0x01
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	3d 83       	std	Y+5, r19	; 0x05
    1468:	2c 83       	std	Y+4, r18	; 0x04
    146a:	8c 81       	ldd	r24, Y+4	; 0x04
    146c:	9d 81       	ldd	r25, Y+5	; 0x05
    146e:	82 30       	cpi	r24, 0x02	; 2
    1470:	91 05       	cpc	r25, r1
    1472:	61 f1       	breq	.+88     	; 0x14cc <DIO_voidSetPinDir+0x18e>
    1474:	2c 81       	ldd	r18, Y+4	; 0x04
    1476:	3d 81       	ldd	r19, Y+5	; 0x05
    1478:	23 30       	cpi	r18, 0x03	; 3
    147a:	31 05       	cpc	r19, r1
    147c:	34 f4       	brge	.+12     	; 0x148a <DIO_voidSetPinDir+0x14c>
    147e:	8c 81       	ldd	r24, Y+4	; 0x04
    1480:	9d 81       	ldd	r25, Y+5	; 0x05
    1482:	81 30       	cpi	r24, 0x01	; 1
    1484:	91 05       	cpc	r25, r1
    1486:	69 f0       	breq	.+26     	; 0x14a2 <DIO_voidSetPinDir+0x164>
    1488:	5f c0       	rjmp	.+190    	; 0x1548 <DIO_voidSetPinDir+0x20a>
    148a:	2c 81       	ldd	r18, Y+4	; 0x04
    148c:	3d 81       	ldd	r19, Y+5	; 0x05
    148e:	23 30       	cpi	r18, 0x03	; 3
    1490:	31 05       	cpc	r19, r1
    1492:	89 f1       	breq	.+98     	; 0x14f6 <DIO_voidSetPinDir+0x1b8>
    1494:	8c 81       	ldd	r24, Y+4	; 0x04
    1496:	9d 81       	ldd	r25, Y+5	; 0x05
    1498:	84 30       	cpi	r24, 0x04	; 4
    149a:	91 05       	cpc	r25, r1
    149c:	09 f4       	brne	.+2      	; 0x14a0 <DIO_voidSetPinDir+0x162>
    149e:	40 c0       	rjmp	.+128    	; 0x1520 <DIO_voidSetPinDir+0x1e2>
    14a0:	53 c0       	rjmp	.+166    	; 0x1548 <DIO_voidSetPinDir+0x20a>
				case DIO_PortA:
					Clear_Bit(DIO_DDRA,Local_PinNumber);
    14a2:	aa e3       	ldi	r26, 0x3A	; 58
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	ea e3       	ldi	r30, 0x3A	; 58
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	48 2f       	mov	r20, r24
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	28 2f       	mov	r18, r24
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	02 2e       	mov	r0, r18
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <DIO_voidSetPinDir+0x182>
    14bc:	88 0f       	add	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	0a 94       	dec	r0
    14c2:	e2 f7       	brpl	.-8      	; 0x14bc <DIO_voidSetPinDir+0x17e>
    14c4:	80 95       	com	r24
    14c6:	84 23       	and	r24, r20
    14c8:	8c 93       	st	X, r24
    14ca:	3e c0       	rjmp	.+124    	; 0x1548 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortB:
					Clear_Bit(DIO_DDRB,Local_PinNumber);
    14cc:	a7 e3       	ldi	r26, 0x37	; 55
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	e7 e3       	ldi	r30, 0x37	; 55
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	48 2f       	mov	r20, r24
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	02 2e       	mov	r0, r18
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <DIO_voidSetPinDir+0x1ac>
    14e6:	88 0f       	add	r24, r24
    14e8:	99 1f       	adc	r25, r25
    14ea:	0a 94       	dec	r0
    14ec:	e2 f7       	brpl	.-8      	; 0x14e6 <DIO_voidSetPinDir+0x1a8>
    14ee:	80 95       	com	r24
    14f0:	84 23       	and	r24, r20
    14f2:	8c 93       	st	X, r24
    14f4:	29 c0       	rjmp	.+82     	; 0x1548 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortC:
					Clear_Bit(DIO_DDRC,Local_PinNumber);
    14f6:	a4 e3       	ldi	r26, 0x34	; 52
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e4 e3       	ldi	r30, 0x34	; 52
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	48 2f       	mov	r20, r24
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	02 2e       	mov	r0, r18
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <DIO_voidSetPinDir+0x1d6>
    1510:	88 0f       	add	r24, r24
    1512:	99 1f       	adc	r25, r25
    1514:	0a 94       	dec	r0
    1516:	e2 f7       	brpl	.-8      	; 0x1510 <DIO_voidSetPinDir+0x1d2>
    1518:	80 95       	com	r24
    151a:	84 23       	and	r24, r20
    151c:	8c 93       	st	X, r24
    151e:	14 c0       	rjmp	.+40     	; 0x1548 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortD:
					Clear_Bit(DIO_DDRD,Local_PinNumber);
    1520:	a1 e3       	ldi	r26, 0x31	; 49
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e1 e3       	ldi	r30, 0x31	; 49
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	48 2f       	mov	r20, r24
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	28 2f       	mov	r18, r24
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	02 2e       	mov	r0, r18
    1538:	02 c0       	rjmp	.+4      	; 0x153e <DIO_voidSetPinDir+0x200>
    153a:	88 0f       	add	r24, r24
    153c:	99 1f       	adc	r25, r25
    153e:	0a 94       	dec	r0
    1540:	e2 f7       	brpl	.-8      	; 0x153a <DIO_voidSetPinDir+0x1fc>
    1542:	80 95       	com	r24
    1544:	84 23       	and	r24, r20
    1546:	8c 93       	st	X, r24
					break;
				}
			}
		}
	}
}
    1548:	27 96       	adiw	r28, 0x07	; 7
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	f8 94       	cli
    154e:	de bf       	out	0x3e, r29	; 62
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	cd bf       	out	0x3d, r28	; 61
    1554:	cf 91       	pop	r28
    1556:	df 91       	pop	r29
    1558:	08 95       	ret

0000155a <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Local_PortName,u8 Local_PinNumber,u8 Local_PinValue){
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	27 97       	sbiw	r28, 0x07	; 7
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	f8 94       	cli
    1568:	de bf       	out	0x3e, r29	; 62
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	cd bf       	out	0x3d, r28	; 61
    156e:	89 83       	std	Y+1, r24	; 0x01
    1570:	6a 83       	std	Y+2, r22	; 0x02
    1572:	4b 83       	std	Y+3, r20	; 0x03
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	85 30       	cpi	r24, 0x05	; 5
    1578:	08 f0       	brcs	.+2      	; 0x157c <DIO_voidSetPinValue+0x22>
    157a:	f4 c0       	rjmp	.+488    	; 0x1764 <DIO_voidSetPinValue+0x20a>
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	88 23       	and	r24, r24
    1580:	09 f4       	brne	.+2      	; 0x1584 <DIO_voidSetPinValue+0x2a>
    1582:	f0 c0       	rjmp	.+480    	; 0x1764 <DIO_voidSetPinValue+0x20a>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	88 30       	cpi	r24, 0x08	; 8
    1588:	08 f0       	brcs	.+2      	; 0x158c <DIO_voidSetPinValue+0x32>
    158a:	ec c0       	rjmp	.+472    	; 0x1764 <DIO_voidSetPinValue+0x20a>
			if(Local_PinValue == High){
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	81 30       	cpi	r24, 0x01	; 1
    1590:	09 f0       	breq	.+2      	; 0x1594 <DIO_voidSetPinValue+0x3a>
    1592:	70 c0       	rjmp	.+224    	; 0x1674 <DIO_voidSetPinValue+0x11a>
				switch(Local_PortName){
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	28 2f       	mov	r18, r24
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	3f 83       	std	Y+7, r19	; 0x07
    159c:	2e 83       	std	Y+6, r18	; 0x06
    159e:	8e 81       	ldd	r24, Y+6	; 0x06
    15a0:	9f 81       	ldd	r25, Y+7	; 0x07
    15a2:	82 30       	cpi	r24, 0x02	; 2
    15a4:	91 05       	cpc	r25, r1
    15a6:	51 f1       	breq	.+84     	; 0x15fc <DIO_voidSetPinValue+0xa2>
    15a8:	2e 81       	ldd	r18, Y+6	; 0x06
    15aa:	3f 81       	ldd	r19, Y+7	; 0x07
    15ac:	23 30       	cpi	r18, 0x03	; 3
    15ae:	31 05       	cpc	r19, r1
    15b0:	34 f4       	brge	.+12     	; 0x15be <DIO_voidSetPinValue+0x64>
    15b2:	8e 81       	ldd	r24, Y+6	; 0x06
    15b4:	9f 81       	ldd	r25, Y+7	; 0x07
    15b6:	81 30       	cpi	r24, 0x01	; 1
    15b8:	91 05       	cpc	r25, r1
    15ba:	61 f0       	breq	.+24     	; 0x15d4 <DIO_voidSetPinValue+0x7a>
    15bc:	d3 c0       	rjmp	.+422    	; 0x1764 <DIO_voidSetPinValue+0x20a>
    15be:	2e 81       	ldd	r18, Y+6	; 0x06
    15c0:	3f 81       	ldd	r19, Y+7	; 0x07
    15c2:	23 30       	cpi	r18, 0x03	; 3
    15c4:	31 05       	cpc	r19, r1
    15c6:	71 f1       	breq	.+92     	; 0x1624 <DIO_voidSetPinValue+0xca>
    15c8:	8e 81       	ldd	r24, Y+6	; 0x06
    15ca:	9f 81       	ldd	r25, Y+7	; 0x07
    15cc:	84 30       	cpi	r24, 0x04	; 4
    15ce:	91 05       	cpc	r25, r1
    15d0:	e9 f1       	breq	.+122    	; 0x164c <DIO_voidSetPinValue+0xf2>
    15d2:	c8 c0       	rjmp	.+400    	; 0x1764 <DIO_voidSetPinValue+0x20a>
				case DIO_PortA:
					Set_Bit(DIO_PORTA,Local_PinNumber);
    15d4:	ab e3       	ldi	r26, 0x3B	; 59
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	eb e3       	ldi	r30, 0x3B	; 59
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	48 2f       	mov	r20, r24
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	02 2e       	mov	r0, r18
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <DIO_voidSetPinValue+0x98>
    15ee:	88 0f       	add	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	0a 94       	dec	r0
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <DIO_voidSetPinValue+0x94>
    15f6:	84 2b       	or	r24, r20
    15f8:	8c 93       	st	X, r24
    15fa:	b4 c0       	rjmp	.+360    	; 0x1764 <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortB:
					Set_Bit(DIO_PORTB,Local_PinNumber);
    15fc:	a8 e3       	ldi	r26, 0x38	; 56
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	e8 e3       	ldi	r30, 0x38	; 56
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	48 2f       	mov	r20, r24
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	02 2e       	mov	r0, r18
    1614:	02 c0       	rjmp	.+4      	; 0x161a <DIO_voidSetPinValue+0xc0>
    1616:	88 0f       	add	r24, r24
    1618:	99 1f       	adc	r25, r25
    161a:	0a 94       	dec	r0
    161c:	e2 f7       	brpl	.-8      	; 0x1616 <DIO_voidSetPinValue+0xbc>
    161e:	84 2b       	or	r24, r20
    1620:	8c 93       	st	X, r24
    1622:	a0 c0       	rjmp	.+320    	; 0x1764 <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortC:
					Set_Bit(DIO_PORTC,Local_PinNumber);
    1624:	a5 e3       	ldi	r26, 0x35	; 53
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e5 e3       	ldi	r30, 0x35	; 53
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	48 2f       	mov	r20, r24
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	02 2e       	mov	r0, r18
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <DIO_voidSetPinValue+0xe8>
    163e:	88 0f       	add	r24, r24
    1640:	99 1f       	adc	r25, r25
    1642:	0a 94       	dec	r0
    1644:	e2 f7       	brpl	.-8      	; 0x163e <DIO_voidSetPinValue+0xe4>
    1646:	84 2b       	or	r24, r20
    1648:	8c 93       	st	X, r24
    164a:	8c c0       	rjmp	.+280    	; 0x1764 <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortD:
					Set_Bit(DIO_PORTD,Local_PinNumber);
    164c:	a2 e3       	ldi	r26, 0x32	; 50
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	e2 e3       	ldi	r30, 0x32	; 50
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	48 2f       	mov	r20, r24
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	02 2e       	mov	r0, r18
    1664:	02 c0       	rjmp	.+4      	; 0x166a <DIO_voidSetPinValue+0x110>
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	0a 94       	dec	r0
    166c:	e2 f7       	brpl	.-8      	; 0x1666 <DIO_voidSetPinValue+0x10c>
    166e:	84 2b       	or	r24, r20
    1670:	8c 93       	st	X, r24
    1672:	78 c0       	rjmp	.+240    	; 0x1764 <DIO_voidSetPinValue+0x20a>
					break;
				}
			}
			else if(Local_PinValue == Low){
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	88 23       	and	r24, r24
    1678:	09 f0       	breq	.+2      	; 0x167c <DIO_voidSetPinValue+0x122>
    167a:	74 c0       	rjmp	.+232    	; 0x1764 <DIO_voidSetPinValue+0x20a>
				switch(Local_PortName){
    167c:	89 81       	ldd	r24, Y+1	; 0x01
    167e:	28 2f       	mov	r18, r24
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	3d 83       	std	Y+5, r19	; 0x05
    1684:	2c 83       	std	Y+4, r18	; 0x04
    1686:	8c 81       	ldd	r24, Y+4	; 0x04
    1688:	9d 81       	ldd	r25, Y+5	; 0x05
    168a:	82 30       	cpi	r24, 0x02	; 2
    168c:	91 05       	cpc	r25, r1
    168e:	61 f1       	breq	.+88     	; 0x16e8 <DIO_voidSetPinValue+0x18e>
    1690:	2c 81       	ldd	r18, Y+4	; 0x04
    1692:	3d 81       	ldd	r19, Y+5	; 0x05
    1694:	23 30       	cpi	r18, 0x03	; 3
    1696:	31 05       	cpc	r19, r1
    1698:	34 f4       	brge	.+12     	; 0x16a6 <DIO_voidSetPinValue+0x14c>
    169a:	8c 81       	ldd	r24, Y+4	; 0x04
    169c:	9d 81       	ldd	r25, Y+5	; 0x05
    169e:	81 30       	cpi	r24, 0x01	; 1
    16a0:	91 05       	cpc	r25, r1
    16a2:	69 f0       	breq	.+26     	; 0x16be <DIO_voidSetPinValue+0x164>
    16a4:	5f c0       	rjmp	.+190    	; 0x1764 <DIO_voidSetPinValue+0x20a>
    16a6:	2c 81       	ldd	r18, Y+4	; 0x04
    16a8:	3d 81       	ldd	r19, Y+5	; 0x05
    16aa:	23 30       	cpi	r18, 0x03	; 3
    16ac:	31 05       	cpc	r19, r1
    16ae:	89 f1       	breq	.+98     	; 0x1712 <DIO_voidSetPinValue+0x1b8>
    16b0:	8c 81       	ldd	r24, Y+4	; 0x04
    16b2:	9d 81       	ldd	r25, Y+5	; 0x05
    16b4:	84 30       	cpi	r24, 0x04	; 4
    16b6:	91 05       	cpc	r25, r1
    16b8:	09 f4       	brne	.+2      	; 0x16bc <DIO_voidSetPinValue+0x162>
    16ba:	40 c0       	rjmp	.+128    	; 0x173c <DIO_voidSetPinValue+0x1e2>
    16bc:	53 c0       	rjmp	.+166    	; 0x1764 <DIO_voidSetPinValue+0x20a>
				case DIO_PortA:
					Clear_Bit(DIO_PORTA,Local_PinNumber);
    16be:	ab e3       	ldi	r26, 0x3B	; 59
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	eb e3       	ldi	r30, 0x3B	; 59
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	48 2f       	mov	r20, r24
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	28 2f       	mov	r18, r24
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	02 2e       	mov	r0, r18
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <DIO_voidSetPinValue+0x182>
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	0a 94       	dec	r0
    16de:	e2 f7       	brpl	.-8      	; 0x16d8 <DIO_voidSetPinValue+0x17e>
    16e0:	80 95       	com	r24
    16e2:	84 23       	and	r24, r20
    16e4:	8c 93       	st	X, r24
    16e6:	3e c0       	rjmp	.+124    	; 0x1764 <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortB:
					Clear_Bit(DIO_PORTB,Local_PinNumber);
    16e8:	a8 e3       	ldi	r26, 0x38	; 56
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	e8 e3       	ldi	r30, 0x38	; 56
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	48 2f       	mov	r20, r24
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	28 2f       	mov	r18, r24
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	02 2e       	mov	r0, r18
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <DIO_voidSetPinValue+0x1ac>
    1702:	88 0f       	add	r24, r24
    1704:	99 1f       	adc	r25, r25
    1706:	0a 94       	dec	r0
    1708:	e2 f7       	brpl	.-8      	; 0x1702 <DIO_voidSetPinValue+0x1a8>
    170a:	80 95       	com	r24
    170c:	84 23       	and	r24, r20
    170e:	8c 93       	st	X, r24
    1710:	29 c0       	rjmp	.+82     	; 0x1764 <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortC:
					Clear_Bit(DIO_PORTC,Local_PinNumber);
    1712:	a5 e3       	ldi	r26, 0x35	; 53
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e5 e3       	ldi	r30, 0x35	; 53
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	48 2f       	mov	r20, r24
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	28 2f       	mov	r18, r24
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	02 2e       	mov	r0, r18
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <DIO_voidSetPinValue+0x1d6>
    172c:	88 0f       	add	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	0a 94       	dec	r0
    1732:	e2 f7       	brpl	.-8      	; 0x172c <DIO_voidSetPinValue+0x1d2>
    1734:	80 95       	com	r24
    1736:	84 23       	and	r24, r20
    1738:	8c 93       	st	X, r24
    173a:	14 c0       	rjmp	.+40     	; 0x1764 <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortD:
					Clear_Bit(DIO_PORTD,Local_PinNumber);
    173c:	a2 e3       	ldi	r26, 0x32	; 50
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	e2 e3       	ldi	r30, 0x32	; 50
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	48 2f       	mov	r20, r24
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	02 2e       	mov	r0, r18
    1754:	02 c0       	rjmp	.+4      	; 0x175a <DIO_voidSetPinValue+0x200>
    1756:	88 0f       	add	r24, r24
    1758:	99 1f       	adc	r25, r25
    175a:	0a 94       	dec	r0
    175c:	e2 f7       	brpl	.-8      	; 0x1756 <DIO_voidSetPinValue+0x1fc>
    175e:	80 95       	com	r24
    1760:	84 23       	and	r24, r20
    1762:	8c 93       	st	X, r24
					break;
				}
			}
		}
	}
}
    1764:	27 96       	adiw	r28, 0x07	; 7
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	f8 94       	cli
    176a:	de bf       	out	0x3e, r29	; 62
    176c:	0f be       	out	0x3f, r0	; 63
    176e:	cd bf       	out	0x3d, r28	; 61
    1770:	cf 91       	pop	r28
    1772:	df 91       	pop	r29
    1774:	08 95       	ret

00001776 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Local_PortName,u8 Local_PinNumber){
    1776:	df 93       	push	r29
    1778:	cf 93       	push	r28
    177a:	00 d0       	rcall	.+0      	; 0x177c <DIO_u8GetPinValue+0x6>
    177c:	00 d0       	rcall	.+0      	; 0x177e <DIO_u8GetPinValue+0x8>
    177e:	0f 92       	push	r0
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    1784:	89 83       	std	Y+1, r24	; 0x01
    1786:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	85 30       	cpi	r24, 0x05	; 5
    178c:	08 f0       	brcs	.+2      	; 0x1790 <DIO_u8GetPinValue+0x1a>
    178e:	74 c0       	rjmp	.+232    	; 0x1878 <DIO_u8GetPinValue+0x102>
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	88 23       	and	r24, r24
    1794:	09 f4       	brne	.+2      	; 0x1798 <DIO_u8GetPinValue+0x22>
    1796:	70 c0       	rjmp	.+224    	; 0x1878 <DIO_u8GetPinValue+0x102>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
    1798:	8a 81       	ldd	r24, Y+2	; 0x02
    179a:	88 30       	cpi	r24, 0x08	; 8
    179c:	08 f0       	brcs	.+2      	; 0x17a0 <DIO_u8GetPinValue+0x2a>
    179e:	6c c0       	rjmp	.+216    	; 0x1878 <DIO_u8GetPinValue+0x102>
			switch(Local_PortName){
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	28 2f       	mov	r18, r24
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	3d 83       	std	Y+5, r19	; 0x05
    17a8:	2c 83       	std	Y+4, r18	; 0x04
    17aa:	4c 81       	ldd	r20, Y+4	; 0x04
    17ac:	5d 81       	ldd	r21, Y+5	; 0x05
    17ae:	42 30       	cpi	r20, 0x02	; 2
    17b0:	51 05       	cpc	r21, r1
    17b2:	49 f1       	breq	.+82     	; 0x1806 <DIO_u8GetPinValue+0x90>
    17b4:	8c 81       	ldd	r24, Y+4	; 0x04
    17b6:	9d 81       	ldd	r25, Y+5	; 0x05
    17b8:	83 30       	cpi	r24, 0x03	; 3
    17ba:	91 05       	cpc	r25, r1
    17bc:	34 f4       	brge	.+12     	; 0x17ca <DIO_u8GetPinValue+0x54>
    17be:	2c 81       	ldd	r18, Y+4	; 0x04
    17c0:	3d 81       	ldd	r19, Y+5	; 0x05
    17c2:	21 30       	cpi	r18, 0x01	; 1
    17c4:	31 05       	cpc	r19, r1
    17c6:	61 f0       	breq	.+24     	; 0x17e0 <DIO_u8GetPinValue+0x6a>
    17c8:	57 c0       	rjmp	.+174    	; 0x1878 <DIO_u8GetPinValue+0x102>
    17ca:	4c 81       	ldd	r20, Y+4	; 0x04
    17cc:	5d 81       	ldd	r21, Y+5	; 0x05
    17ce:	43 30       	cpi	r20, 0x03	; 3
    17d0:	51 05       	cpc	r21, r1
    17d2:	61 f1       	breq	.+88     	; 0x182c <DIO_u8GetPinValue+0xb6>
    17d4:	8c 81       	ldd	r24, Y+4	; 0x04
    17d6:	9d 81       	ldd	r25, Y+5	; 0x05
    17d8:	84 30       	cpi	r24, 0x04	; 4
    17da:	91 05       	cpc	r25, r1
    17dc:	d1 f1       	breq	.+116    	; 0x1852 <DIO_u8GetPinValue+0xdc>
    17de:	4c c0       	rjmp	.+152    	; 0x1878 <DIO_u8GetPinValue+0x102>
			case DIO_PortA:
				return Get_Bit(DIO_PINA,Local_PinNumber);
    17e0:	e9 e3       	ldi	r30, 0x39	; 57
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	28 2f       	mov	r18, r24
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	8a 81       	ldd	r24, Y+2	; 0x02
    17ec:	88 2f       	mov	r24, r24
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	a9 01       	movw	r20, r18
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <DIO_u8GetPinValue+0x82>
    17f4:	55 95       	asr	r21
    17f6:	47 95       	ror	r20
    17f8:	8a 95       	dec	r24
    17fa:	e2 f7       	brpl	.-8      	; 0x17f4 <DIO_u8GetPinValue+0x7e>
    17fc:	ca 01       	movw	r24, r20
    17fe:	58 2f       	mov	r21, r24
    1800:	51 70       	andi	r21, 0x01	; 1
    1802:	5b 83       	std	Y+3, r21	; 0x03
    1804:	3b c0       	rjmp	.+118    	; 0x187c <DIO_u8GetPinValue+0x106>
			case DIO_PortB:
				return Get_Bit(DIO_PINB,Local_PinNumber);
    1806:	e6 e3       	ldi	r30, 0x36	; 54
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	28 2f       	mov	r18, r24
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	8a 81       	ldd	r24, Y+2	; 0x02
    1812:	88 2f       	mov	r24, r24
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	a9 01       	movw	r20, r18
    1818:	02 c0       	rjmp	.+4      	; 0x181e <DIO_u8GetPinValue+0xa8>
    181a:	55 95       	asr	r21
    181c:	47 95       	ror	r20
    181e:	8a 95       	dec	r24
    1820:	e2 f7       	brpl	.-8      	; 0x181a <DIO_u8GetPinValue+0xa4>
    1822:	ca 01       	movw	r24, r20
    1824:	58 2f       	mov	r21, r24
    1826:	51 70       	andi	r21, 0x01	; 1
    1828:	5b 83       	std	Y+3, r21	; 0x03
    182a:	28 c0       	rjmp	.+80     	; 0x187c <DIO_u8GetPinValue+0x106>
			case DIO_PortC:
				return Get_Bit(DIO_PINC,Local_PinNumber);
    182c:	e3 e3       	ldi	r30, 0x33	; 51
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	28 2f       	mov	r18, r24
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	88 2f       	mov	r24, r24
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	a9 01       	movw	r20, r18
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <DIO_u8GetPinValue+0xce>
    1840:	55 95       	asr	r21
    1842:	47 95       	ror	r20
    1844:	8a 95       	dec	r24
    1846:	e2 f7       	brpl	.-8      	; 0x1840 <DIO_u8GetPinValue+0xca>
    1848:	ca 01       	movw	r24, r20
    184a:	58 2f       	mov	r21, r24
    184c:	51 70       	andi	r21, 0x01	; 1
    184e:	5b 83       	std	Y+3, r21	; 0x03
    1850:	15 c0       	rjmp	.+42     	; 0x187c <DIO_u8GetPinValue+0x106>
			case DIO_PortD:
				return Get_Bit(DIO_PIND,Local_PinNumber);
    1852:	e0 e3       	ldi	r30, 0x30	; 48
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	28 2f       	mov	r18, r24
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	8a 81       	ldd	r24, Y+2	; 0x02
    185e:	88 2f       	mov	r24, r24
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	a9 01       	movw	r20, r18
    1864:	02 c0       	rjmp	.+4      	; 0x186a <DIO_u8GetPinValue+0xf4>
    1866:	55 95       	asr	r21
    1868:	47 95       	ror	r20
    186a:	8a 95       	dec	r24
    186c:	e2 f7       	brpl	.-8      	; 0x1866 <DIO_u8GetPinValue+0xf0>
    186e:	ca 01       	movw	r24, r20
    1870:	58 2f       	mov	r21, r24
    1872:	51 70       	andi	r21, 0x01	; 1
    1874:	5b 83       	std	Y+3, r21	; 0x03
    1876:	02 c0       	rjmp	.+4      	; 0x187c <DIO_u8GetPinValue+0x106>
			}
		}
	}
	return -1;
    1878:	8f ef       	ldi	r24, 0xFF	; 255
    187a:	8b 83       	std	Y+3, r24	; 0x03
    187c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	08 95       	ret

0000188e <DIO_voidTogglePin>:

void DIO_voidTogglePin(u8 Local_PortName,u8 Local_PinNumber){
    188e:	df 93       	push	r29
    1890:	cf 93       	push	r28
    1892:	00 d0       	rcall	.+0      	; 0x1894 <DIO_voidTogglePin+0x6>
    1894:	00 d0       	rcall	.+0      	; 0x1896 <DIO_voidTogglePin+0x8>
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
    189a:	89 83       	std	Y+1, r24	; 0x01
    189c:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	85 30       	cpi	r24, 0x05	; 5
    18a2:	08 f0       	brcs	.+2      	; 0x18a6 <DIO_voidTogglePin+0x18>
    18a4:	77 c0       	rjmp	.+238    	; 0x1994 <DIO_voidTogglePin+0x106>
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	88 23       	and	r24, r24
    18aa:	09 f4       	brne	.+2      	; 0x18ae <DIO_voidTogglePin+0x20>
    18ac:	73 c0       	rjmp	.+230    	; 0x1994 <DIO_voidTogglePin+0x106>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	88 30       	cpi	r24, 0x08	; 8
    18b2:	08 f0       	brcs	.+2      	; 0x18b6 <DIO_voidTogglePin+0x28>
    18b4:	6f c0       	rjmp	.+222    	; 0x1994 <DIO_voidTogglePin+0x106>
			switch(Local_PortName){
    18b6:	89 81       	ldd	r24, Y+1	; 0x01
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	3c 83       	std	Y+4, r19	; 0x04
    18be:	2b 83       	std	Y+3, r18	; 0x03
    18c0:	8b 81       	ldd	r24, Y+3	; 0x03
    18c2:	9c 81       	ldd	r25, Y+4	; 0x04
    18c4:	82 30       	cpi	r24, 0x02	; 2
    18c6:	91 05       	cpc	r25, r1
    18c8:	51 f1       	breq	.+84     	; 0x191e <DIO_voidTogglePin+0x90>
    18ca:	2b 81       	ldd	r18, Y+3	; 0x03
    18cc:	3c 81       	ldd	r19, Y+4	; 0x04
    18ce:	23 30       	cpi	r18, 0x03	; 3
    18d0:	31 05       	cpc	r19, r1
    18d2:	34 f4       	brge	.+12     	; 0x18e0 <DIO_voidTogglePin+0x52>
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	9c 81       	ldd	r25, Y+4	; 0x04
    18d8:	81 30       	cpi	r24, 0x01	; 1
    18da:	91 05       	cpc	r25, r1
    18dc:	61 f0       	breq	.+24     	; 0x18f6 <DIO_voidTogglePin+0x68>
    18de:	5a c0       	rjmp	.+180    	; 0x1994 <DIO_voidTogglePin+0x106>
    18e0:	2b 81       	ldd	r18, Y+3	; 0x03
    18e2:	3c 81       	ldd	r19, Y+4	; 0x04
    18e4:	23 30       	cpi	r18, 0x03	; 3
    18e6:	31 05       	cpc	r19, r1
    18e8:	71 f1       	breq	.+92     	; 0x1946 <DIO_voidTogglePin+0xb8>
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	9c 81       	ldd	r25, Y+4	; 0x04
    18ee:	84 30       	cpi	r24, 0x04	; 4
    18f0:	91 05       	cpc	r25, r1
    18f2:	e9 f1       	breq	.+122    	; 0x196e <DIO_voidTogglePin+0xe0>
    18f4:	4f c0       	rjmp	.+158    	; 0x1994 <DIO_voidTogglePin+0x106>
			case DIO_PortA:
				Toggle_Bit(DIO_PORTA,Local_PinNumber);
    18f6:	ab e3       	ldi	r26, 0x3B	; 59
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	eb e3       	ldi	r30, 0x3B	; 59
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	48 2f       	mov	r20, r24
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
    1904:	28 2f       	mov	r18, r24
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	02 2e       	mov	r0, r18
    190e:	02 c0       	rjmp	.+4      	; 0x1914 <DIO_voidTogglePin+0x86>
    1910:	88 0f       	add	r24, r24
    1912:	99 1f       	adc	r25, r25
    1914:	0a 94       	dec	r0
    1916:	e2 f7       	brpl	.-8      	; 0x1910 <DIO_voidTogglePin+0x82>
    1918:	84 27       	eor	r24, r20
    191a:	8c 93       	st	X, r24
    191c:	3b c0       	rjmp	.+118    	; 0x1994 <DIO_voidTogglePin+0x106>
				break;
			case DIO_PortB:
				Toggle_Bit(DIO_PORTB,Local_PinNumber);
    191e:	a8 e3       	ldi	r26, 0x38	; 56
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	e8 e3       	ldi	r30, 0x38	; 56
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	48 2f       	mov	r20, r24
    192a:	8a 81       	ldd	r24, Y+2	; 0x02
    192c:	28 2f       	mov	r18, r24
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	02 2e       	mov	r0, r18
    1936:	02 c0       	rjmp	.+4      	; 0x193c <DIO_voidTogglePin+0xae>
    1938:	88 0f       	add	r24, r24
    193a:	99 1f       	adc	r25, r25
    193c:	0a 94       	dec	r0
    193e:	e2 f7       	brpl	.-8      	; 0x1938 <DIO_voidTogglePin+0xaa>
    1940:	84 27       	eor	r24, r20
    1942:	8c 93       	st	X, r24
    1944:	27 c0       	rjmp	.+78     	; 0x1994 <DIO_voidTogglePin+0x106>
				break;
			case DIO_PortC:
				Toggle_Bit(DIO_PORTC,Local_PinNumber);
    1946:	a5 e3       	ldi	r26, 0x35	; 53
    1948:	b0 e0       	ldi	r27, 0x00	; 0
    194a:	e5 e3       	ldi	r30, 0x35	; 53
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	48 2f       	mov	r20, r24
    1952:	8a 81       	ldd	r24, Y+2	; 0x02
    1954:	28 2f       	mov	r18, r24
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	02 2e       	mov	r0, r18
    195e:	02 c0       	rjmp	.+4      	; 0x1964 <DIO_voidTogglePin+0xd6>
    1960:	88 0f       	add	r24, r24
    1962:	99 1f       	adc	r25, r25
    1964:	0a 94       	dec	r0
    1966:	e2 f7       	brpl	.-8      	; 0x1960 <DIO_voidTogglePin+0xd2>
    1968:	84 27       	eor	r24, r20
    196a:	8c 93       	st	X, r24
    196c:	13 c0       	rjmp	.+38     	; 0x1994 <DIO_voidTogglePin+0x106>
				break;
			case DIO_PortD:
				Toggle_Bit(DIO_PORTD,Local_PinNumber);
    196e:	a2 e3       	ldi	r26, 0x32	; 50
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	e2 e3       	ldi	r30, 0x32	; 50
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	48 2f       	mov	r20, r24
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	28 2f       	mov	r18, r24
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	02 2e       	mov	r0, r18
    1986:	02 c0       	rjmp	.+4      	; 0x198c <DIO_voidTogglePin+0xfe>
    1988:	88 0f       	add	r24, r24
    198a:	99 1f       	adc	r25, r25
    198c:	0a 94       	dec	r0
    198e:	e2 f7       	brpl	.-8      	; 0x1988 <DIO_voidTogglePin+0xfa>
    1990:	84 27       	eor	r24, r20
    1992:	8c 93       	st	X, r24
				break;
			}
		}
	}
}
    1994:	0f 90       	pop	r0
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	cf 91       	pop	r28
    199e:	df 91       	pop	r29
    19a0:	08 95       	ret

000019a2 <DIO_voidSetPortDir>:

void DIO_voidSetPortDir(u8 Local_PortName,u8 Local_PortDir){
    19a2:	df 93       	push	r29
    19a4:	cf 93       	push	r28
    19a6:	00 d0       	rcall	.+0      	; 0x19a8 <DIO_voidSetPortDir+0x6>
    19a8:	00 d0       	rcall	.+0      	; 0x19aa <DIO_voidSetPortDir+0x8>
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
    19ae:	89 83       	std	Y+1, r24	; 0x01
    19b0:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	85 30       	cpi	r24, 0x05	; 5
    19b6:	b0 f5       	brcc	.+108    	; 0x1a24 <DIO_voidSetPortDir+0x82>
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	88 23       	and	r24, r24
    19bc:	99 f1       	breq	.+102    	; 0x1a24 <DIO_voidSetPortDir+0x82>
		switch(Local_PortName){
    19be:	89 81       	ldd	r24, Y+1	; 0x01
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	3c 83       	std	Y+4, r19	; 0x04
    19c6:	2b 83       	std	Y+3, r18	; 0x03
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	9c 81       	ldd	r25, Y+4	; 0x04
    19cc:	82 30       	cpi	r24, 0x02	; 2
    19ce:	91 05       	cpc	r25, r1
    19d0:	d9 f0       	breq	.+54     	; 0x1a08 <DIO_voidSetPortDir+0x66>
    19d2:	2b 81       	ldd	r18, Y+3	; 0x03
    19d4:	3c 81       	ldd	r19, Y+4	; 0x04
    19d6:	23 30       	cpi	r18, 0x03	; 3
    19d8:	31 05       	cpc	r19, r1
    19da:	34 f4       	brge	.+12     	; 0x19e8 <DIO_voidSetPortDir+0x46>
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	9c 81       	ldd	r25, Y+4	; 0x04
    19e0:	81 30       	cpi	r24, 0x01	; 1
    19e2:	91 05       	cpc	r25, r1
    19e4:	61 f0       	breq	.+24     	; 0x19fe <DIO_voidSetPortDir+0x5c>
    19e6:	1e c0       	rjmp	.+60     	; 0x1a24 <DIO_voidSetPortDir+0x82>
    19e8:	2b 81       	ldd	r18, Y+3	; 0x03
    19ea:	3c 81       	ldd	r19, Y+4	; 0x04
    19ec:	23 30       	cpi	r18, 0x03	; 3
    19ee:	31 05       	cpc	r19, r1
    19f0:	81 f0       	breq	.+32     	; 0x1a12 <DIO_voidSetPortDir+0x70>
    19f2:	8b 81       	ldd	r24, Y+3	; 0x03
    19f4:	9c 81       	ldd	r25, Y+4	; 0x04
    19f6:	84 30       	cpi	r24, 0x04	; 4
    19f8:	91 05       	cpc	r25, r1
    19fa:	81 f0       	breq	.+32     	; 0x1a1c <DIO_voidSetPortDir+0x7a>
    19fc:	13 c0       	rjmp	.+38     	; 0x1a24 <DIO_voidSetPortDir+0x82>
		case DIO_PortA:
			DIO_DDRA = Local_PortDir;
    19fe:	ea e3       	ldi	r30, 0x3A	; 58
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	80 83       	st	Z, r24
    1a06:	0e c0       	rjmp	.+28     	; 0x1a24 <DIO_voidSetPortDir+0x82>
			break;
		case DIO_PortB:
			DIO_DDRB = Local_PortDir;
    1a08:	e7 e3       	ldi	r30, 0x37	; 55
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0e:	80 83       	st	Z, r24
    1a10:	09 c0       	rjmp	.+18     	; 0x1a24 <DIO_voidSetPortDir+0x82>
			break;
		case DIO_PortC:
			DIO_DDRC = Local_PortDir;
    1a12:	e4 e3       	ldi	r30, 0x34	; 52
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	8a 81       	ldd	r24, Y+2	; 0x02
    1a18:	80 83       	st	Z, r24
    1a1a:	04 c0       	rjmp	.+8      	; 0x1a24 <DIO_voidSetPortDir+0x82>
			break;
		case DIO_PortD:
			DIO_DDRD = Local_PortDir;
    1a1c:	e1 e3       	ldi	r30, 0x31	; 49
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	8a 81       	ldd	r24, Y+2	; 0x02
    1a22:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a24:	0f 90       	pop	r0
    1a26:	0f 90       	pop	r0
    1a28:	0f 90       	pop	r0
    1a2a:	0f 90       	pop	r0
    1a2c:	cf 91       	pop	r28
    1a2e:	df 91       	pop	r29
    1a30:	08 95       	ret

00001a32 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 Local_PortName,u8 Local_PortValue){
    1a32:	df 93       	push	r29
    1a34:	cf 93       	push	r28
    1a36:	00 d0       	rcall	.+0      	; 0x1a38 <DIO_voidSetPortValue+0x6>
    1a38:	00 d0       	rcall	.+0      	; 0x1a3a <DIO_voidSetPortValue+0x8>
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	89 83       	std	Y+1, r24	; 0x01
    1a40:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
    1a44:	85 30       	cpi	r24, 0x05	; 5
    1a46:	b0 f5       	brcc	.+108    	; 0x1ab4 <DIO_voidSetPortValue+0x82>
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
    1a4a:	88 23       	and	r24, r24
    1a4c:	99 f1       	breq	.+102    	; 0x1ab4 <DIO_voidSetPortValue+0x82>
		switch(Local_PortName){
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	28 2f       	mov	r18, r24
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	3c 83       	std	Y+4, r19	; 0x04
    1a56:	2b 83       	std	Y+3, r18	; 0x03
    1a58:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5c:	82 30       	cpi	r24, 0x02	; 2
    1a5e:	91 05       	cpc	r25, r1
    1a60:	d9 f0       	breq	.+54     	; 0x1a98 <DIO_voidSetPortValue+0x66>
    1a62:	2b 81       	ldd	r18, Y+3	; 0x03
    1a64:	3c 81       	ldd	r19, Y+4	; 0x04
    1a66:	23 30       	cpi	r18, 0x03	; 3
    1a68:	31 05       	cpc	r19, r1
    1a6a:	34 f4       	brge	.+12     	; 0x1a78 <DIO_voidSetPortValue+0x46>
    1a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a70:	81 30       	cpi	r24, 0x01	; 1
    1a72:	91 05       	cpc	r25, r1
    1a74:	61 f0       	breq	.+24     	; 0x1a8e <DIO_voidSetPortValue+0x5c>
    1a76:	1e c0       	rjmp	.+60     	; 0x1ab4 <DIO_voidSetPortValue+0x82>
    1a78:	2b 81       	ldd	r18, Y+3	; 0x03
    1a7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a7c:	23 30       	cpi	r18, 0x03	; 3
    1a7e:	31 05       	cpc	r19, r1
    1a80:	81 f0       	breq	.+32     	; 0x1aa2 <DIO_voidSetPortValue+0x70>
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	9c 81       	ldd	r25, Y+4	; 0x04
    1a86:	84 30       	cpi	r24, 0x04	; 4
    1a88:	91 05       	cpc	r25, r1
    1a8a:	81 f0       	breq	.+32     	; 0x1aac <DIO_voidSetPortValue+0x7a>
    1a8c:	13 c0       	rjmp	.+38     	; 0x1ab4 <DIO_voidSetPortValue+0x82>
		case DIO_PortA:
			DIO_PORTA = Local_PortValue;
    1a8e:	eb e3       	ldi	r30, 0x3B	; 59
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	8a 81       	ldd	r24, Y+2	; 0x02
    1a94:	80 83       	st	Z, r24
    1a96:	0e c0       	rjmp	.+28     	; 0x1ab4 <DIO_voidSetPortValue+0x82>
			break;
		case DIO_PortB:
			DIO_PORTB = Local_PortValue;
    1a98:	e8 e3       	ldi	r30, 0x38	; 56
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9e:	80 83       	st	Z, r24
    1aa0:	09 c0       	rjmp	.+18     	; 0x1ab4 <DIO_voidSetPortValue+0x82>
			break;
		case DIO_PortC:
			DIO_PORTC = Local_PortValue;
    1aa2:	e5 e3       	ldi	r30, 0x35	; 53
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa8:	80 83       	st	Z, r24
    1aaa:	04 c0       	rjmp	.+8      	; 0x1ab4 <DIO_voidSetPortValue+0x82>
			break;
		case DIO_PortD:
			DIO_PORTD = Local_PortValue;
    1aac:	e2 e3       	ldi	r30, 0x32	; 50
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab2:	80 83       	st	Z, r24
			break;
		}
	}
}
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	0f 90       	pop	r0
    1aba:	0f 90       	pop	r0
    1abc:	cf 91       	pop	r28
    1abe:	df 91       	pop	r29
    1ac0:	08 95       	ret

00001ac2 <DIO_u8GetPortValue>:
u8 DIO_u8GetPortValue(u8 Local_PortName){
    1ac2:	df 93       	push	r29
    1ac4:	cf 93       	push	r28
    1ac6:	00 d0       	rcall	.+0      	; 0x1ac8 <DIO_u8GetPortValue+0x6>
    1ac8:	00 d0       	rcall	.+0      	; 0x1aca <DIO_u8GetPortValue+0x8>
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    1ace:	89 83       	std	Y+1, r24	; 0x01
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    1ad0:	89 81       	ldd	r24, Y+1	; 0x01
    1ad2:	85 30       	cpi	r24, 0x05	; 5
    1ad4:	b8 f5       	brcc	.+110    	; 0x1b44 <DIO_u8GetPortValue+0x82>
    1ad6:	89 81       	ldd	r24, Y+1	; 0x01
    1ad8:	88 23       	and	r24, r24
    1ada:	a1 f1       	breq	.+104    	; 0x1b44 <DIO_u8GetPortValue+0x82>
		switch(Local_PortName){
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	3c 83       	std	Y+4, r19	; 0x04
    1ae4:	2b 83       	std	Y+3, r18	; 0x03
    1ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aea:	82 30       	cpi	r24, 0x02	; 2
    1aec:	91 05       	cpc	r25, r1
    1aee:	d9 f0       	breq	.+54     	; 0x1b26 <DIO_u8GetPortValue+0x64>
    1af0:	2b 81       	ldd	r18, Y+3	; 0x03
    1af2:	3c 81       	ldd	r19, Y+4	; 0x04
    1af4:	23 30       	cpi	r18, 0x03	; 3
    1af6:	31 05       	cpc	r19, r1
    1af8:	34 f4       	brge	.+12     	; 0x1b06 <DIO_u8GetPortValue+0x44>
    1afa:	8b 81       	ldd	r24, Y+3	; 0x03
    1afc:	9c 81       	ldd	r25, Y+4	; 0x04
    1afe:	81 30       	cpi	r24, 0x01	; 1
    1b00:	91 05       	cpc	r25, r1
    1b02:	61 f0       	breq	.+24     	; 0x1b1c <DIO_u8GetPortValue+0x5a>
    1b04:	1f c0       	rjmp	.+62     	; 0x1b44 <DIO_u8GetPortValue+0x82>
    1b06:	2b 81       	ldd	r18, Y+3	; 0x03
    1b08:	3c 81       	ldd	r19, Y+4	; 0x04
    1b0a:	23 30       	cpi	r18, 0x03	; 3
    1b0c:	31 05       	cpc	r19, r1
    1b0e:	81 f0       	breq	.+32     	; 0x1b30 <DIO_u8GetPortValue+0x6e>
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	9c 81       	ldd	r25, Y+4	; 0x04
    1b14:	84 30       	cpi	r24, 0x04	; 4
    1b16:	91 05       	cpc	r25, r1
    1b18:	81 f0       	breq	.+32     	; 0x1b3a <DIO_u8GetPortValue+0x78>
    1b1a:	14 c0       	rjmp	.+40     	; 0x1b44 <DIO_u8GetPortValue+0x82>
		case DIO_PortA:
			return DIO_PORTA;
    1b1c:	eb e3       	ldi	r30, 0x3B	; 59
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	90 81       	ld	r25, Z
    1b22:	9a 83       	std	Y+2, r25	; 0x02
    1b24:	11 c0       	rjmp	.+34     	; 0x1b48 <DIO_u8GetPortValue+0x86>
		case DIO_PortB:
			return DIO_PORTB;
    1b26:	e8 e3       	ldi	r30, 0x38	; 56
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	20 81       	ld	r18, Z
    1b2c:	2a 83       	std	Y+2, r18	; 0x02
    1b2e:	0c c0       	rjmp	.+24     	; 0x1b48 <DIO_u8GetPortValue+0x86>
		case DIO_PortC:
			return DIO_PORTC;
    1b30:	e5 e3       	ldi	r30, 0x35	; 53
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	30 81       	ld	r19, Z
    1b36:	3a 83       	std	Y+2, r19	; 0x02
    1b38:	07 c0       	rjmp	.+14     	; 0x1b48 <DIO_u8GetPortValue+0x86>
		case DIO_PortD:
			return DIO_PORTD;
    1b3a:	e2 e3       	ldi	r30, 0x32	; 50
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	8a 83       	std	Y+2, r24	; 0x02
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <DIO_u8GetPortValue+0x86>
		}
	}
	return -1;
    1b44:	9f ef       	ldi	r25, 0xFF	; 255
    1b46:	9a 83       	std	Y+2, r25	; 0x02
    1b48:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1b4a:	0f 90       	pop	r0
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	0f 90       	pop	r0
    1b52:	cf 91       	pop	r28
    1b54:	df 91       	pop	r29
    1b56:	08 95       	ret

00001b58 <DIO_voidTogglePort>:

void DIO_voidTogglePort(u8 Local_PortName){
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	00 d0       	rcall	.+0      	; 0x1b5e <DIO_voidTogglePort+0x6>
    1b5e:	0f 92       	push	r0
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
    1b64:	89 83       	std	Y+1, r24	; 0x01
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
    1b68:	85 30       	cpi	r24, 0x05	; 5
    1b6a:	08 f0       	brcs	.+2      	; 0x1b6e <DIO_voidTogglePort+0x16>
    1b6c:	43 c0       	rjmp	.+134    	; 0x1bf4 <DIO_voidTogglePort+0x9c>
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	88 23       	and	r24, r24
    1b72:	09 f4       	brne	.+2      	; 0x1b76 <DIO_voidTogglePort+0x1e>
    1b74:	3f c0       	rjmp	.+126    	; 0x1bf4 <DIO_voidTogglePort+0x9c>
			switch(Local_PortName){
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
    1b78:	28 2f       	mov	r18, r24
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	3b 83       	std	Y+3, r19	; 0x03
    1b7e:	2a 83       	std	Y+2, r18	; 0x02
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	9b 81       	ldd	r25, Y+3	; 0x03
    1b84:	82 30       	cpi	r24, 0x02	; 2
    1b86:	91 05       	cpc	r25, r1
    1b88:	f1 f0       	breq	.+60     	; 0x1bc6 <DIO_voidTogglePort+0x6e>
    1b8a:	2a 81       	ldd	r18, Y+2	; 0x02
    1b8c:	3b 81       	ldd	r19, Y+3	; 0x03
    1b8e:	23 30       	cpi	r18, 0x03	; 3
    1b90:	31 05       	cpc	r19, r1
    1b92:	34 f4       	brge	.+12     	; 0x1ba0 <DIO_voidTogglePort+0x48>
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	9b 81       	ldd	r25, Y+3	; 0x03
    1b98:	81 30       	cpi	r24, 0x01	; 1
    1b9a:	91 05       	cpc	r25, r1
    1b9c:	61 f0       	breq	.+24     	; 0x1bb6 <DIO_voidTogglePort+0x5e>
    1b9e:	2a c0       	rjmp	.+84     	; 0x1bf4 <DIO_voidTogglePort+0x9c>
    1ba0:	2a 81       	ldd	r18, Y+2	; 0x02
    1ba2:	3b 81       	ldd	r19, Y+3	; 0x03
    1ba4:	23 30       	cpi	r18, 0x03	; 3
    1ba6:	31 05       	cpc	r19, r1
    1ba8:	b1 f0       	breq	.+44     	; 0x1bd6 <DIO_voidTogglePort+0x7e>
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	9b 81       	ldd	r25, Y+3	; 0x03
    1bae:	84 30       	cpi	r24, 0x04	; 4
    1bb0:	91 05       	cpc	r25, r1
    1bb2:	c9 f0       	breq	.+50     	; 0x1be6 <DIO_voidTogglePort+0x8e>
    1bb4:	1f c0       	rjmp	.+62     	; 0x1bf4 <DIO_voidTogglePort+0x9c>
			case DIO_PortA:
				DIO_PORTA ^= 0xFF;
    1bb6:	ab e3       	ldi	r26, 0x3B	; 59
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	eb e3       	ldi	r30, 0x3B	; 59
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	80 95       	com	r24
    1bc2:	8c 93       	st	X, r24
    1bc4:	17 c0       	rjmp	.+46     	; 0x1bf4 <DIO_voidTogglePort+0x9c>
				break;
			case DIO_PortB:
				DIO_PORTB ^= 0xFF;
    1bc6:	a8 e3       	ldi	r26, 0x38	; 56
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	e8 e3       	ldi	r30, 0x38	; 56
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	80 95       	com	r24
    1bd2:	8c 93       	st	X, r24
    1bd4:	0f c0       	rjmp	.+30     	; 0x1bf4 <DIO_voidTogglePort+0x9c>
				break;
			case DIO_PortC:
				DIO_PORTC ^= 0xFF;
    1bd6:	a5 e3       	ldi	r26, 0x35	; 53
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	e5 e3       	ldi	r30, 0x35	; 53
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	80 95       	com	r24
    1be2:	8c 93       	st	X, r24
    1be4:	07 c0       	rjmp	.+14     	; 0x1bf4 <DIO_voidTogglePort+0x9c>
				break;
			case DIO_PortD:
				DIO_PORTD ^= 0xFF;
    1be6:	a2 e3       	ldi	r26, 0x32	; 50
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	e2 e3       	ldi	r30, 0x32	; 50
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	80 95       	com	r24
    1bf2:	8c 93       	st	X, r24
				break;
			}
		}
}
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	08 95       	ret

00001c00 <ADC_voidInit>:

f32 Vref = 5;
void (*Global_ADC_CallBack)(void)= NULL;


void ADC_voidInit(f32 ref){
    1c00:	df 93       	push	r29
    1c02:	cf 93       	push	r28
    1c04:	00 d0       	rcall	.+0      	; 0x1c06 <ADC_voidInit+0x6>
    1c06:	00 d0       	rcall	.+0      	; 0x1c08 <ADC_voidInit+0x8>
    1c08:	cd b7       	in	r28, 0x3d	; 61
    1c0a:	de b7       	in	r29, 0x3e	; 62
    1c0c:	69 83       	std	Y+1, r22	; 0x01
    1c0e:	7a 83       	std	Y+2, r23	; 0x02
    1c10:	8b 83       	std	Y+3, r24	; 0x03
    1c12:	9c 83       	std	Y+4, r25	; 0x04
#if VOLTAGE_REFERENCE == ADC_AVCC
	SET_BIT(ADMUX, ADMUX_REFS0);
    1c14:	a7 e2       	ldi	r26, 0x27	; 39
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	e7 e2       	ldi	r30, 0x27	; 39
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	80 64       	ori	r24, 0x40	; 64
    1c20:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, ADMUX_REFS1);
    1c22:	a7 e2       	ldi	r26, 0x27	; 39
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	e7 e2       	ldi	r30, 0x27	; 39
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	8f 77       	andi	r24, 0x7F	; 127
    1c2e:	8c 93       	st	X, r24
	Vref = 5;
    1c30:	80 e0       	ldi	r24, 0x00	; 0
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	a0 ea       	ldi	r26, 0xA0	; 160
    1c36:	b0 e4       	ldi	r27, 0x40	; 64
    1c38:	80 93 0a 02 	sts	0x020A, r24
    1c3c:	90 93 0b 02 	sts	0x020B, r25
    1c40:	a0 93 0c 02 	sts	0x020C, r26
    1c44:	b0 93 0d 02 	sts	0x020D, r27
#endif

#if ADJUSTMENT == LEFT_ADJUSTMENT
	SET_BIT(ADMUX, ADMUX_ADLAR);
#elif ADJUSTMENT == RIGHT_ADJUSTMENT
	CLR_BIT(ADMUX, ADMUX_ADLAR);
    1c48:	a7 e2       	ldi	r26, 0x27	; 39
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	e7 e2       	ldi	r30, 0x27	; 39
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	8f 7d       	andi	r24, 0xDF	; 223
    1c54:	8c 93       	st	X, r24
#endif

#if ADC_PRESCALLER == DIVISION_BY_128
	SET_BIT(ADCSRA, ADCSRA_ADPS0);
    1c56:	a6 e2       	ldi	r26, 0x26	; 38
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	e6 e2       	ldi	r30, 0x26	; 38
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	81 60       	ori	r24, 0x01	; 1
    1c62:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADCSRA_ADPS1);
    1c64:	a6 e2       	ldi	r26, 0x26	; 38
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	e6 e2       	ldi	r30, 0x26	; 38
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	82 60       	ori	r24, 0x02	; 2
    1c70:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADCSRA_ADPS2);
    1c72:	a6 e2       	ldi	r26, 0x26	; 38
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e6 e2       	ldi	r30, 0x26	; 38
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	84 60       	ori	r24, 0x04	; 4
    1c7e:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA, ADCSRA_ADPS1);
	CLR_BIT(ADCSRA, ADCSRA_ADPS2);
#endif

#if ADC_AUTO_TRIGGER_SOURCE == FREE_RUNNING_MODE
	SET_BIT(ADCSRA, ADCSRA_ADATE);
    1c80:	a6 e2       	ldi	r26, 0x26	; 38
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	e6 e2       	ldi	r30, 0x26	; 38
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	80 62       	ori	r24, 0x20	; 32
    1c8c:	8c 93       	st	X, r24
#endif
}
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	cf 91       	pop	r28
    1c98:	df 91       	pop	r29
    1c9a:	08 95       	ret

00001c9c <ADC_voidEnable>:

void ADC_voidEnable(){
    1c9c:	df 93       	push	r29
    1c9e:	cf 93       	push	r28
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    1ca4:	a6 e2       	ldi	r26, 0x26	; 38
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	e6 e2       	ldi	r30, 0x26	; 38
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	80 68       	ori	r24, 0x80	; 128
    1cb0:	8c 93       	st	X, r24
}
    1cb2:	cf 91       	pop	r28
    1cb4:	df 91       	pop	r29
    1cb6:	08 95       	ret

00001cb8 <ADC_voidInterrputEnable>:

void ADC_voidInterrputEnable(){
    1cb8:	df 93       	push	r29
    1cba:	cf 93       	push	r28
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADCSRA_ADIE);
    1cc0:	a6 e2       	ldi	r26, 0x26	; 38
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	e6 e2       	ldi	r30, 0x26	; 38
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	88 60       	ori	r24, 0x08	; 8
    1ccc:	8c 93       	st	X, r24
}
    1cce:	cf 91       	pop	r28
    1cd0:	df 91       	pop	r29
    1cd2:	08 95       	ret

00001cd4 <ADC_voidInterrputDisable>:

void ADC_voidInterrputDisable(){
    1cd4:	df 93       	push	r29
    1cd6:	cf 93       	push	r28
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
    1cdc:	a6 e2       	ldi	r26, 0x26	; 38
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	e6 e2       	ldi	r30, 0x26	; 38
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	87 7f       	andi	r24, 0xF7	; 247
    1ce8:	8c 93       	st	X, r24
}
    1cea:	cf 91       	pop	r28
    1cec:	df 91       	pop	r29
    1cee:	08 95       	ret

00001cf0 <ADC_voidDisable>:

void ADC_voidDisable(){
    1cf0:	df 93       	push	r29
    1cf2:	cf 93       	push	r28
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADCSRA_ADEN);
    1cf8:	a6 e2       	ldi	r26, 0x26	; 38
    1cfa:	b0 e0       	ldi	r27, 0x00	; 0
    1cfc:	e6 e2       	ldi	r30, 0x26	; 38
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	8f 77       	andi	r24, 0x7F	; 127
    1d04:	8c 93       	st	X, r24
}
    1d06:	cf 91       	pop	r28
    1d08:	df 91       	pop	r29
    1d0a:	08 95       	ret

00001d0c <ADC_u16ReadADC>:

u16 ADC_u16ReadADC(){
    1d0c:	df 93       	push	r29
    1d0e:	cf 93       	push	r28
    1d10:	00 d0       	rcall	.+0      	; 0x1d12 <ADC_u16ReadADC+0x6>
    1d12:	cd b7       	in	r28, 0x3d	; 61
    1d14:	de b7       	in	r29, 0x3e	; 62
	u16 result = 0;
    1d16:	1a 82       	std	Y+2, r1	; 0x02
    1d18:	19 82       	std	Y+1, r1	; 0x01
	result = (ADC * Vref)/1024;
    1d1a:	e4 e2       	ldi	r30, 0x24	; 36
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	91 81       	ldd	r25, Z+1	; 0x01
    1d22:	cc 01       	movw	r24, r24
    1d24:	a0 e0       	ldi	r26, 0x00	; 0
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	bc 01       	movw	r22, r24
    1d2a:	cd 01       	movw	r24, r26
    1d2c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	20 91 0a 02 	lds	r18, 0x020A
    1d38:	30 91 0b 02 	lds	r19, 0x020B
    1d3c:	40 91 0c 02 	lds	r20, 0x020C
    1d40:	50 91 0d 02 	lds	r21, 0x020D
    1d44:	bc 01       	movw	r22, r24
    1d46:	cd 01       	movw	r24, r26
    1d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	bc 01       	movw	r22, r24
    1d52:	cd 01       	movw	r24, r26
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	40 e8       	ldi	r20, 0x80	; 128
    1d5a:	54 e4       	ldi	r21, 0x44	; 68
    1d5c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	bc 01       	movw	r22, r24
    1d66:	cd 01       	movw	r24, r26
    1d68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	9a 83       	std	Y+2, r25	; 0x02
    1d72:	89 83       	std	Y+1, r24	; 0x01
	return result;
    1d74:	89 81       	ldd	r24, Y+1	; 0x01
    1d76:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1d78:	0f 90       	pop	r0
    1d7a:	0f 90       	pop	r0
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	08 95       	ret

00001d82 <ADC_voidStartConversion>:

void ADC_voidStartConversion(u8 addresscpy){
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	0f 92       	push	r0
    1d88:	cd b7       	in	r28, 0x3d	; 61
    1d8a:	de b7       	in	r29, 0x3e	; 62
    1d8c:	89 83       	std	Y+1, r24	; 0x01
	/*Clear first 5 bits in ADMUX register*/
	ADMUX &= 0b11100000;
    1d8e:	a7 e2       	ldi	r26, 0x27	; 39
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	e7 e2       	ldi	r30, 0x27	; 39
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	80 7e       	andi	r24, 0xE0	; 224
    1d9a:	8c 93       	st	X, r24

	/*set required channel*/
	ADMUX |= addresscpy;
    1d9c:	a7 e2       	ldi	r26, 0x27	; 39
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	e7 e2       	ldi	r30, 0x27	; 39
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	90 81       	ld	r25, Z
    1da6:	89 81       	ldd	r24, Y+1	; 0x01
    1da8:	89 2b       	or	r24, r25
    1daa:	8c 93       	st	X, r24
	/*Start conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
    1dac:	a6 e2       	ldi	r26, 0x26	; 38
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	e6 e2       	ldi	r30, 0x26	; 38
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	80 64       	ori	r24, 0x40	; 64
    1db8:	8c 93       	st	X, r24
	/*Busy waiting (polling) until the conversion is complete*/
	while((GET_BIT(ADCSRA,ADCSRA_ADIF))==0);
    1dba:	e6 e2       	ldi	r30, 0x26	; 38
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	82 95       	swap	r24
    1dc2:	8f 70       	andi	r24, 0x0F	; 15
    1dc4:	88 2f       	mov	r24, r24
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	81 70       	andi	r24, 0x01	; 1
    1dca:	90 70       	andi	r25, 0x00	; 0
    1dcc:	00 97       	sbiw	r24, 0x00	; 0
    1dce:	a9 f3       	breq	.-22     	; 0x1dba <ADC_voidStartConversion+0x38>

	/*clear the interrupt flag*/
	SET_BIT(ADCSRA,ADCSRA_ADIF);
    1dd0:	a6 e2       	ldi	r26, 0x26	; 38
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	e6 e2       	ldi	r30, 0x26	; 38
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	80 61       	ori	r24, 0x10	; 16
    1ddc:	8c 93       	st	X, r24
}
    1dde:	0f 90       	pop	r0
    1de0:	cf 91       	pop	r28
    1de2:	df 91       	pop	r29
    1de4:	08 95       	ret

00001de6 <ADC_voidStartInterruptConversion>:

void ADC_voidStartInterruptConversion(u8 addresscpy){
    1de6:	df 93       	push	r29
    1de8:	cf 93       	push	r28
    1dea:	0f 92       	push	r0
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62
    1df0:	89 83       	std	Y+1, r24	; 0x01
	/*Clear first 5 bits in ADMUX register*/
	ADMUX &= 0b11100000;
    1df2:	a7 e2       	ldi	r26, 0x27	; 39
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	e7 e2       	ldi	r30, 0x27	; 39
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	80 7e       	andi	r24, 0xE0	; 224
    1dfe:	8c 93       	st	X, r24
	/*set required channel*/
	ADMUX |= addresscpy;
    1e00:	a7 e2       	ldi	r26, 0x27	; 39
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	e7 e2       	ldi	r30, 0x27	; 39
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	90 81       	ld	r25, Z
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
    1e0c:	89 2b       	or	r24, r25
    1e0e:	8c 93       	st	X, r24
	/*Start conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
    1e10:	a6 e2       	ldi	r26, 0x26	; 38
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	e6 e2       	ldi	r30, 0x26	; 38
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	80 64       	ori	r24, 0x40	; 64
    1e1c:	8c 93       	st	X, r24
}
    1e1e:	0f 90       	pop	r0
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	08 95       	ret

00001e26 <ADC_voidChaining>:

void ADC_voidChaining(u8 addresscpy){
    1e26:	df 93       	push	r29
    1e28:	cf 93       	push	r28
    1e2a:	0f 92       	push	r0
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
    1e30:	89 83       	std	Y+1, r24	; 0x01
	/*Clear first 5 bits in ADMUX register*/
	ADMUX &= 0b11100000;
    1e32:	a7 e2       	ldi	r26, 0x27	; 39
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	e7 e2       	ldi	r30, 0x27	; 39
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	80 7e       	andi	r24, 0xE0	; 224
    1e3e:	8c 93       	st	X, r24
	/*set required channel*/
	ADMUX |= addresscpy;
    1e40:	a7 e2       	ldi	r26, 0x27	; 39
    1e42:	b0 e0       	ldi	r27, 0x00	; 0
    1e44:	e7 e2       	ldi	r30, 0x27	; 39
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	90 81       	ld	r25, Z
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01
    1e4c:	89 2b       	or	r24, r25
    1e4e:	8c 93       	st	X, r24
}
    1e50:	0f 90       	pop	r0
    1e52:	cf 91       	pop	r28
    1e54:	df 91       	pop	r29
    1e56:	08 95       	ret

00001e58 <ADC_u16ReadADCInMV>:

u16 ADC_u16ReadADCInMV(){
    1e58:	df 93       	push	r29
    1e5a:	cf 93       	push	r28
    1e5c:	00 d0       	rcall	.+0      	; 0x1e5e <ADC_u16ReadADCInMV+0x6>
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
	u16 result = 0;
    1e62:	1a 82       	std	Y+2, r1	; 0x02
    1e64:	19 82       	std	Y+1, r1	; 0x01
	result = (ADC * 1000UL * Vref)/1024;
    1e66:	e4 e2       	ldi	r30, 0x24	; 36
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	91 81       	ldd	r25, Z+1	; 0x01
    1e6e:	cc 01       	movw	r24, r24
    1e70:	a0 e0       	ldi	r26, 0x00	; 0
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	28 ee       	ldi	r18, 0xE8	; 232
    1e76:	33 e0       	ldi	r19, 0x03	; 3
    1e78:	40 e0       	ldi	r20, 0x00	; 0
    1e7a:	50 e0       	ldi	r21, 0x00	; 0
    1e7c:	bc 01       	movw	r22, r24
    1e7e:	cd 01       	movw	r24, r26
    1e80:	0e 94 36 35 	call	0x6a6c	; 0x6a6c <__mulsi3>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	bc 01       	movw	r22, r24
    1e8a:	cd 01       	movw	r24, r26
    1e8c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1e90:	dc 01       	movw	r26, r24
    1e92:	cb 01       	movw	r24, r22
    1e94:	20 91 0a 02 	lds	r18, 0x020A
    1e98:	30 91 0b 02 	lds	r19, 0x020B
    1e9c:	40 91 0c 02 	lds	r20, 0x020C
    1ea0:	50 91 0d 02 	lds	r21, 0x020D
    1ea4:	bc 01       	movw	r22, r24
    1ea6:	cd 01       	movw	r24, r26
    1ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eac:	dc 01       	movw	r26, r24
    1eae:	cb 01       	movw	r24, r22
    1eb0:	bc 01       	movw	r22, r24
    1eb2:	cd 01       	movw	r24, r26
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	40 e8       	ldi	r20, 0x80	; 128
    1eba:	54 e4       	ldi	r21, 0x44	; 68
    1ebc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	cb 01       	movw	r24, r22
    1ec4:	bc 01       	movw	r22, r24
    1ec6:	cd 01       	movw	r24, r26
    1ec8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	9a 83       	std	Y+2, r25	; 0x02
    1ed2:	89 83       	std	Y+1, r24	; 0x01
	return result;
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
    1ed6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1ed8:	0f 90       	pop	r0
    1eda:	0f 90       	pop	r0
    1edc:	cf 91       	pop	r28
    1ede:	df 91       	pop	r29
    1ee0:	08 95       	ret

00001ee2 <ADC_voidSetCallback>:


void ADC_voidSetCallback( void (*ptr) (void) ){
    1ee2:	df 93       	push	r29
    1ee4:	cf 93       	push	r28
    1ee6:	00 d0       	rcall	.+0      	; 0x1ee8 <ADC_voidSetCallback+0x6>
    1ee8:	cd b7       	in	r28, 0x3d	; 61
    1eea:	de b7       	in	r29, 0x3e	; 62
    1eec:	9a 83       	std	Y+2, r25	; 0x02
    1eee:	89 83       	std	Y+1, r24	; 0x01
	Global_ADC_CallBack = ptr;
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
    1ef2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef4:	90 93 a3 02 	sts	0x02A3, r25
    1ef8:	80 93 a2 02 	sts	0x02A2, r24
}
    1efc:	0f 90       	pop	r0
    1efe:	0f 90       	pop	r0
    1f00:	cf 91       	pop	r28
    1f02:	df 91       	pop	r29
    1f04:	08 95       	ret

00001f06 <__vector_16>:

void __vector_16 (void){
    1f06:	1f 92       	push	r1
    1f08:	0f 92       	push	r0
    1f0a:	0f b6       	in	r0, 0x3f	; 63
    1f0c:	0f 92       	push	r0
    1f0e:	11 24       	eor	r1, r1
    1f10:	2f 93       	push	r18
    1f12:	3f 93       	push	r19
    1f14:	4f 93       	push	r20
    1f16:	5f 93       	push	r21
    1f18:	6f 93       	push	r22
    1f1a:	7f 93       	push	r23
    1f1c:	8f 93       	push	r24
    1f1e:	9f 93       	push	r25
    1f20:	af 93       	push	r26
    1f22:	bf 93       	push	r27
    1f24:	ef 93       	push	r30
    1f26:	ff 93       	push	r31
    1f28:	df 93       	push	r29
    1f2a:	cf 93       	push	r28
    1f2c:	cd b7       	in	r28, 0x3d	; 61
    1f2e:	de b7       	in	r29, 0x3e	; 62

	if(Global_ADC_CallBack != NULL){
    1f30:	80 91 a2 02 	lds	r24, 0x02A2
    1f34:	90 91 a3 02 	lds	r25, 0x02A3
    1f38:	00 97       	sbiw	r24, 0x00	; 0
    1f3a:	29 f0       	breq	.+10     	; 0x1f46 <__vector_16+0x40>
		Global_ADC_CallBack();
    1f3c:	e0 91 a2 02 	lds	r30, 0x02A2
    1f40:	f0 91 a3 02 	lds	r31, 0x02A3
    1f44:	09 95       	icall
	}
}
    1f46:	cf 91       	pop	r28
    1f48:	df 91       	pop	r29
    1f4a:	ff 91       	pop	r31
    1f4c:	ef 91       	pop	r30
    1f4e:	bf 91       	pop	r27
    1f50:	af 91       	pop	r26
    1f52:	9f 91       	pop	r25
    1f54:	8f 91       	pop	r24
    1f56:	7f 91       	pop	r23
    1f58:	6f 91       	pop	r22
    1f5a:	5f 91       	pop	r21
    1f5c:	4f 91       	pop	r20
    1f5e:	3f 91       	pop	r19
    1f60:	2f 91       	pop	r18
    1f62:	0f 90       	pop	r0
    1f64:	0f be       	out	0x3f, r0	; 63
    1f66:	0f 90       	pop	r0
    1f68:	1f 90       	pop	r1
    1f6a:	18 95       	reti

00001f6c <SevSeg_voidSingleInit>:
		0b00111, // 7
		0b10000, // 8
		0b10001  // 9
};

void SevSeg_voidSingleInit(){
    1f6c:	df 93       	push	r29
    1f6e:	cf 93       	push	r28
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(Sev_PORT,0x7F);
    1f74:	82 e0       	ldi	r24, 0x02	; 2
    1f76:	6f e7       	ldi	r22, 0x7F	; 127
    1f78:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <DIO_voidSetPortDir>
}
    1f7c:	cf 91       	pop	r28
    1f7e:	df 91       	pop	r29
    1f80:	08 95       	ret

00001f82 <SevSeg_voidDoubleInit>:

void SevSeg_voidDoubleInit(){
    1f82:	df 93       	push	r29
    1f84:	cf 93       	push	r28
    1f86:	cd b7       	in	r28, 0x3d	; 61
    1f88:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(Sev_PORT,0x7F);
    1f8a:	82 e0       	ldi	r24, 0x02	; 2
    1f8c:	6f e7       	ldi	r22, 0x7F	; 127
    1f8e:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(Sev_PORT2,0x7F);
    1f92:	84 e0       	ldi	r24, 0x04	; 4
    1f94:	6f e7       	ldi	r22, 0x7F	; 127
    1f96:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <DIO_voidSetPortDir>
}
    1f9a:	cf 91       	pop	r28
    1f9c:	df 91       	pop	r29
    1f9e:	08 95       	ret

00001fa0 <SevSeg_voidDisplayNumber>:

void SevSeg_voidDisplayNumber(u8 number){
    1fa0:	df 93       	push	r29
    1fa2:	cf 93       	push	r28
    1fa4:	cd b7       	in	r28, 0x3d	; 61
    1fa6:	de b7       	in	r29, 0x3e	; 62
    1fa8:	60 97       	sbiw	r28, 0x10	; 16
    1faa:	0f b6       	in	r0, 0x3f	; 63
    1fac:	f8 94       	cli
    1fae:	de bf       	out	0x3e, r29	; 62
    1fb0:	0f be       	out	0x3f, r0	; 63
    1fb2:	cd bf       	out	0x3d, r28	; 61
    1fb4:	8b 87       	std	Y+11, r24	; 0x0b
	s8 Sev_numbers[] = Sev_Array;
    1fb6:	ce 01       	movw	r24, r28
    1fb8:	01 96       	adiw	r24, 0x01	; 1
    1fba:	9d 87       	std	Y+13, r25	; 0x0d
    1fbc:	8c 87       	std	Y+12, r24	; 0x0c
    1fbe:	e9 e5       	ldi	r30, 0x59	; 89
    1fc0:	f2 e0       	ldi	r31, 0x02	; 2
    1fc2:	ff 87       	std	Y+15, r31	; 0x0f
    1fc4:	ee 87       	std	Y+14, r30	; 0x0e
    1fc6:	fa e0       	ldi	r31, 0x0A	; 10
    1fc8:	f8 8b       	std	Y+16, r31	; 0x10
    1fca:	ee 85       	ldd	r30, Y+14	; 0x0e
    1fcc:	ff 85       	ldd	r31, Y+15	; 0x0f
    1fce:	00 80       	ld	r0, Z
    1fd0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fd2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fd4:	01 96       	adiw	r24, 0x01	; 1
    1fd6:	9f 87       	std	Y+15, r25	; 0x0f
    1fd8:	8e 87       	std	Y+14, r24	; 0x0e
    1fda:	ec 85       	ldd	r30, Y+12	; 0x0c
    1fdc:	fd 85       	ldd	r31, Y+13	; 0x0d
    1fde:	00 82       	st	Z, r0
    1fe0:	8c 85       	ldd	r24, Y+12	; 0x0c
    1fe2:	9d 85       	ldd	r25, Y+13	; 0x0d
    1fe4:	01 96       	adiw	r24, 0x01	; 1
    1fe6:	9d 87       	std	Y+13, r25	; 0x0d
    1fe8:	8c 87       	std	Y+12, r24	; 0x0c
    1fea:	98 89       	ldd	r25, Y+16	; 0x10
    1fec:	91 50       	subi	r25, 0x01	; 1
    1fee:	98 8b       	std	Y+16, r25	; 0x10
    1ff0:	e8 89       	ldd	r30, Y+16	; 0x10
    1ff2:	ee 23       	and	r30, r30
    1ff4:	51 f7       	brne	.-44     	; 0x1fca <SevSeg_voidDisplayNumber+0x2a>
	if(number < 10 && number >= 0){
    1ff6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ff8:	8a 30       	cpi	r24, 0x0A	; 10
    1ffa:	70 f4       	brcc	.+28     	; 0x2018 <SevSeg_voidDisplayNumber+0x78>
		DIO_voidSetPortValue(Sev_PORT,Sev_numbers[number]);
    1ffc:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ffe:	28 2f       	mov	r18, r24
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	ce 01       	movw	r24, r28
    2004:	01 96       	adiw	r24, 0x01	; 1
    2006:	fc 01       	movw	r30, r24
    2008:	e2 0f       	add	r30, r18
    200a:	f3 1f       	adc	r31, r19
    200c:	80 81       	ld	r24, Z
    200e:	98 2f       	mov	r25, r24
    2010:	82 e0       	ldi	r24, 0x02	; 2
    2012:	69 2f       	mov	r22, r25
    2014:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <DIO_voidSetPortValue>
	}
}
    2018:	60 96       	adiw	r28, 0x10	; 16
    201a:	0f b6       	in	r0, 0x3f	; 63
    201c:	f8 94       	cli
    201e:	de bf       	out	0x3e, r29	; 62
    2020:	0f be       	out	0x3f, r0	; 63
    2022:	cd bf       	out	0x3d, r28	; 61
    2024:	cf 91       	pop	r28
    2026:	df 91       	pop	r29
    2028:	08 95       	ret

0000202a <SevSeg_voidSingleAutoCounter>:

void SevSeg_voidSingleAutoCounter(){
    202a:	df 93       	push	r29
    202c:	cf 93       	push	r28
    202e:	cd b7       	in	r28, 0x3d	; 61
    2030:	de b7       	in	r29, 0x3e	; 62
    2032:	a1 97       	sbiw	r28, 0x21	; 33
    2034:	0f b6       	in	r0, 0x3f	; 63
    2036:	f8 94       	cli
    2038:	de bf       	out	0x3e, r29	; 62
    203a:	0f be       	out	0x3f, r0	; 63
    203c:	cd bf       	out	0x3d, r28	; 61

	s8 Sev_numbers[] = Sev_Array;
    203e:	ce 01       	movw	r24, r28
    2040:	43 96       	adiw	r24, 0x13	; 19
    2042:	9e 8f       	std	Y+30, r25	; 0x1e
    2044:	8d 8f       	std	Y+29, r24	; 0x1d
    2046:	e3 e6       	ldi	r30, 0x63	; 99
    2048:	f2 e0       	ldi	r31, 0x02	; 2
    204a:	f8 a3       	std	Y+32, r31	; 0x20
    204c:	ef 8f       	std	Y+31, r30	; 0x1f
    204e:	fa e0       	ldi	r31, 0x0A	; 10
    2050:	f9 a3       	std	Y+33, r31	; 0x21
    2052:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2054:	f8 a1       	ldd	r31, Y+32	; 0x20
    2056:	00 80       	ld	r0, Z
    2058:	8f 8d       	ldd	r24, Y+31	; 0x1f
    205a:	98 a1       	ldd	r25, Y+32	; 0x20
    205c:	01 96       	adiw	r24, 0x01	; 1
    205e:	98 a3       	std	Y+32, r25	; 0x20
    2060:	8f 8f       	std	Y+31, r24	; 0x1f
    2062:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2064:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2066:	00 82       	st	Z, r0
    2068:	8d 8d       	ldd	r24, Y+29	; 0x1d
    206a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    206c:	01 96       	adiw	r24, 0x01	; 1
    206e:	9e 8f       	std	Y+30, r25	; 0x1e
    2070:	8d 8f       	std	Y+29, r24	; 0x1d
    2072:	99 a1       	ldd	r25, Y+33	; 0x21
    2074:	91 50       	subi	r25, 0x01	; 1
    2076:	99 a3       	std	Y+33, r25	; 0x21
    2078:	e9 a1       	ldd	r30, Y+33	; 0x21
    207a:	ee 23       	and	r30, r30
    207c:	51 f7       	brne	.-44     	; 0x2052 <SevSeg_voidSingleAutoCounter+0x28>
	s32 Local_Counter1 = 0;
    207e:	1f 86       	std	Y+15, r1	; 0x0f
    2080:	18 8a       	std	Y+16, r1	; 0x10
    2082:	19 8a       	std	Y+17, r1	; 0x11
    2084:	1a 8a       	std	Y+18, r1	; 0x12

	for(Local_Counter1 =0;Local_Counter1 <10; Local_Counter1++){
    2086:	1f 86       	std	Y+15, r1	; 0x0f
    2088:	18 8a       	std	Y+16, r1	; 0x10
    208a:	19 8a       	std	Y+17, r1	; 0x11
    208c:	1a 8a       	std	Y+18, r1	; 0x12
    208e:	8d c0       	rjmp	.+282    	; 0x21aa <SevSeg_voidSingleAutoCounter+0x180>

		DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter1]);
    2090:	8f 85       	ldd	r24, Y+15	; 0x0f
    2092:	98 89       	ldd	r25, Y+16	; 0x10
    2094:	a9 89       	ldd	r26, Y+17	; 0x11
    2096:	ba 89       	ldd	r27, Y+18	; 0x12
    2098:	9e 01       	movw	r18, r28
    209a:	2d 5e       	subi	r18, 0xED	; 237
    209c:	3f 4f       	sbci	r19, 0xFF	; 255
    209e:	f9 01       	movw	r30, r18
    20a0:	e8 0f       	add	r30, r24
    20a2:	f9 1f       	adc	r31, r25
    20a4:	80 81       	ld	r24, Z
    20a6:	98 2f       	mov	r25, r24
    20a8:	82 e0       	ldi	r24, 0x02	; 2
    20aa:	69 2f       	mov	r22, r25
    20ac:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <DIO_voidSetPortValue>
    20b0:	80 e0       	ldi	r24, 0x00	; 0
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	a0 e2       	ldi	r26, 0x20	; 32
    20b6:	b1 e4       	ldi	r27, 0x41	; 65
    20b8:	8b 87       	std	Y+11, r24	; 0x0b
    20ba:	9c 87       	std	Y+12, r25	; 0x0c
    20bc:	ad 87       	std	Y+13, r26	; 0x0d
    20be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    20c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	4a e7       	ldi	r20, 0x7A	; 122
    20ce:	55 e4       	ldi	r21, 0x45	; 69
    20d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	8f 83       	std	Y+7, r24	; 0x07
    20da:	98 87       	std	Y+8, r25	; 0x08
    20dc:	a9 87       	std	Y+9, r26	; 0x09
    20de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20e0:	6f 81       	ldd	r22, Y+7	; 0x07
    20e2:	78 85       	ldd	r23, Y+8	; 0x08
    20e4:	89 85       	ldd	r24, Y+9	; 0x09
    20e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	40 e8       	ldi	r20, 0x80	; 128
    20ee:	5f e3       	ldi	r21, 0x3F	; 63
    20f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20f4:	88 23       	and	r24, r24
    20f6:	2c f4       	brge	.+10     	; 0x2102 <SevSeg_voidSingleAutoCounter+0xd8>
		__ticks = 1;
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	9e 83       	std	Y+6, r25	; 0x06
    20fe:	8d 83       	std	Y+5, r24	; 0x05
    2100:	3f c0       	rjmp	.+126    	; 0x2180 <SevSeg_voidSingleAutoCounter+0x156>
	else if (__tmp > 65535)
    2102:	6f 81       	ldd	r22, Y+7	; 0x07
    2104:	78 85       	ldd	r23, Y+8	; 0x08
    2106:	89 85       	ldd	r24, Y+9	; 0x09
    2108:	9a 85       	ldd	r25, Y+10	; 0x0a
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	3f ef       	ldi	r19, 0xFF	; 255
    210e:	4f e7       	ldi	r20, 0x7F	; 127
    2110:	57 e4       	ldi	r21, 0x47	; 71
    2112:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2116:	18 16       	cp	r1, r24
    2118:	4c f5       	brge	.+82     	; 0x216c <SevSeg_voidSingleAutoCounter+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    211a:	6b 85       	ldd	r22, Y+11	; 0x0b
    211c:	7c 85       	ldd	r23, Y+12	; 0x0c
    211e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2120:	9e 85       	ldd	r25, Y+14	; 0x0e
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	40 e2       	ldi	r20, 0x20	; 32
    2128:	51 e4       	ldi	r21, 0x41	; 65
    212a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	bc 01       	movw	r22, r24
    2134:	cd 01       	movw	r24, r26
    2136:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	9e 83       	std	Y+6, r25	; 0x06
    2140:	8d 83       	std	Y+5, r24	; 0x05
    2142:	0f c0       	rjmp	.+30     	; 0x2162 <SevSeg_voidSingleAutoCounter+0x138>
    2144:	80 e9       	ldi	r24, 0x90	; 144
    2146:	91 e0       	ldi	r25, 0x01	; 1
    2148:	9c 83       	std	Y+4, r25	; 0x04
    214a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    214c:	8b 81       	ldd	r24, Y+3	; 0x03
    214e:	9c 81       	ldd	r25, Y+4	; 0x04
    2150:	01 97       	sbiw	r24, 0x01	; 1
    2152:	f1 f7       	brne	.-4      	; 0x2150 <SevSeg_voidSingleAutoCounter+0x126>
    2154:	9c 83       	std	Y+4, r25	; 0x04
    2156:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2158:	8d 81       	ldd	r24, Y+5	; 0x05
    215a:	9e 81       	ldd	r25, Y+6	; 0x06
    215c:	01 97       	sbiw	r24, 0x01	; 1
    215e:	9e 83       	std	Y+6, r25	; 0x06
    2160:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2162:	8d 81       	ldd	r24, Y+5	; 0x05
    2164:	9e 81       	ldd	r25, Y+6	; 0x06
    2166:	00 97       	sbiw	r24, 0x00	; 0
    2168:	69 f7       	brne	.-38     	; 0x2144 <SevSeg_voidSingleAutoCounter+0x11a>
    216a:	14 c0       	rjmp	.+40     	; 0x2194 <SevSeg_voidSingleAutoCounter+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    216c:	6f 81       	ldd	r22, Y+7	; 0x07
    216e:	78 85       	ldd	r23, Y+8	; 0x08
    2170:	89 85       	ldd	r24, Y+9	; 0x09
    2172:	9a 85       	ldd	r25, Y+10	; 0x0a
    2174:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	9e 83       	std	Y+6, r25	; 0x06
    217e:	8d 83       	std	Y+5, r24	; 0x05
    2180:	8d 81       	ldd	r24, Y+5	; 0x05
    2182:	9e 81       	ldd	r25, Y+6	; 0x06
    2184:	9a 83       	std	Y+2, r25	; 0x02
    2186:	89 83       	std	Y+1, r24	; 0x01
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	9a 81       	ldd	r25, Y+2	; 0x02
    218c:	01 97       	sbiw	r24, 0x01	; 1
    218e:	f1 f7       	brne	.-4      	; 0x218c <SevSeg_voidSingleAutoCounter+0x162>
    2190:	9a 83       	std	Y+2, r25	; 0x02
    2192:	89 83       	std	Y+1, r24	; 0x01
void SevSeg_voidSingleAutoCounter(){

	s8 Sev_numbers[] = Sev_Array;
	s32 Local_Counter1 = 0;

	for(Local_Counter1 =0;Local_Counter1 <10; Local_Counter1++){
    2194:	8f 85       	ldd	r24, Y+15	; 0x0f
    2196:	98 89       	ldd	r25, Y+16	; 0x10
    2198:	a9 89       	ldd	r26, Y+17	; 0x11
    219a:	ba 89       	ldd	r27, Y+18	; 0x12
    219c:	01 96       	adiw	r24, 0x01	; 1
    219e:	a1 1d       	adc	r26, r1
    21a0:	b1 1d       	adc	r27, r1
    21a2:	8f 87       	std	Y+15, r24	; 0x0f
    21a4:	98 8b       	std	Y+16, r25	; 0x10
    21a6:	a9 8b       	std	Y+17, r26	; 0x11
    21a8:	ba 8b       	std	Y+18, r27	; 0x12
    21aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ac:	98 89       	ldd	r25, Y+16	; 0x10
    21ae:	a9 89       	ldd	r26, Y+17	; 0x11
    21b0:	ba 89       	ldd	r27, Y+18	; 0x12
    21b2:	8a 30       	cpi	r24, 0x0A	; 10
    21b4:	91 05       	cpc	r25, r1
    21b6:	a1 05       	cpc	r26, r1
    21b8:	b1 05       	cpc	r27, r1
    21ba:	0c f4       	brge	.+2      	; 0x21be <SevSeg_voidSingleAutoCounter+0x194>
    21bc:	69 cf       	rjmp	.-302    	; 0x2090 <SevSeg_voidSingleAutoCounter+0x66>

		DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter1]);
		_delay_ms(Sev_DELAY);
	}

}
    21be:	a1 96       	adiw	r28, 0x21	; 33
    21c0:	0f b6       	in	r0, 0x3f	; 63
    21c2:	f8 94       	cli
    21c4:	de bf       	out	0x3e, r29	; 62
    21c6:	0f be       	out	0x3f, r0	; 63
    21c8:	cd bf       	out	0x3d, r28	; 61
    21ca:	cf 91       	pop	r28
    21cc:	df 91       	pop	r29
    21ce:	08 95       	ret

000021d0 <SevSeg_voidDoubleAutoCounter>:

void SevSeg_voidDoubleAutoCounter(){
    21d0:	df 93       	push	r29
    21d2:	cf 93       	push	r28
    21d4:	cd b7       	in	r28, 0x3d	; 61
    21d6:	de b7       	in	r29, 0x3e	; 62
    21d8:	a5 97       	sbiw	r28, 0x25	; 37
    21da:	0f b6       	in	r0, 0x3f	; 63
    21dc:	f8 94       	cli
    21de:	de bf       	out	0x3e, r29	; 62
    21e0:	0f be       	out	0x3f, r0	; 63
    21e2:	cd bf       	out	0x3d, r28	; 61
	s8 Sev_numbers[] = Sev_Array;
    21e4:	ce 01       	movw	r24, r28
    21e6:	47 96       	adiw	r24, 0x17	; 23
    21e8:	9a a3       	std	Y+34, r25	; 0x22
    21ea:	89 a3       	std	Y+33, r24	; 0x21
    21ec:	ed e6       	ldi	r30, 0x6D	; 109
    21ee:	f2 e0       	ldi	r31, 0x02	; 2
    21f0:	fc a3       	std	Y+36, r31	; 0x24
    21f2:	eb a3       	std	Y+35, r30	; 0x23
    21f4:	fa e0       	ldi	r31, 0x0A	; 10
    21f6:	fd a3       	std	Y+37, r31	; 0x25
    21f8:	eb a1       	ldd	r30, Y+35	; 0x23
    21fa:	fc a1       	ldd	r31, Y+36	; 0x24
    21fc:	00 80       	ld	r0, Z
    21fe:	8b a1       	ldd	r24, Y+35	; 0x23
    2200:	9c a1       	ldd	r25, Y+36	; 0x24
    2202:	01 96       	adiw	r24, 0x01	; 1
    2204:	9c a3       	std	Y+36, r25	; 0x24
    2206:	8b a3       	std	Y+35, r24	; 0x23
    2208:	e9 a1       	ldd	r30, Y+33	; 0x21
    220a:	fa a1       	ldd	r31, Y+34	; 0x22
    220c:	00 82       	st	Z, r0
    220e:	89 a1       	ldd	r24, Y+33	; 0x21
    2210:	9a a1       	ldd	r25, Y+34	; 0x22
    2212:	01 96       	adiw	r24, 0x01	; 1
    2214:	9a a3       	std	Y+34, r25	; 0x22
    2216:	89 a3       	std	Y+33, r24	; 0x21
    2218:	9d a1       	ldd	r25, Y+37	; 0x25
    221a:	91 50       	subi	r25, 0x01	; 1
    221c:	9d a3       	std	Y+37, r25	; 0x25
    221e:	ed a1       	ldd	r30, Y+37	; 0x25
    2220:	ee 23       	and	r30, r30
    2222:	51 f7       	brne	.-44     	; 0x21f8 <SevSeg_voidDoubleAutoCounter+0x28>
	s32 Local_Counter1 = 0;
    2224:	1b 8a       	std	Y+19, r1	; 0x13
    2226:	1c 8a       	std	Y+20, r1	; 0x14
    2228:	1d 8a       	std	Y+21, r1	; 0x15
    222a:	1e 8a       	std	Y+22, r1	; 0x16
	s32 Local_Counter2 = 0;
    222c:	1f 86       	std	Y+15, r1	; 0x0f
    222e:	18 8a       	std	Y+16, r1	; 0x10
    2230:	19 8a       	std	Y+17, r1	; 0x11
    2232:	1a 8a       	std	Y+18, r1	; 0x12

	for(Local_Counter1 =0; Local_Counter1 < 10; Local_Counter1++){
    2234:	1b 8a       	std	Y+19, r1	; 0x13
    2236:	1c 8a       	std	Y+20, r1	; 0x14
    2238:	1d 8a       	std	Y+21, r1	; 0x15
    223a:	1e 8a       	std	Y+22, r1	; 0x16
    223c:	b7 c0       	rjmp	.+366    	; 0x23ac <SevSeg_voidDoubleAutoCounter+0x1dc>

		DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);
    223e:	8b 89       	ldd	r24, Y+19	; 0x13
    2240:	9c 89       	ldd	r25, Y+20	; 0x14
    2242:	ad 89       	ldd	r26, Y+21	; 0x15
    2244:	be 89       	ldd	r27, Y+22	; 0x16
    2246:	9e 01       	movw	r18, r28
    2248:	29 5e       	subi	r18, 0xE9	; 233
    224a:	3f 4f       	sbci	r19, 0xFF	; 255
    224c:	f9 01       	movw	r30, r18
    224e:	e8 0f       	add	r30, r24
    2250:	f9 1f       	adc	r31, r25
    2252:	80 81       	ld	r24, Z
    2254:	98 2f       	mov	r25, r24
    2256:	84 e0       	ldi	r24, 0x04	; 4
    2258:	69 2f       	mov	r22, r25
    225a:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <DIO_voidSetPortValue>

		for(Local_Counter2 =0;Local_Counter2 <10; Local_Counter2++){
    225e:	1f 86       	std	Y+15, r1	; 0x0f
    2260:	18 8a       	std	Y+16, r1	; 0x10
    2262:	19 8a       	std	Y+17, r1	; 0x11
    2264:	1a 8a       	std	Y+18, r1	; 0x12
    2266:	8d c0       	rjmp	.+282    	; 0x2382 <SevSeg_voidDoubleAutoCounter+0x1b2>

			DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    2268:	8f 85       	ldd	r24, Y+15	; 0x0f
    226a:	98 89       	ldd	r25, Y+16	; 0x10
    226c:	a9 89       	ldd	r26, Y+17	; 0x11
    226e:	ba 89       	ldd	r27, Y+18	; 0x12
    2270:	9e 01       	movw	r18, r28
    2272:	29 5e       	subi	r18, 0xE9	; 233
    2274:	3f 4f       	sbci	r19, 0xFF	; 255
    2276:	f9 01       	movw	r30, r18
    2278:	e8 0f       	add	r30, r24
    227a:	f9 1f       	adc	r31, r25
    227c:	80 81       	ld	r24, Z
    227e:	98 2f       	mov	r25, r24
    2280:	82 e0       	ldi	r24, 0x02	; 2
    2282:	69 2f       	mov	r22, r25
    2284:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <DIO_voidSetPortValue>
    2288:	80 e0       	ldi	r24, 0x00	; 0
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	a0 e2       	ldi	r26, 0x20	; 32
    228e:	b1 e4       	ldi	r27, 0x41	; 65
    2290:	8b 87       	std	Y+11, r24	; 0x0b
    2292:	9c 87       	std	Y+12, r25	; 0x0c
    2294:	ad 87       	std	Y+13, r26	; 0x0d
    2296:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2298:	6b 85       	ldd	r22, Y+11	; 0x0b
    229a:	7c 85       	ldd	r23, Y+12	; 0x0c
    229c:	8d 85       	ldd	r24, Y+13	; 0x0d
    229e:	9e 85       	ldd	r25, Y+14	; 0x0e
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	4a e7       	ldi	r20, 0x7A	; 122
    22a6:	55 e4       	ldi	r21, 0x45	; 69
    22a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	8f 83       	std	Y+7, r24	; 0x07
    22b2:	98 87       	std	Y+8, r25	; 0x08
    22b4:	a9 87       	std	Y+9, r26	; 0x09
    22b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22b8:	6f 81       	ldd	r22, Y+7	; 0x07
    22ba:	78 85       	ldd	r23, Y+8	; 0x08
    22bc:	89 85       	ldd	r24, Y+9	; 0x09
    22be:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	40 e8       	ldi	r20, 0x80	; 128
    22c6:	5f e3       	ldi	r21, 0x3F	; 63
    22c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22cc:	88 23       	and	r24, r24
    22ce:	2c f4       	brge	.+10     	; 0x22da <SevSeg_voidDoubleAutoCounter+0x10a>
		__ticks = 1;
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	9e 83       	std	Y+6, r25	; 0x06
    22d6:	8d 83       	std	Y+5, r24	; 0x05
    22d8:	3f c0       	rjmp	.+126    	; 0x2358 <SevSeg_voidDoubleAutoCounter+0x188>
	else if (__tmp > 65535)
    22da:	6f 81       	ldd	r22, Y+7	; 0x07
    22dc:	78 85       	ldd	r23, Y+8	; 0x08
    22de:	89 85       	ldd	r24, Y+9	; 0x09
    22e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	3f ef       	ldi	r19, 0xFF	; 255
    22e6:	4f e7       	ldi	r20, 0x7F	; 127
    22e8:	57 e4       	ldi	r21, 0x47	; 71
    22ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22ee:	18 16       	cp	r1, r24
    22f0:	4c f5       	brge	.+82     	; 0x2344 <SevSeg_voidDoubleAutoCounter+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    22f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    22f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    22f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	40 e2       	ldi	r20, 0x20	; 32
    2300:	51 e4       	ldi	r21, 0x41	; 65
    2302:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	bc 01       	movw	r22, r24
    230c:	cd 01       	movw	r24, r26
    230e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	9e 83       	std	Y+6, r25	; 0x06
    2318:	8d 83       	std	Y+5, r24	; 0x05
    231a:	0f c0       	rjmp	.+30     	; 0x233a <SevSeg_voidDoubleAutoCounter+0x16a>
    231c:	80 e9       	ldi	r24, 0x90	; 144
    231e:	91 e0       	ldi	r25, 0x01	; 1
    2320:	9c 83       	std	Y+4, r25	; 0x04
    2322:	8b 83       	std	Y+3, r24	; 0x03
    2324:	8b 81       	ldd	r24, Y+3	; 0x03
    2326:	9c 81       	ldd	r25, Y+4	; 0x04
    2328:	01 97       	sbiw	r24, 0x01	; 1
    232a:	f1 f7       	brne	.-4      	; 0x2328 <SevSeg_voidDoubleAutoCounter+0x158>
    232c:	9c 83       	std	Y+4, r25	; 0x04
    232e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2330:	8d 81       	ldd	r24, Y+5	; 0x05
    2332:	9e 81       	ldd	r25, Y+6	; 0x06
    2334:	01 97       	sbiw	r24, 0x01	; 1
    2336:	9e 83       	std	Y+6, r25	; 0x06
    2338:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233a:	8d 81       	ldd	r24, Y+5	; 0x05
    233c:	9e 81       	ldd	r25, Y+6	; 0x06
    233e:	00 97       	sbiw	r24, 0x00	; 0
    2340:	69 f7       	brne	.-38     	; 0x231c <SevSeg_voidDoubleAutoCounter+0x14c>
    2342:	14 c0       	rjmp	.+40     	; 0x236c <SevSeg_voidDoubleAutoCounter+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2344:	6f 81       	ldd	r22, Y+7	; 0x07
    2346:	78 85       	ldd	r23, Y+8	; 0x08
    2348:	89 85       	ldd	r24, Y+9	; 0x09
    234a:	9a 85       	ldd	r25, Y+10	; 0x0a
    234c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	9e 83       	std	Y+6, r25	; 0x06
    2356:	8d 83       	std	Y+5, r24	; 0x05
    2358:	8d 81       	ldd	r24, Y+5	; 0x05
    235a:	9e 81       	ldd	r25, Y+6	; 0x06
    235c:	9a 83       	std	Y+2, r25	; 0x02
    235e:	89 83       	std	Y+1, r24	; 0x01
    2360:	89 81       	ldd	r24, Y+1	; 0x01
    2362:	9a 81       	ldd	r25, Y+2	; 0x02
    2364:	01 97       	sbiw	r24, 0x01	; 1
    2366:	f1 f7       	brne	.-4      	; 0x2364 <SevSeg_voidDoubleAutoCounter+0x194>
    2368:	9a 83       	std	Y+2, r25	; 0x02
    236a:	89 83       	std	Y+1, r24	; 0x01

	for(Local_Counter1 =0; Local_Counter1 < 10; Local_Counter1++){

		DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);

		for(Local_Counter2 =0;Local_Counter2 <10; Local_Counter2++){
    236c:	8f 85       	ldd	r24, Y+15	; 0x0f
    236e:	98 89       	ldd	r25, Y+16	; 0x10
    2370:	a9 89       	ldd	r26, Y+17	; 0x11
    2372:	ba 89       	ldd	r27, Y+18	; 0x12
    2374:	01 96       	adiw	r24, 0x01	; 1
    2376:	a1 1d       	adc	r26, r1
    2378:	b1 1d       	adc	r27, r1
    237a:	8f 87       	std	Y+15, r24	; 0x0f
    237c:	98 8b       	std	Y+16, r25	; 0x10
    237e:	a9 8b       	std	Y+17, r26	; 0x11
    2380:	ba 8b       	std	Y+18, r27	; 0x12
    2382:	8f 85       	ldd	r24, Y+15	; 0x0f
    2384:	98 89       	ldd	r25, Y+16	; 0x10
    2386:	a9 89       	ldd	r26, Y+17	; 0x11
    2388:	ba 89       	ldd	r27, Y+18	; 0x12
    238a:	8a 30       	cpi	r24, 0x0A	; 10
    238c:	91 05       	cpc	r25, r1
    238e:	a1 05       	cpc	r26, r1
    2390:	b1 05       	cpc	r27, r1
    2392:	0c f4       	brge	.+2      	; 0x2396 <SevSeg_voidDoubleAutoCounter+0x1c6>
    2394:	69 cf       	rjmp	.-302    	; 0x2268 <SevSeg_voidDoubleAutoCounter+0x98>
void SevSeg_voidDoubleAutoCounter(){
	s8 Sev_numbers[] = Sev_Array;
	s32 Local_Counter1 = 0;
	s32 Local_Counter2 = 0;

	for(Local_Counter1 =0; Local_Counter1 < 10; Local_Counter1++){
    2396:	8b 89       	ldd	r24, Y+19	; 0x13
    2398:	9c 89       	ldd	r25, Y+20	; 0x14
    239a:	ad 89       	ldd	r26, Y+21	; 0x15
    239c:	be 89       	ldd	r27, Y+22	; 0x16
    239e:	01 96       	adiw	r24, 0x01	; 1
    23a0:	a1 1d       	adc	r26, r1
    23a2:	b1 1d       	adc	r27, r1
    23a4:	8b 8b       	std	Y+19, r24	; 0x13
    23a6:	9c 8b       	std	Y+20, r25	; 0x14
    23a8:	ad 8b       	std	Y+21, r26	; 0x15
    23aa:	be 8b       	std	Y+22, r27	; 0x16
    23ac:	8b 89       	ldd	r24, Y+19	; 0x13
    23ae:	9c 89       	ldd	r25, Y+20	; 0x14
    23b0:	ad 89       	ldd	r26, Y+21	; 0x15
    23b2:	be 89       	ldd	r27, Y+22	; 0x16
    23b4:	8a 30       	cpi	r24, 0x0A	; 10
    23b6:	91 05       	cpc	r25, r1
    23b8:	a1 05       	cpc	r26, r1
    23ba:	b1 05       	cpc	r27, r1
    23bc:	0c f4       	brge	.+2      	; 0x23c0 <SevSeg_voidDoubleAutoCounter+0x1f0>
    23be:	3f cf       	rjmp	.-386    	; 0x223e <SevSeg_voidDoubleAutoCounter+0x6e>

			DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
			_delay_ms(Sev_DELAY);
		}
	}
}
    23c0:	a5 96       	adiw	r28, 0x25	; 37
    23c2:	0f b6       	in	r0, 0x3f	; 63
    23c4:	f8 94       	cli
    23c6:	de bf       	out	0x3e, r29	; 62
    23c8:	0f be       	out	0x3f, r0	; 63
    23ca:	cd bf       	out	0x3d, r28	; 61
    23cc:	cf 91       	pop	r28
    23ce:	df 91       	pop	r29
    23d0:	08 95       	ret

000023d2 <SevSeg_voidSingleRangeCounter>:

void SevSeg_voidSingleRangeCounter(s8 start, s8 end){
    23d2:	df 93       	push	r29
    23d4:	cf 93       	push	r28
    23d6:	cd b7       	in	r28, 0x3d	; 61
    23d8:	de b7       	in	r29, 0x3e	; 62
    23da:	e1 97       	sbiw	r28, 0x31	; 49
    23dc:	0f b6       	in	r0, 0x3f	; 63
    23de:	f8 94       	cli
    23e0:	de bf       	out	0x3e, r29	; 62
    23e2:	0f be       	out	0x3f, r0	; 63
    23e4:	cd bf       	out	0x3d, r28	; 61
    23e6:	8b a7       	std	Y+43, r24	; 0x2b
    23e8:	6c a7       	std	Y+44, r22	; 0x2c
	s8 Sev_numbers[] = Sev_Array;
    23ea:	ce 01       	movw	r24, r28
    23ec:	81 96       	adiw	r24, 0x21	; 33
    23ee:	9e a7       	std	Y+46, r25	; 0x2e
    23f0:	8d a7       	std	Y+45, r24	; 0x2d
    23f2:	e7 e7       	ldi	r30, 0x77	; 119
    23f4:	f2 e0       	ldi	r31, 0x02	; 2
    23f6:	f8 ab       	std	Y+48, r31	; 0x30
    23f8:	ef a7       	std	Y+47, r30	; 0x2f
    23fa:	fa e0       	ldi	r31, 0x0A	; 10
    23fc:	f9 ab       	std	Y+49, r31	; 0x31
    23fe:	ef a5       	ldd	r30, Y+47	; 0x2f
    2400:	f8 a9       	ldd	r31, Y+48	; 0x30
    2402:	00 80       	ld	r0, Z
    2404:	8f a5       	ldd	r24, Y+47	; 0x2f
    2406:	98 a9       	ldd	r25, Y+48	; 0x30
    2408:	01 96       	adiw	r24, 0x01	; 1
    240a:	98 ab       	std	Y+48, r25	; 0x30
    240c:	8f a7       	std	Y+47, r24	; 0x2f
    240e:	ed a5       	ldd	r30, Y+45	; 0x2d
    2410:	fe a5       	ldd	r31, Y+46	; 0x2e
    2412:	00 82       	st	Z, r0
    2414:	8d a5       	ldd	r24, Y+45	; 0x2d
    2416:	9e a5       	ldd	r25, Y+46	; 0x2e
    2418:	01 96       	adiw	r24, 0x01	; 1
    241a:	9e a7       	std	Y+46, r25	; 0x2e
    241c:	8d a7       	std	Y+45, r24	; 0x2d
    241e:	99 a9       	ldd	r25, Y+49	; 0x31
    2420:	91 50       	subi	r25, 0x01	; 1
    2422:	99 ab       	std	Y+49, r25	; 0x31
    2424:	e9 a9       	ldd	r30, Y+49	; 0x31
    2426:	ee 23       	and	r30, r30
    2428:	51 f7       	brne	.-44     	; 0x23fe <SevSeg_voidSingleRangeCounter+0x2c>
	s32 Local_Counter2 = 0;
    242a:	1d 8e       	std	Y+29, r1	; 0x1d
    242c:	1e 8e       	std	Y+30, r1	; 0x1e
    242e:	1f 8e       	std	Y+31, r1	; 0x1f
    2430:	18 a2       	std	Y+32, r1	; 0x20
	if(start >= 0 && start < 10 && end < 10 && end >= 0){
    2432:	8b a5       	ldd	r24, Y+43	; 0x2b
    2434:	88 23       	and	r24, r24
    2436:	0c f4       	brge	.+2      	; 0x243a <SevSeg_voidSingleRangeCounter+0x68>
    2438:	64 c1       	rjmp	.+712    	; 0x2702 <SevSeg_voidSingleRangeCounter+0x330>
    243a:	8b a5       	ldd	r24, Y+43	; 0x2b
    243c:	8a 30       	cpi	r24, 0x0A	; 10
    243e:	0c f0       	brlt	.+2      	; 0x2442 <SevSeg_voidSingleRangeCounter+0x70>
    2440:	60 c1       	rjmp	.+704    	; 0x2702 <SevSeg_voidSingleRangeCounter+0x330>
    2442:	8c a5       	ldd	r24, Y+44	; 0x2c
    2444:	8a 30       	cpi	r24, 0x0A	; 10
    2446:	0c f0       	brlt	.+2      	; 0x244a <SevSeg_voidSingleRangeCounter+0x78>
    2448:	5c c1       	rjmp	.+696    	; 0x2702 <SevSeg_voidSingleRangeCounter+0x330>
    244a:	8c a5       	ldd	r24, Y+44	; 0x2c
    244c:	88 23       	and	r24, r24
    244e:	0c f4       	brge	.+2      	; 0x2452 <SevSeg_voidSingleRangeCounter+0x80>
    2450:	58 c1       	rjmp	.+688    	; 0x2702 <SevSeg_voidSingleRangeCounter+0x330>

		if(start < end){
    2452:	9b a5       	ldd	r25, Y+43	; 0x2b
    2454:	8c a5       	ldd	r24, Y+44	; 0x2c
    2456:	98 17       	cp	r25, r24
    2458:	0c f0       	brlt	.+2      	; 0x245c <SevSeg_voidSingleRangeCounter+0x8a>
    245a:	aa c0       	rjmp	.+340    	; 0x25b0 <SevSeg_voidSingleRangeCounter+0x1de>
			for(Local_Counter2 = start; Local_Counter2 <end; Local_Counter2++){
    245c:	8b a5       	ldd	r24, Y+43	; 0x2b
    245e:	99 27       	eor	r25, r25
    2460:	87 fd       	sbrc	r24, 7
    2462:	90 95       	com	r25
    2464:	a9 2f       	mov	r26, r25
    2466:	b9 2f       	mov	r27, r25
    2468:	8d 8f       	std	Y+29, r24	; 0x1d
    246a:	9e 8f       	std	Y+30, r25	; 0x1e
    246c:	af 8f       	std	Y+31, r26	; 0x1f
    246e:	b8 a3       	std	Y+32, r27	; 0x20
    2470:	8d c0       	rjmp	.+282    	; 0x258c <SevSeg_voidSingleRangeCounter+0x1ba>
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    2472:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2474:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2476:	af 8d       	ldd	r26, Y+31	; 0x1f
    2478:	b8 a1       	ldd	r27, Y+32	; 0x20
    247a:	9e 01       	movw	r18, r28
    247c:	2f 5d       	subi	r18, 0xDF	; 223
    247e:	3f 4f       	sbci	r19, 0xFF	; 255
    2480:	f9 01       	movw	r30, r18
    2482:	e8 0f       	add	r30, r24
    2484:	f9 1f       	adc	r31, r25
    2486:	80 81       	ld	r24, Z
    2488:	98 2f       	mov	r25, r24
    248a:	82 e0       	ldi	r24, 0x02	; 2
    248c:	69 2f       	mov	r22, r25
    248e:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <DIO_voidSetPortValue>
    2492:	80 e0       	ldi	r24, 0x00	; 0
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	a0 e2       	ldi	r26, 0x20	; 32
    2498:	b1 e4       	ldi	r27, 0x41	; 65
    249a:	89 8f       	std	Y+25, r24	; 0x19
    249c:	9a 8f       	std	Y+26, r25	; 0x1a
    249e:	ab 8f       	std	Y+27, r26	; 0x1b
    24a0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a2:	69 8d       	ldd	r22, Y+25	; 0x19
    24a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	4a e7       	ldi	r20, 0x7A	; 122
    24b0:	55 e4       	ldi	r21, 0x45	; 69
    24b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b6:	dc 01       	movw	r26, r24
    24b8:	cb 01       	movw	r24, r22
    24ba:	8d 8b       	std	Y+21, r24	; 0x15
    24bc:	9e 8b       	std	Y+22, r25	; 0x16
    24be:	af 8b       	std	Y+23, r26	; 0x17
    24c0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24c2:	6d 89       	ldd	r22, Y+21	; 0x15
    24c4:	7e 89       	ldd	r23, Y+22	; 0x16
    24c6:	8f 89       	ldd	r24, Y+23	; 0x17
    24c8:	98 8d       	ldd	r25, Y+24	; 0x18
    24ca:	20 e0       	ldi	r18, 0x00	; 0
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	40 e8       	ldi	r20, 0x80	; 128
    24d0:	5f e3       	ldi	r21, 0x3F	; 63
    24d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24d6:	88 23       	and	r24, r24
    24d8:	2c f4       	brge	.+10     	; 0x24e4 <SevSeg_voidSingleRangeCounter+0x112>
		__ticks = 1;
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	9c 8b       	std	Y+20, r25	; 0x14
    24e0:	8b 8b       	std	Y+19, r24	; 0x13
    24e2:	3f c0       	rjmp	.+126    	; 0x2562 <SevSeg_voidSingleRangeCounter+0x190>
	else if (__tmp > 65535)
    24e4:	6d 89       	ldd	r22, Y+21	; 0x15
    24e6:	7e 89       	ldd	r23, Y+22	; 0x16
    24e8:	8f 89       	ldd	r24, Y+23	; 0x17
    24ea:	98 8d       	ldd	r25, Y+24	; 0x18
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	3f ef       	ldi	r19, 0xFF	; 255
    24f0:	4f e7       	ldi	r20, 0x7F	; 127
    24f2:	57 e4       	ldi	r21, 0x47	; 71
    24f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24f8:	18 16       	cp	r1, r24
    24fa:	4c f5       	brge	.+82     	; 0x254e <SevSeg_voidSingleRangeCounter+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fc:	69 8d       	ldd	r22, Y+25	; 0x19
    24fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2500:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2502:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	40 e2       	ldi	r20, 0x20	; 32
    250a:	51 e4       	ldi	r21, 0x41	; 65
    250c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	bc 01       	movw	r22, r24
    2516:	cd 01       	movw	r24, r26
    2518:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	9c 8b       	std	Y+20, r25	; 0x14
    2522:	8b 8b       	std	Y+19, r24	; 0x13
    2524:	0f c0       	rjmp	.+30     	; 0x2544 <SevSeg_voidSingleRangeCounter+0x172>
    2526:	80 e9       	ldi	r24, 0x90	; 144
    2528:	91 e0       	ldi	r25, 0x01	; 1
    252a:	9a 8b       	std	Y+18, r25	; 0x12
    252c:	89 8b       	std	Y+17, r24	; 0x11
    252e:	89 89       	ldd	r24, Y+17	; 0x11
    2530:	9a 89       	ldd	r25, Y+18	; 0x12
    2532:	01 97       	sbiw	r24, 0x01	; 1
    2534:	f1 f7       	brne	.-4      	; 0x2532 <SevSeg_voidSingleRangeCounter+0x160>
    2536:	9a 8b       	std	Y+18, r25	; 0x12
    2538:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    253a:	8b 89       	ldd	r24, Y+19	; 0x13
    253c:	9c 89       	ldd	r25, Y+20	; 0x14
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	9c 8b       	std	Y+20, r25	; 0x14
    2542:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2544:	8b 89       	ldd	r24, Y+19	; 0x13
    2546:	9c 89       	ldd	r25, Y+20	; 0x14
    2548:	00 97       	sbiw	r24, 0x00	; 0
    254a:	69 f7       	brne	.-38     	; 0x2526 <SevSeg_voidSingleRangeCounter+0x154>
    254c:	14 c0       	rjmp	.+40     	; 0x2576 <SevSeg_voidSingleRangeCounter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    254e:	6d 89       	ldd	r22, Y+21	; 0x15
    2550:	7e 89       	ldd	r23, Y+22	; 0x16
    2552:	8f 89       	ldd	r24, Y+23	; 0x17
    2554:	98 8d       	ldd	r25, Y+24	; 0x18
    2556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    255a:	dc 01       	movw	r26, r24
    255c:	cb 01       	movw	r24, r22
    255e:	9c 8b       	std	Y+20, r25	; 0x14
    2560:	8b 8b       	std	Y+19, r24	; 0x13
    2562:	8b 89       	ldd	r24, Y+19	; 0x13
    2564:	9c 89       	ldd	r25, Y+20	; 0x14
    2566:	98 8b       	std	Y+16, r25	; 0x10
    2568:	8f 87       	std	Y+15, r24	; 0x0f
    256a:	8f 85       	ldd	r24, Y+15	; 0x0f
    256c:	98 89       	ldd	r25, Y+16	; 0x10
    256e:	01 97       	sbiw	r24, 0x01	; 1
    2570:	f1 f7       	brne	.-4      	; 0x256e <SevSeg_voidSingleRangeCounter+0x19c>
    2572:	98 8b       	std	Y+16, r25	; 0x10
    2574:	8f 87       	std	Y+15, r24	; 0x0f
	s8 Sev_numbers[] = Sev_Array;
	s32 Local_Counter2 = 0;
	if(start >= 0 && start < 10 && end < 10 && end >= 0){

		if(start < end){
			for(Local_Counter2 = start; Local_Counter2 <end; Local_Counter2++){
    2576:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2578:	9e 8d       	ldd	r25, Y+30	; 0x1e
    257a:	af 8d       	ldd	r26, Y+31	; 0x1f
    257c:	b8 a1       	ldd	r27, Y+32	; 0x20
    257e:	01 96       	adiw	r24, 0x01	; 1
    2580:	a1 1d       	adc	r26, r1
    2582:	b1 1d       	adc	r27, r1
    2584:	8d 8f       	std	Y+29, r24	; 0x1d
    2586:	9e 8f       	std	Y+30, r25	; 0x1e
    2588:	af 8f       	std	Y+31, r26	; 0x1f
    258a:	b8 a3       	std	Y+32, r27	; 0x20
    258c:	8c a5       	ldd	r24, Y+44	; 0x2c
    258e:	28 2f       	mov	r18, r24
    2590:	33 27       	eor	r19, r19
    2592:	27 fd       	sbrc	r18, 7
    2594:	30 95       	com	r19
    2596:	43 2f       	mov	r20, r19
    2598:	53 2f       	mov	r21, r19
    259a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    259c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    259e:	af 8d       	ldd	r26, Y+31	; 0x1f
    25a0:	b8 a1       	ldd	r27, Y+32	; 0x20
    25a2:	82 17       	cp	r24, r18
    25a4:	93 07       	cpc	r25, r19
    25a6:	a4 07       	cpc	r26, r20
    25a8:	b5 07       	cpc	r27, r21
    25aa:	0c f4       	brge	.+2      	; 0x25ae <SevSeg_voidSingleRangeCounter+0x1dc>
    25ac:	62 cf       	rjmp	.-316    	; 0x2472 <SevSeg_voidSingleRangeCounter+0xa0>
    25ae:	a9 c0       	rjmp	.+338    	; 0x2702 <SevSeg_voidSingleRangeCounter+0x330>
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
				_delay_ms(Sev_DELAY);
			}
		}
		else{
			for(Local_Counter2 = start; Local_Counter2 >= end; Local_Counter2--){
    25b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    25b2:	99 27       	eor	r25, r25
    25b4:	87 fd       	sbrc	r24, 7
    25b6:	90 95       	com	r25
    25b8:	a9 2f       	mov	r26, r25
    25ba:	b9 2f       	mov	r27, r25
    25bc:	8d 8f       	std	Y+29, r24	; 0x1d
    25be:	9e 8f       	std	Y+30, r25	; 0x1e
    25c0:	af 8f       	std	Y+31, r26	; 0x1f
    25c2:	b8 a3       	std	Y+32, r27	; 0x20
    25c4:	8d c0       	rjmp	.+282    	; 0x26e0 <SevSeg_voidSingleRangeCounter+0x30e>

				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    25c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25ca:	af 8d       	ldd	r26, Y+31	; 0x1f
    25cc:	b8 a1       	ldd	r27, Y+32	; 0x20
    25ce:	9e 01       	movw	r18, r28
    25d0:	2f 5d       	subi	r18, 0xDF	; 223
    25d2:	3f 4f       	sbci	r19, 0xFF	; 255
    25d4:	f9 01       	movw	r30, r18
    25d6:	e8 0f       	add	r30, r24
    25d8:	f9 1f       	adc	r31, r25
    25da:	80 81       	ld	r24, Z
    25dc:	98 2f       	mov	r25, r24
    25de:	82 e0       	ldi	r24, 0x02	; 2
    25e0:	69 2f       	mov	r22, r25
    25e2:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <DIO_voidSetPortValue>
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	a0 e2       	ldi	r26, 0x20	; 32
    25ec:	b1 e4       	ldi	r27, 0x41	; 65
    25ee:	8b 87       	std	Y+11, r24	; 0x0b
    25f0:	9c 87       	std	Y+12, r25	; 0x0c
    25f2:	ad 87       	std	Y+13, r26	; 0x0d
    25f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    25f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    25fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    25fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	4a e7       	ldi	r20, 0x7A	; 122
    2604:	55 e4       	ldi	r21, 0x45	; 69
    2606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	8f 83       	std	Y+7, r24	; 0x07
    2610:	98 87       	std	Y+8, r25	; 0x08
    2612:	a9 87       	std	Y+9, r26	; 0x09
    2614:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2616:	6f 81       	ldd	r22, Y+7	; 0x07
    2618:	78 85       	ldd	r23, Y+8	; 0x08
    261a:	89 85       	ldd	r24, Y+9	; 0x09
    261c:	9a 85       	ldd	r25, Y+10	; 0x0a
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	40 e8       	ldi	r20, 0x80	; 128
    2624:	5f e3       	ldi	r21, 0x3F	; 63
    2626:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    262a:	88 23       	and	r24, r24
    262c:	2c f4       	brge	.+10     	; 0x2638 <SevSeg_voidSingleRangeCounter+0x266>
		__ticks = 1;
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	9e 83       	std	Y+6, r25	; 0x06
    2634:	8d 83       	std	Y+5, r24	; 0x05
    2636:	3f c0       	rjmp	.+126    	; 0x26b6 <SevSeg_voidSingleRangeCounter+0x2e4>
	else if (__tmp > 65535)
    2638:	6f 81       	ldd	r22, Y+7	; 0x07
    263a:	78 85       	ldd	r23, Y+8	; 0x08
    263c:	89 85       	ldd	r24, Y+9	; 0x09
    263e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	3f ef       	ldi	r19, 0xFF	; 255
    2644:	4f e7       	ldi	r20, 0x7F	; 127
    2646:	57 e4       	ldi	r21, 0x47	; 71
    2648:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    264c:	18 16       	cp	r1, r24
    264e:	4c f5       	brge	.+82     	; 0x26a2 <SevSeg_voidSingleRangeCounter+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2650:	6b 85       	ldd	r22, Y+11	; 0x0b
    2652:	7c 85       	ldd	r23, Y+12	; 0x0c
    2654:	8d 85       	ldd	r24, Y+13	; 0x0d
    2656:	9e 85       	ldd	r25, Y+14	; 0x0e
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	40 e2       	ldi	r20, 0x20	; 32
    265e:	51 e4       	ldi	r21, 0x41	; 65
    2660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	bc 01       	movw	r22, r24
    266a:	cd 01       	movw	r24, r26
    266c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2670:	dc 01       	movw	r26, r24
    2672:	cb 01       	movw	r24, r22
    2674:	9e 83       	std	Y+6, r25	; 0x06
    2676:	8d 83       	std	Y+5, r24	; 0x05
    2678:	0f c0       	rjmp	.+30     	; 0x2698 <SevSeg_voidSingleRangeCounter+0x2c6>
    267a:	80 e9       	ldi	r24, 0x90	; 144
    267c:	91 e0       	ldi	r25, 0x01	; 1
    267e:	9c 83       	std	Y+4, r25	; 0x04
    2680:	8b 83       	std	Y+3, r24	; 0x03
    2682:	8b 81       	ldd	r24, Y+3	; 0x03
    2684:	9c 81       	ldd	r25, Y+4	; 0x04
    2686:	01 97       	sbiw	r24, 0x01	; 1
    2688:	f1 f7       	brne	.-4      	; 0x2686 <SevSeg_voidSingleRangeCounter+0x2b4>
    268a:	9c 83       	std	Y+4, r25	; 0x04
    268c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    268e:	8d 81       	ldd	r24, Y+5	; 0x05
    2690:	9e 81       	ldd	r25, Y+6	; 0x06
    2692:	01 97       	sbiw	r24, 0x01	; 1
    2694:	9e 83       	std	Y+6, r25	; 0x06
    2696:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2698:	8d 81       	ldd	r24, Y+5	; 0x05
    269a:	9e 81       	ldd	r25, Y+6	; 0x06
    269c:	00 97       	sbiw	r24, 0x00	; 0
    269e:	69 f7       	brne	.-38     	; 0x267a <SevSeg_voidSingleRangeCounter+0x2a8>
    26a0:	14 c0       	rjmp	.+40     	; 0x26ca <SevSeg_voidSingleRangeCounter+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a2:	6f 81       	ldd	r22, Y+7	; 0x07
    26a4:	78 85       	ldd	r23, Y+8	; 0x08
    26a6:	89 85       	ldd	r24, Y+9	; 0x09
    26a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	9e 83       	std	Y+6, r25	; 0x06
    26b4:	8d 83       	std	Y+5, r24	; 0x05
    26b6:	8d 81       	ldd	r24, Y+5	; 0x05
    26b8:	9e 81       	ldd	r25, Y+6	; 0x06
    26ba:	9a 83       	std	Y+2, r25	; 0x02
    26bc:	89 83       	std	Y+1, r24	; 0x01
    26be:	89 81       	ldd	r24, Y+1	; 0x01
    26c0:	9a 81       	ldd	r25, Y+2	; 0x02
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	f1 f7       	brne	.-4      	; 0x26c2 <SevSeg_voidSingleRangeCounter+0x2f0>
    26c6:	9a 83       	std	Y+2, r25	; 0x02
    26c8:	89 83       	std	Y+1, r24	; 0x01
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
				_delay_ms(Sev_DELAY);
			}
		}
		else{
			for(Local_Counter2 = start; Local_Counter2 >= end; Local_Counter2--){
    26ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26ce:	af 8d       	ldd	r26, Y+31	; 0x1f
    26d0:	b8 a1       	ldd	r27, Y+32	; 0x20
    26d2:	01 97       	sbiw	r24, 0x01	; 1
    26d4:	a1 09       	sbc	r26, r1
    26d6:	b1 09       	sbc	r27, r1
    26d8:	8d 8f       	std	Y+29, r24	; 0x1d
    26da:	9e 8f       	std	Y+30, r25	; 0x1e
    26dc:	af 8f       	std	Y+31, r26	; 0x1f
    26de:	b8 a3       	std	Y+32, r27	; 0x20
    26e0:	8c a5       	ldd	r24, Y+44	; 0x2c
    26e2:	28 2f       	mov	r18, r24
    26e4:	33 27       	eor	r19, r19
    26e6:	27 fd       	sbrc	r18, 7
    26e8:	30 95       	com	r19
    26ea:	43 2f       	mov	r20, r19
    26ec:	53 2f       	mov	r21, r19
    26ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26f2:	af 8d       	ldd	r26, Y+31	; 0x1f
    26f4:	b8 a1       	ldd	r27, Y+32	; 0x20
    26f6:	82 17       	cp	r24, r18
    26f8:	93 07       	cpc	r25, r19
    26fa:	a4 07       	cpc	r26, r20
    26fc:	b5 07       	cpc	r27, r21
    26fe:	0c f0       	brlt	.+2      	; 0x2702 <SevSeg_voidSingleRangeCounter+0x330>
    2700:	62 cf       	rjmp	.-316    	; 0x25c6 <SevSeg_voidSingleRangeCounter+0x1f4>
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
				_delay_ms(Sev_DELAY);
			}
		}
	}
}
    2702:	e1 96       	adiw	r28, 0x31	; 49
    2704:	0f b6       	in	r0, 0x3f	; 63
    2706:	f8 94       	cli
    2708:	de bf       	out	0x3e, r29	; 62
    270a:	0f be       	out	0x3f, r0	; 63
    270c:	cd bf       	out	0x3d, r28	; 61
    270e:	cf 91       	pop	r28
    2710:	df 91       	pop	r29
    2712:	08 95       	ret

00002714 <SevSeg_voidDoubleRangeCounter>:

void SevSeg_voidDoubleRangeCounter(s8 start,s8 end){
    2714:	df 93       	push	r29
    2716:	cf 93       	push	r28
    2718:	cd b7       	in	r28, 0x3d	; 61
    271a:	de b7       	in	r29, 0x3e	; 62
    271c:	e9 97       	sbiw	r28, 0x39	; 57
    271e:	0f b6       	in	r0, 0x3f	; 63
    2720:	f8 94       	cli
    2722:	de bf       	out	0x3e, r29	; 62
    2724:	0f be       	out	0x3f, r0	; 63
    2726:	cd bf       	out	0x3d, r28	; 61
    2728:	8b ab       	std	Y+51, r24	; 0x33
    272a:	6c ab       	std	Y+52, r22	; 0x34
	s8 Sev_numbers[] = Sev_Array;
    272c:	ce 01       	movw	r24, r28
    272e:	89 96       	adiw	r24, 0x29	; 41
    2730:	9e ab       	std	Y+54, r25	; 0x36
    2732:	8d ab       	std	Y+53, r24	; 0x35
    2734:	e1 e8       	ldi	r30, 0x81	; 129
    2736:	f2 e0       	ldi	r31, 0x02	; 2
    2738:	f8 af       	std	Y+56, r31	; 0x38
    273a:	ef ab       	std	Y+55, r30	; 0x37
    273c:	fa e0       	ldi	r31, 0x0A	; 10
    273e:	f9 af       	std	Y+57, r31	; 0x39
    2740:	ef a9       	ldd	r30, Y+55	; 0x37
    2742:	f8 ad       	ldd	r31, Y+56	; 0x38
    2744:	00 80       	ld	r0, Z
    2746:	8f a9       	ldd	r24, Y+55	; 0x37
    2748:	98 ad       	ldd	r25, Y+56	; 0x38
    274a:	01 96       	adiw	r24, 0x01	; 1
    274c:	98 af       	std	Y+56, r25	; 0x38
    274e:	8f ab       	std	Y+55, r24	; 0x37
    2750:	ed a9       	ldd	r30, Y+53	; 0x35
    2752:	fe a9       	ldd	r31, Y+54	; 0x36
    2754:	00 82       	st	Z, r0
    2756:	8d a9       	ldd	r24, Y+53	; 0x35
    2758:	9e a9       	ldd	r25, Y+54	; 0x36
    275a:	01 96       	adiw	r24, 0x01	; 1
    275c:	9e ab       	std	Y+54, r25	; 0x36
    275e:	8d ab       	std	Y+53, r24	; 0x35
    2760:	99 ad       	ldd	r25, Y+57	; 0x39
    2762:	91 50       	subi	r25, 0x01	; 1
    2764:	99 af       	std	Y+57, r25	; 0x39
    2766:	e9 ad       	ldd	r30, Y+57	; 0x39
    2768:	ee 23       	and	r30, r30
    276a:	51 f7       	brne	.-44     	; 0x2740 <SevSeg_voidDoubleRangeCounter+0x2c>

	s8 Local_SevSegTwoStart = start / 10;
    276c:	8b a9       	ldd	r24, Y+51	; 0x33
    276e:	9a e0       	ldi	r25, 0x0A	; 10
    2770:	69 2f       	mov	r22, r25
    2772:	0e 94 55 35 	call	0x6aaa	; 0x6aaa <__divmodqi4>
    2776:	88 a7       	std	Y+40, r24	; 0x28
	s8 Local_SevSegOneStart = start % 10;
    2778:	8b a9       	ldd	r24, Y+51	; 0x33
    277a:	9a e0       	ldi	r25, 0x0A	; 10
    277c:	69 2f       	mov	r22, r25
    277e:	0e 94 55 35 	call	0x6aaa	; 0x6aaa <__divmodqi4>
    2782:	89 2f       	mov	r24, r25
    2784:	8f a3       	std	Y+39, r24	; 0x27

	s8 Local_SevSegTwoEnd = end / 10;
    2786:	8c a9       	ldd	r24, Y+52	; 0x34
    2788:	9a e0       	ldi	r25, 0x0A	; 10
    278a:	69 2f       	mov	r22, r25
    278c:	0e 94 55 35 	call	0x6aaa	; 0x6aaa <__divmodqi4>
    2790:	8e a3       	std	Y+38, r24	; 0x26
	s8 Local_SevSegOneEnd = end % 10;
    2792:	8c a9       	ldd	r24, Y+52	; 0x34
    2794:	9a e0       	ldi	r25, 0x0A	; 10
    2796:	69 2f       	mov	r22, r25
    2798:	0e 94 55 35 	call	0x6aaa	; 0x6aaa <__divmodqi4>
    279c:	89 2f       	mov	r24, r25
    279e:	8d a3       	std	Y+37, r24	; 0x25

	s32 Local_Counter1 = 0;
    27a0:	19 a2       	std	Y+33, r1	; 0x21
    27a2:	1a a2       	std	Y+34, r1	; 0x22
    27a4:	1b a2       	std	Y+35, r1	; 0x23
    27a6:	1c a2       	std	Y+36, r1	; 0x24
	s32 Local_Counter2 = 0;
    27a8:	1d 8e       	std	Y+29, r1	; 0x1d
    27aa:	1e 8e       	std	Y+30, r1	; 0x1e
    27ac:	1f 8e       	std	Y+31, r1	; 0x1f
    27ae:	18 a2       	std	Y+32, r1	; 0x20

	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){
    27b0:	88 a5       	ldd	r24, Y+40	; 0x28
    27b2:	88 23       	and	r24, r24
    27b4:	0c f4       	brge	.+2      	; 0x27b8 <SevSeg_voidDoubleRangeCounter+0xa4>
    27b6:	05 c2       	rjmp	.+1034   	; 0x2bc2 <SevSeg_voidDoubleRangeCounter+0x4ae>
    27b8:	88 a5       	ldd	r24, Y+40	; 0x28
    27ba:	8a 30       	cpi	r24, 0x0A	; 10
    27bc:	0c f0       	brlt	.+2      	; 0x27c0 <SevSeg_voidDoubleRangeCounter+0xac>
    27be:	01 c2       	rjmp	.+1026   	; 0x2bc2 <SevSeg_voidDoubleRangeCounter+0x4ae>
    27c0:	8e a1       	ldd	r24, Y+38	; 0x26
    27c2:	8a 30       	cpi	r24, 0x0A	; 10
    27c4:	0c f0       	brlt	.+2      	; 0x27c8 <SevSeg_voidDoubleRangeCounter+0xb4>
    27c6:	fd c1       	rjmp	.+1018   	; 0x2bc2 <SevSeg_voidDoubleRangeCounter+0x4ae>
    27c8:	8e a1       	ldd	r24, Y+38	; 0x26
    27ca:	88 23       	and	r24, r24
    27cc:	0c f4       	brge	.+2      	; 0x27d0 <SevSeg_voidDoubleRangeCounter+0xbc>
    27ce:	f9 c1       	rjmp	.+1010   	; 0x2bc2 <SevSeg_voidDoubleRangeCounter+0x4ae>

		if(start < end){
    27d0:	9b a9       	ldd	r25, Y+51	; 0x33
    27d2:	8c a9       	ldd	r24, Y+52	; 0x34
    27d4:	98 17       	cp	r25, r24
    27d6:	0c f0       	brlt	.+2      	; 0x27da <SevSeg_voidDoubleRangeCounter+0xc6>
    27d8:	fc c0       	rjmp	.+504    	; 0x29d2 <SevSeg_voidDoubleRangeCounter+0x2be>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    27da:	88 a5       	ldd	r24, Y+40	; 0x28
    27dc:	99 27       	eor	r25, r25
    27de:	87 fd       	sbrc	r24, 7
    27e0:	90 95       	com	r25
    27e2:	a9 2f       	mov	r26, r25
    27e4:	b9 2f       	mov	r27, r25
    27e6:	89 a3       	std	Y+33, r24	; 0x21
    27e8:	9a a3       	std	Y+34, r25	; 0x22
    27ea:	ab a3       	std	Y+35, r26	; 0x23
    27ec:	bc a3       	std	Y+36, r27	; 0x24
    27ee:	df c0       	rjmp	.+446    	; 0x29ae <SevSeg_voidDoubleRangeCounter+0x29a>
				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);
    27f0:	89 a1       	ldd	r24, Y+33	; 0x21
    27f2:	9a a1       	ldd	r25, Y+34	; 0x22
    27f4:	ab a1       	ldd	r26, Y+35	; 0x23
    27f6:	bc a1       	ldd	r27, Y+36	; 0x24
    27f8:	9e 01       	movw	r18, r28
    27fa:	27 5d       	subi	r18, 0xD7	; 215
    27fc:	3f 4f       	sbci	r19, 0xFF	; 255
    27fe:	f9 01       	movw	r30, r18
    2800:	e8 0f       	add	r30, r24
    2802:	f9 1f       	adc	r31, r25
    2804:	80 81       	ld	r24, Z
    2806:	98 2f       	mov	r25, r24
    2808:	84 e0       	ldi	r24, 0x04	; 4
    280a:	69 2f       	mov	r22, r25
    280c:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <DIO_voidSetPortValue>

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    2810:	8f a1       	ldd	r24, Y+39	; 0x27
    2812:	99 27       	eor	r25, r25
    2814:	87 fd       	sbrc	r24, 7
    2816:	90 95       	com	r25
    2818:	a9 2f       	mov	r26, r25
    281a:	b9 2f       	mov	r27, r25
    281c:	8d 8f       	std	Y+29, r24	; 0x1d
    281e:	9e 8f       	std	Y+30, r25	; 0x1e
    2820:	af 8f       	std	Y+31, r26	; 0x1f
    2822:	b8 a3       	std	Y+32, r27	; 0x20
    2824:	ae c0       	rjmp	.+348    	; 0x2982 <SevSeg_voidDoubleRangeCounter+0x26e>
					DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    2826:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2828:	9e 8d       	ldd	r25, Y+30	; 0x1e
    282a:	af 8d       	ldd	r26, Y+31	; 0x1f
    282c:	b8 a1       	ldd	r27, Y+32	; 0x20
    282e:	9e 01       	movw	r18, r28
    2830:	27 5d       	subi	r18, 0xD7	; 215
    2832:	3f 4f       	sbci	r19, 0xFF	; 255
    2834:	f9 01       	movw	r30, r18
    2836:	e8 0f       	add	r30, r24
    2838:	f9 1f       	adc	r31, r25
    283a:	80 81       	ld	r24, Z
    283c:	98 2f       	mov	r25, r24
    283e:	82 e0       	ldi	r24, 0x02	; 2
    2840:	69 2f       	mov	r22, r25
    2842:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <DIO_voidSetPortValue>
    2846:	80 e0       	ldi	r24, 0x00	; 0
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	a0 e2       	ldi	r26, 0x20	; 32
    284c:	b1 e4       	ldi	r27, 0x41	; 65
    284e:	89 8f       	std	Y+25, r24	; 0x19
    2850:	9a 8f       	std	Y+26, r25	; 0x1a
    2852:	ab 8f       	std	Y+27, r26	; 0x1b
    2854:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2856:	69 8d       	ldd	r22, Y+25	; 0x19
    2858:	7a 8d       	ldd	r23, Y+26	; 0x1a
    285a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    285c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	4a e7       	ldi	r20, 0x7A	; 122
    2864:	55 e4       	ldi	r21, 0x45	; 69
    2866:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	8d 8b       	std	Y+21, r24	; 0x15
    2870:	9e 8b       	std	Y+22, r25	; 0x16
    2872:	af 8b       	std	Y+23, r26	; 0x17
    2874:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2876:	6d 89       	ldd	r22, Y+21	; 0x15
    2878:	7e 89       	ldd	r23, Y+22	; 0x16
    287a:	8f 89       	ldd	r24, Y+23	; 0x17
    287c:	98 8d       	ldd	r25, Y+24	; 0x18
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	40 e8       	ldi	r20, 0x80	; 128
    2884:	5f e3       	ldi	r21, 0x3F	; 63
    2886:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    288a:	88 23       	and	r24, r24
    288c:	2c f4       	brge	.+10     	; 0x2898 <SevSeg_voidDoubleRangeCounter+0x184>
		__ticks = 1;
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	9c 8b       	std	Y+20, r25	; 0x14
    2894:	8b 8b       	std	Y+19, r24	; 0x13
    2896:	3f c0       	rjmp	.+126    	; 0x2916 <SevSeg_voidDoubleRangeCounter+0x202>
	else if (__tmp > 65535)
    2898:	6d 89       	ldd	r22, Y+21	; 0x15
    289a:	7e 89       	ldd	r23, Y+22	; 0x16
    289c:	8f 89       	ldd	r24, Y+23	; 0x17
    289e:	98 8d       	ldd	r25, Y+24	; 0x18
    28a0:	20 e0       	ldi	r18, 0x00	; 0
    28a2:	3f ef       	ldi	r19, 0xFF	; 255
    28a4:	4f e7       	ldi	r20, 0x7F	; 127
    28a6:	57 e4       	ldi	r21, 0x47	; 71
    28a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28ac:	18 16       	cp	r1, r24
    28ae:	4c f5       	brge	.+82     	; 0x2902 <SevSeg_voidDoubleRangeCounter+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28b0:	69 8d       	ldd	r22, Y+25	; 0x19
    28b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28b8:	20 e0       	ldi	r18, 0x00	; 0
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	40 e2       	ldi	r20, 0x20	; 32
    28be:	51 e4       	ldi	r21, 0x41	; 65
    28c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c4:	dc 01       	movw	r26, r24
    28c6:	cb 01       	movw	r24, r22
    28c8:	bc 01       	movw	r22, r24
    28ca:	cd 01       	movw	r24, r26
    28cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	9c 8b       	std	Y+20, r25	; 0x14
    28d6:	8b 8b       	std	Y+19, r24	; 0x13
    28d8:	0f c0       	rjmp	.+30     	; 0x28f8 <SevSeg_voidDoubleRangeCounter+0x1e4>
    28da:	80 e9       	ldi	r24, 0x90	; 144
    28dc:	91 e0       	ldi	r25, 0x01	; 1
    28de:	9a 8b       	std	Y+18, r25	; 0x12
    28e0:	89 8b       	std	Y+17, r24	; 0x11
    28e2:	89 89       	ldd	r24, Y+17	; 0x11
    28e4:	9a 89       	ldd	r25, Y+18	; 0x12
    28e6:	01 97       	sbiw	r24, 0x01	; 1
    28e8:	f1 f7       	brne	.-4      	; 0x28e6 <SevSeg_voidDoubleRangeCounter+0x1d2>
    28ea:	9a 8b       	std	Y+18, r25	; 0x12
    28ec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ee:	8b 89       	ldd	r24, Y+19	; 0x13
    28f0:	9c 89       	ldd	r25, Y+20	; 0x14
    28f2:	01 97       	sbiw	r24, 0x01	; 1
    28f4:	9c 8b       	std	Y+20, r25	; 0x14
    28f6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28f8:	8b 89       	ldd	r24, Y+19	; 0x13
    28fa:	9c 89       	ldd	r25, Y+20	; 0x14
    28fc:	00 97       	sbiw	r24, 0x00	; 0
    28fe:	69 f7       	brne	.-38     	; 0x28da <SevSeg_voidDoubleRangeCounter+0x1c6>
    2900:	14 c0       	rjmp	.+40     	; 0x292a <SevSeg_voidDoubleRangeCounter+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2902:	6d 89       	ldd	r22, Y+21	; 0x15
    2904:	7e 89       	ldd	r23, Y+22	; 0x16
    2906:	8f 89       	ldd	r24, Y+23	; 0x17
    2908:	98 8d       	ldd	r25, Y+24	; 0x18
    290a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	9c 8b       	std	Y+20, r25	; 0x14
    2914:	8b 8b       	std	Y+19, r24	; 0x13
    2916:	8b 89       	ldd	r24, Y+19	; 0x13
    2918:	9c 89       	ldd	r25, Y+20	; 0x14
    291a:	98 8b       	std	Y+16, r25	; 0x10
    291c:	8f 87       	std	Y+15, r24	; 0x0f
    291e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2920:	98 89       	ldd	r25, Y+16	; 0x10
    2922:	01 97       	sbiw	r24, 0x01	; 1
    2924:	f1 f7       	brne	.-4      	; 0x2922 <SevSeg_voidDoubleRangeCounter+0x20e>
    2926:	98 8b       	std	Y+16, r25	; 0x10
    2928:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(Sev_DELAY);

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    292a:	8d a1       	ldd	r24, Y+37	; 0x25
    292c:	28 2f       	mov	r18, r24
    292e:	33 27       	eor	r19, r19
    2930:	27 fd       	sbrc	r18, 7
    2932:	30 95       	com	r19
    2934:	43 2f       	mov	r20, r19
    2936:	53 2f       	mov	r21, r19
    2938:	8d 8d       	ldd	r24, Y+29	; 0x1d
    293a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    293c:	af 8d       	ldd	r26, Y+31	; 0x1f
    293e:	b8 a1       	ldd	r27, Y+32	; 0x20
    2940:	28 17       	cp	r18, r24
    2942:	39 07       	cpc	r19, r25
    2944:	4a 07       	cpc	r20, r26
    2946:	5b 07       	cpc	r21, r27
    2948:	89 f4       	brne	.+34     	; 0x296c <SevSeg_voidDoubleRangeCounter+0x258>
    294a:	8e a1       	ldd	r24, Y+38	; 0x26
    294c:	28 2f       	mov	r18, r24
    294e:	33 27       	eor	r19, r19
    2950:	27 fd       	sbrc	r18, 7
    2952:	30 95       	com	r19
    2954:	43 2f       	mov	r20, r19
    2956:	53 2f       	mov	r21, r19
    2958:	89 a1       	ldd	r24, Y+33	; 0x21
    295a:	9a a1       	ldd	r25, Y+34	; 0x22
    295c:	ab a1       	ldd	r26, Y+35	; 0x23
    295e:	bc a1       	ldd	r27, Y+36	; 0x24
    2960:	28 17       	cp	r18, r24
    2962:	39 07       	cpc	r19, r25
    2964:	4a 07       	cpc	r20, r26
    2966:	5b 07       	cpc	r21, r27
    2968:	09 f4       	brne	.+2      	; 0x296c <SevSeg_voidDoubleRangeCounter+0x258>
    296a:	2b c1       	rjmp	.+598    	; 0x2bc2 <SevSeg_voidDoubleRangeCounter+0x4ae>

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    296c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    296e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2970:	af 8d       	ldd	r26, Y+31	; 0x1f
    2972:	b8 a1       	ldd	r27, Y+32	; 0x20
    2974:	01 96       	adiw	r24, 0x01	; 1
    2976:	a1 1d       	adc	r26, r1
    2978:	b1 1d       	adc	r27, r1
    297a:	8d 8f       	std	Y+29, r24	; 0x1d
    297c:	9e 8f       	std	Y+30, r25	; 0x1e
    297e:	af 8f       	std	Y+31, r26	; 0x1f
    2980:	b8 a3       	std	Y+32, r27	; 0x20
    2982:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2984:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2986:	af 8d       	ldd	r26, Y+31	; 0x1f
    2988:	b8 a1       	ldd	r27, Y+32	; 0x20
    298a:	8a 30       	cpi	r24, 0x0A	; 10
    298c:	91 05       	cpc	r25, r1
    298e:	a1 05       	cpc	r26, r1
    2990:	b1 05       	cpc	r27, r1
    2992:	0c f4       	brge	.+2      	; 0x2996 <SevSeg_voidDoubleRangeCounter+0x282>
    2994:	48 cf       	rjmp	.-368    	; 0x2826 <SevSeg_voidDoubleRangeCounter+0x112>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 0;
    2996:	1f a2       	std	Y+39, r1	; 0x27
	s32 Local_Counter2 = 0;

	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    2998:	89 a1       	ldd	r24, Y+33	; 0x21
    299a:	9a a1       	ldd	r25, Y+34	; 0x22
    299c:	ab a1       	ldd	r26, Y+35	; 0x23
    299e:	bc a1       	ldd	r27, Y+36	; 0x24
    29a0:	01 96       	adiw	r24, 0x01	; 1
    29a2:	a1 1d       	adc	r26, r1
    29a4:	b1 1d       	adc	r27, r1
    29a6:	89 a3       	std	Y+33, r24	; 0x21
    29a8:	9a a3       	std	Y+34, r25	; 0x22
    29aa:	ab a3       	std	Y+35, r26	; 0x23
    29ac:	bc a3       	std	Y+36, r27	; 0x24
    29ae:	8e a1       	ldd	r24, Y+38	; 0x26
    29b0:	28 2f       	mov	r18, r24
    29b2:	33 27       	eor	r19, r19
    29b4:	27 fd       	sbrc	r18, 7
    29b6:	30 95       	com	r19
    29b8:	43 2f       	mov	r20, r19
    29ba:	53 2f       	mov	r21, r19
    29bc:	89 a1       	ldd	r24, Y+33	; 0x21
    29be:	9a a1       	ldd	r25, Y+34	; 0x22
    29c0:	ab a1       	ldd	r26, Y+35	; 0x23
    29c2:	bc a1       	ldd	r27, Y+36	; 0x24
    29c4:	28 17       	cp	r18, r24
    29c6:	39 07       	cpc	r19, r25
    29c8:	4a 07       	cpc	r20, r26
    29ca:	5b 07       	cpc	r21, r27
    29cc:	0c f0       	brlt	.+2      	; 0x29d0 <SevSeg_voidDoubleRangeCounter+0x2bc>
    29ce:	10 cf       	rjmp	.-480    	; 0x27f0 <SevSeg_voidDoubleRangeCounter+0xdc>
    29d0:	f8 c0       	rjmp	.+496    	; 0x2bc2 <SevSeg_voidDoubleRangeCounter+0x4ae>

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    29d2:	88 a5       	ldd	r24, Y+40	; 0x28
    29d4:	99 27       	eor	r25, r25
    29d6:	87 fd       	sbrc	r24, 7
    29d8:	90 95       	com	r25
    29da:	a9 2f       	mov	r26, r25
    29dc:	b9 2f       	mov	r27, r25
    29de:	89 a3       	std	Y+33, r24	; 0x21
    29e0:	9a a3       	std	Y+34, r25	; 0x22
    29e2:	ab a3       	std	Y+35, r26	; 0x23
    29e4:	bc a3       	std	Y+36, r27	; 0x24
    29e6:	dc c0       	rjmp	.+440    	; 0x2ba0 <SevSeg_voidDoubleRangeCounter+0x48c>

				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);
    29e8:	89 a1       	ldd	r24, Y+33	; 0x21
    29ea:	9a a1       	ldd	r25, Y+34	; 0x22
    29ec:	ab a1       	ldd	r26, Y+35	; 0x23
    29ee:	bc a1       	ldd	r27, Y+36	; 0x24
    29f0:	9e 01       	movw	r18, r28
    29f2:	27 5d       	subi	r18, 0xD7	; 215
    29f4:	3f 4f       	sbci	r19, 0xFF	; 255
    29f6:	f9 01       	movw	r30, r18
    29f8:	e8 0f       	add	r30, r24
    29fa:	f9 1f       	adc	r31, r25
    29fc:	80 81       	ld	r24, Z
    29fe:	98 2f       	mov	r25, r24
    2a00:	84 e0       	ldi	r24, 0x04	; 4
    2a02:	69 2f       	mov	r22, r25
    2a04:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <DIO_voidSetPortValue>

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    2a08:	8f a1       	ldd	r24, Y+39	; 0x27
    2a0a:	99 27       	eor	r25, r25
    2a0c:	87 fd       	sbrc	r24, 7
    2a0e:	90 95       	com	r25
    2a10:	a9 2f       	mov	r26, r25
    2a12:	b9 2f       	mov	r27, r25
    2a14:	8d 8f       	std	Y+29, r24	; 0x1d
    2a16:	9e 8f       	std	Y+30, r25	; 0x1e
    2a18:	af 8f       	std	Y+31, r26	; 0x1f
    2a1a:	b8 a3       	std	Y+32, r27	; 0x20
    2a1c:	ad c0       	rjmp	.+346    	; 0x2b78 <SevSeg_voidDoubleRangeCounter+0x464>

					DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    2a1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a20:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a22:	af 8d       	ldd	r26, Y+31	; 0x1f
    2a24:	b8 a1       	ldd	r27, Y+32	; 0x20
    2a26:	9e 01       	movw	r18, r28
    2a28:	27 5d       	subi	r18, 0xD7	; 215
    2a2a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a2c:	f9 01       	movw	r30, r18
    2a2e:	e8 0f       	add	r30, r24
    2a30:	f9 1f       	adc	r31, r25
    2a32:	80 81       	ld	r24, Z
    2a34:	98 2f       	mov	r25, r24
    2a36:	82 e0       	ldi	r24, 0x02	; 2
    2a38:	69 2f       	mov	r22, r25
    2a3a:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <DIO_voidSetPortValue>
    2a3e:	80 e0       	ldi	r24, 0x00	; 0
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	a0 e2       	ldi	r26, 0x20	; 32
    2a44:	b1 e4       	ldi	r27, 0x41	; 65
    2a46:	8b 87       	std	Y+11, r24	; 0x0b
    2a48:	9c 87       	std	Y+12, r25	; 0x0c
    2a4a:	ad 87       	std	Y+13, r26	; 0x0d
    2a4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a50:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a52:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a54:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a56:	20 e0       	ldi	r18, 0x00	; 0
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	4a e7       	ldi	r20, 0x7A	; 122
    2a5c:	55 e4       	ldi	r21, 0x45	; 69
    2a5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a62:	dc 01       	movw	r26, r24
    2a64:	cb 01       	movw	r24, r22
    2a66:	8f 83       	std	Y+7, r24	; 0x07
    2a68:	98 87       	std	Y+8, r25	; 0x08
    2a6a:	a9 87       	std	Y+9, r26	; 0x09
    2a6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a70:	78 85       	ldd	r23, Y+8	; 0x08
    2a72:	89 85       	ldd	r24, Y+9	; 0x09
    2a74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	40 e8       	ldi	r20, 0x80	; 128
    2a7c:	5f e3       	ldi	r21, 0x3F	; 63
    2a7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a82:	88 23       	and	r24, r24
    2a84:	2c f4       	brge	.+10     	; 0x2a90 <SevSeg_voidDoubleRangeCounter+0x37c>
		__ticks = 1;
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	9e 83       	std	Y+6, r25	; 0x06
    2a8c:	8d 83       	std	Y+5, r24	; 0x05
    2a8e:	3f c0       	rjmp	.+126    	; 0x2b0e <SevSeg_voidDoubleRangeCounter+0x3fa>
	else if (__tmp > 65535)
    2a90:	6f 81       	ldd	r22, Y+7	; 0x07
    2a92:	78 85       	ldd	r23, Y+8	; 0x08
    2a94:	89 85       	ldd	r24, Y+9	; 0x09
    2a96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a98:	20 e0       	ldi	r18, 0x00	; 0
    2a9a:	3f ef       	ldi	r19, 0xFF	; 255
    2a9c:	4f e7       	ldi	r20, 0x7F	; 127
    2a9e:	57 e4       	ldi	r21, 0x47	; 71
    2aa0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2aa4:	18 16       	cp	r1, r24
    2aa6:	4c f5       	brge	.+82     	; 0x2afa <SevSeg_voidDoubleRangeCounter+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aaa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aac:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aae:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ab0:	20 e0       	ldi	r18, 0x00	; 0
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	40 e2       	ldi	r20, 0x20	; 32
    2ab6:	51 e4       	ldi	r21, 0x41	; 65
    2ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2abc:	dc 01       	movw	r26, r24
    2abe:	cb 01       	movw	r24, r22
    2ac0:	bc 01       	movw	r22, r24
    2ac2:	cd 01       	movw	r24, r26
    2ac4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	9e 83       	std	Y+6, r25	; 0x06
    2ace:	8d 83       	std	Y+5, r24	; 0x05
    2ad0:	0f c0       	rjmp	.+30     	; 0x2af0 <SevSeg_voidDoubleRangeCounter+0x3dc>
    2ad2:	80 e9       	ldi	r24, 0x90	; 144
    2ad4:	91 e0       	ldi	r25, 0x01	; 1
    2ad6:	9c 83       	std	Y+4, r25	; 0x04
    2ad8:	8b 83       	std	Y+3, r24	; 0x03
    2ada:	8b 81       	ldd	r24, Y+3	; 0x03
    2adc:	9c 81       	ldd	r25, Y+4	; 0x04
    2ade:	01 97       	sbiw	r24, 0x01	; 1
    2ae0:	f1 f7       	brne	.-4      	; 0x2ade <SevSeg_voidDoubleRangeCounter+0x3ca>
    2ae2:	9c 83       	std	Y+4, r25	; 0x04
    2ae4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae8:	9e 81       	ldd	r25, Y+6	; 0x06
    2aea:	01 97       	sbiw	r24, 0x01	; 1
    2aec:	9e 83       	std	Y+6, r25	; 0x06
    2aee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2af0:	8d 81       	ldd	r24, Y+5	; 0x05
    2af2:	9e 81       	ldd	r25, Y+6	; 0x06
    2af4:	00 97       	sbiw	r24, 0x00	; 0
    2af6:	69 f7       	brne	.-38     	; 0x2ad2 <SevSeg_voidDoubleRangeCounter+0x3be>
    2af8:	14 c0       	rjmp	.+40     	; 0x2b22 <SevSeg_voidDoubleRangeCounter+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2afa:	6f 81       	ldd	r22, Y+7	; 0x07
    2afc:	78 85       	ldd	r23, Y+8	; 0x08
    2afe:	89 85       	ldd	r24, Y+9	; 0x09
    2b00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b06:	dc 01       	movw	r26, r24
    2b08:	cb 01       	movw	r24, r22
    2b0a:	9e 83       	std	Y+6, r25	; 0x06
    2b0c:	8d 83       	std	Y+5, r24	; 0x05
    2b0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b10:	9e 81       	ldd	r25, Y+6	; 0x06
    2b12:	9a 83       	std	Y+2, r25	; 0x02
    2b14:	89 83       	std	Y+1, r24	; 0x01
    2b16:	89 81       	ldd	r24, Y+1	; 0x01
    2b18:	9a 81       	ldd	r25, Y+2	; 0x02
    2b1a:	01 97       	sbiw	r24, 0x01	; 1
    2b1c:	f1 f7       	brne	.-4      	; 0x2b1a <SevSeg_voidDoubleRangeCounter+0x406>
    2b1e:	9a 83       	std	Y+2, r25	; 0x02
    2b20:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(Sev_DELAY);

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    2b22:	8d a1       	ldd	r24, Y+37	; 0x25
    2b24:	28 2f       	mov	r18, r24
    2b26:	33 27       	eor	r19, r19
    2b28:	27 fd       	sbrc	r18, 7
    2b2a:	30 95       	com	r19
    2b2c:	43 2f       	mov	r20, r19
    2b2e:	53 2f       	mov	r21, r19
    2b30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b32:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b34:	af 8d       	ldd	r26, Y+31	; 0x1f
    2b36:	b8 a1       	ldd	r27, Y+32	; 0x20
    2b38:	28 17       	cp	r18, r24
    2b3a:	39 07       	cpc	r19, r25
    2b3c:	4a 07       	cpc	r20, r26
    2b3e:	5b 07       	cpc	r21, r27
    2b40:	81 f4       	brne	.+32     	; 0x2b62 <SevSeg_voidDoubleRangeCounter+0x44e>
    2b42:	8e a1       	ldd	r24, Y+38	; 0x26
    2b44:	28 2f       	mov	r18, r24
    2b46:	33 27       	eor	r19, r19
    2b48:	27 fd       	sbrc	r18, 7
    2b4a:	30 95       	com	r19
    2b4c:	43 2f       	mov	r20, r19
    2b4e:	53 2f       	mov	r21, r19
    2b50:	89 a1       	ldd	r24, Y+33	; 0x21
    2b52:	9a a1       	ldd	r25, Y+34	; 0x22
    2b54:	ab a1       	ldd	r26, Y+35	; 0x23
    2b56:	bc a1       	ldd	r27, Y+36	; 0x24
    2b58:	28 17       	cp	r18, r24
    2b5a:	39 07       	cpc	r19, r25
    2b5c:	4a 07       	cpc	r20, r26
    2b5e:	5b 07       	cpc	r21, r27
    2b60:	81 f1       	breq	.+96     	; 0x2bc2 <SevSeg_voidDoubleRangeCounter+0x4ae>
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){

				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    2b62:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b64:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b66:	af 8d       	ldd	r26, Y+31	; 0x1f
    2b68:	b8 a1       	ldd	r27, Y+32	; 0x20
    2b6a:	01 97       	sbiw	r24, 0x01	; 1
    2b6c:	a1 09       	sbc	r26, r1
    2b6e:	b1 09       	sbc	r27, r1
    2b70:	8d 8f       	std	Y+29, r24	; 0x1d
    2b72:	9e 8f       	std	Y+30, r25	; 0x1e
    2b74:	af 8f       	std	Y+31, r26	; 0x1f
    2b76:	b8 a3       	std	Y+32, r27	; 0x20
    2b78:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b7a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b7c:	af 8d       	ldd	r26, Y+31	; 0x1f
    2b7e:	b8 a1       	ldd	r27, Y+32	; 0x20
    2b80:	bb 23       	and	r27, r27
    2b82:	0c f0       	brlt	.+2      	; 0x2b86 <SevSeg_voidDoubleRangeCounter+0x472>
    2b84:	4c cf       	rjmp	.-360    	; 0x2a1e <SevSeg_voidDoubleRangeCounter+0x30a>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 9;
    2b86:	89 e0       	ldi	r24, 0x09	; 9
    2b88:	8f a3       	std	Y+39, r24	; 0x27

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    2b8a:	89 a1       	ldd	r24, Y+33	; 0x21
    2b8c:	9a a1       	ldd	r25, Y+34	; 0x22
    2b8e:	ab a1       	ldd	r26, Y+35	; 0x23
    2b90:	bc a1       	ldd	r27, Y+36	; 0x24
    2b92:	01 97       	sbiw	r24, 0x01	; 1
    2b94:	a1 09       	sbc	r26, r1
    2b96:	b1 09       	sbc	r27, r1
    2b98:	89 a3       	std	Y+33, r24	; 0x21
    2b9a:	9a a3       	std	Y+34, r25	; 0x22
    2b9c:	ab a3       	std	Y+35, r26	; 0x23
    2b9e:	bc a3       	std	Y+36, r27	; 0x24
    2ba0:	8e a1       	ldd	r24, Y+38	; 0x26
    2ba2:	28 2f       	mov	r18, r24
    2ba4:	33 27       	eor	r19, r19
    2ba6:	27 fd       	sbrc	r18, 7
    2ba8:	30 95       	com	r19
    2baa:	43 2f       	mov	r20, r19
    2bac:	53 2f       	mov	r21, r19
    2bae:	89 a1       	ldd	r24, Y+33	; 0x21
    2bb0:	9a a1       	ldd	r25, Y+34	; 0x22
    2bb2:	ab a1       	ldd	r26, Y+35	; 0x23
    2bb4:	bc a1       	ldd	r27, Y+36	; 0x24
    2bb6:	82 17       	cp	r24, r18
    2bb8:	93 07       	cpc	r25, r19
    2bba:	a4 07       	cpc	r26, r20
    2bbc:	b5 07       	cpc	r27, r21
    2bbe:	0c f0       	brlt	.+2      	; 0x2bc2 <SevSeg_voidDoubleRangeCounter+0x4ae>
    2bc0:	13 cf       	rjmp	.-474    	; 0x29e8 <SevSeg_voidDoubleRangeCounter+0x2d4>

				Local_SevSegOneStart = 9;
			}
		}
	}
}
    2bc2:	e9 96       	adiw	r28, 0x39	; 57
    2bc4:	0f b6       	in	r0, 0x3f	; 63
    2bc6:	f8 94       	cli
    2bc8:	de bf       	out	0x3e, r29	; 62
    2bca:	0f be       	out	0x3f, r0	; 63
    2bcc:	cd bf       	out	0x3d, r28	; 61
    2bce:	cf 91       	pop	r28
    2bd0:	df 91       	pop	r29
    2bd2:	08 95       	ret

00002bd4 <SevSeg_voidBCDDisplay>:

void SevSeg_voidBCDDisplay(u8 port, u8 number){
    2bd4:	df 93       	push	r29
    2bd6:	cf 93       	push	r28
    2bd8:	00 d0       	rcall	.+0      	; 0x2bda <SevSeg_voidBCDDisplay+0x6>
    2bda:	cd b7       	in	r28, 0x3d	; 61
    2bdc:	de b7       	in	r29, 0x3e	; 62
    2bde:	89 83       	std	Y+1, r24	; 0x01
    2be0:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPortValue(port, number);
    2be2:	89 81       	ldd	r24, Y+1	; 0x01
    2be4:	6a 81       	ldd	r22, Y+2	; 0x02
    2be6:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <DIO_voidSetPortValue>
}
    2bea:	0f 90       	pop	r0
    2bec:	0f 90       	pop	r0
    2bee:	cf 91       	pop	r28
    2bf0:	df 91       	pop	r29
    2bf2:	08 95       	ret

00002bf4 <SevSeg_voidBCDDoubleDisplay>:

void SevSeg_voidBCDDoubleDisplay(s8 start,s8 end){
    2bf4:	df 93       	push	r29
    2bf6:	cf 93       	push	r28
    2bf8:	cd b7       	in	r28, 0x3d	; 61
    2bfa:	de b7       	in	r29, 0x3e	; 62
    2bfc:	ab 97       	sbiw	r28, 0x2b	; 43
    2bfe:	0f b6       	in	r0, 0x3f	; 63
    2c00:	f8 94       	cli
    2c02:	de bf       	out	0x3e, r29	; 62
    2c04:	0f be       	out	0x3f, r0	; 63
    2c06:	cd bf       	out	0x3d, r28	; 61
    2c08:	8a a7       	std	Y+42, r24	; 0x2a
    2c0a:	6b a7       	std	Y+43, r22	; 0x2b
	s8 Local_SevSegTwoStart = start / 10;
    2c0c:	8a a5       	ldd	r24, Y+42	; 0x2a
    2c0e:	9a e0       	ldi	r25, 0x0A	; 10
    2c10:	69 2f       	mov	r22, r25
    2c12:	0e 94 55 35 	call	0x6aaa	; 0x6aaa <__divmodqi4>
    2c16:	89 a7       	std	Y+41, r24	; 0x29
	s8 Local_SevSegOneStart = start % 10;
    2c18:	8a a5       	ldd	r24, Y+42	; 0x2a
    2c1a:	9a e0       	ldi	r25, 0x0A	; 10
    2c1c:	69 2f       	mov	r22, r25
    2c1e:	0e 94 55 35 	call	0x6aaa	; 0x6aaa <__divmodqi4>
    2c22:	89 2f       	mov	r24, r25
    2c24:	88 a7       	std	Y+40, r24	; 0x28

	s8 Local_SevSegTwoEnd = end / 10;
    2c26:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c28:	9a e0       	ldi	r25, 0x0A	; 10
    2c2a:	69 2f       	mov	r22, r25
    2c2c:	0e 94 55 35 	call	0x6aaa	; 0x6aaa <__divmodqi4>
    2c30:	8f a3       	std	Y+39, r24	; 0x27
	s8 Local_SevSegOneEnd = end % 10;
    2c32:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c34:	9a e0       	ldi	r25, 0x0A	; 10
    2c36:	69 2f       	mov	r22, r25
    2c38:	0e 94 55 35 	call	0x6aaa	; 0x6aaa <__divmodqi4>
    2c3c:	89 2f       	mov	r24, r25
    2c3e:	8e a3       	std	Y+38, r24	; 0x26

	s32 Local_Counter1 = 0;
    2c40:	1a a2       	std	Y+34, r1	; 0x22
    2c42:	1b a2       	std	Y+35, r1	; 0x23
    2c44:	1c a2       	std	Y+36, r1	; 0x24
    2c46:	1d a2       	std	Y+37, r1	; 0x25
	s32 Local_Counter2 = 0;
    2c48:	1e 8e       	std	Y+30, r1	; 0x1e
    2c4a:	1f 8e       	std	Y+31, r1	; 0x1f
    2c4c:	18 a2       	std	Y+32, r1	; 0x20
    2c4e:	19 a2       	std	Y+33, r1	; 0x21
	u8 num = 0;
    2c50:	1d 8e       	std	Y+29, r1	; 0x1d
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){
    2c52:	89 a5       	ldd	r24, Y+41	; 0x29
    2c54:	88 23       	and	r24, r24
    2c56:	0c f4       	brge	.+2      	; 0x2c5a <SevSeg_voidBCDDoubleDisplay+0x66>
    2c58:	11 c2       	rjmp	.+1058   	; 0x307c <SevSeg_voidBCDDoubleDisplay+0x488>
    2c5a:	89 a5       	ldd	r24, Y+41	; 0x29
    2c5c:	8a 30       	cpi	r24, 0x0A	; 10
    2c5e:	0c f0       	brlt	.+2      	; 0x2c62 <SevSeg_voidBCDDoubleDisplay+0x6e>
    2c60:	0d c2       	rjmp	.+1050   	; 0x307c <SevSeg_voidBCDDoubleDisplay+0x488>
    2c62:	8f a1       	ldd	r24, Y+39	; 0x27
    2c64:	8a 30       	cpi	r24, 0x0A	; 10
    2c66:	0c f0       	brlt	.+2      	; 0x2c6a <SevSeg_voidBCDDoubleDisplay+0x76>
    2c68:	09 c2       	rjmp	.+1042   	; 0x307c <SevSeg_voidBCDDoubleDisplay+0x488>
    2c6a:	8f a1       	ldd	r24, Y+39	; 0x27
    2c6c:	88 23       	and	r24, r24
    2c6e:	0c f4       	brge	.+2      	; 0x2c72 <SevSeg_voidBCDDoubleDisplay+0x7e>
    2c70:	05 c2       	rjmp	.+1034   	; 0x307c <SevSeg_voidBCDDoubleDisplay+0x488>

		if(start < end){
    2c72:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c74:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c76:	98 17       	cp	r25, r24
    2c78:	0c f0       	brlt	.+2      	; 0x2c7c <SevSeg_voidBCDDoubleDisplay+0x88>
    2c7a:	02 c1       	rjmp	.+516    	; 0x2e80 <SevSeg_voidBCDDoubleDisplay+0x28c>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    2c7c:	89 a5       	ldd	r24, Y+41	; 0x29
    2c7e:	99 27       	eor	r25, r25
    2c80:	87 fd       	sbrc	r24, 7
    2c82:	90 95       	com	r25
    2c84:	a9 2f       	mov	r26, r25
    2c86:	b9 2f       	mov	r27, r25
    2c88:	8a a3       	std	Y+34, r24	; 0x22
    2c8a:	9b a3       	std	Y+35, r25	; 0x23
    2c8c:	ac a3       	std	Y+36, r26	; 0x24
    2c8e:	bd a3       	std	Y+37, r27	; 0x25
    2c90:	e5 c0       	rjmp	.+458    	; 0x2e5c <SevSeg_voidBCDDoubleDisplay+0x268>
				num &= 0x0F;
    2c92:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c94:	8f 70       	andi	r24, 0x0F	; 15
    2c96:	8d 8f       	std	Y+29, r24	; 0x1d
				num |= (Local_Counter1 << 4);
    2c98:	8a a1       	ldd	r24, Y+34	; 0x22
    2c9a:	9b a1       	ldd	r25, Y+35	; 0x23
    2c9c:	ac a1       	ldd	r26, Y+36	; 0x24
    2c9e:	bd a1       	ldd	r27, Y+37	; 0x25
    2ca0:	88 0f       	add	r24, r24
    2ca2:	99 1f       	adc	r25, r25
    2ca4:	aa 1f       	adc	r26, r26
    2ca6:	bb 1f       	adc	r27, r27
    2ca8:	88 0f       	add	r24, r24
    2caa:	99 1f       	adc	r25, r25
    2cac:	aa 1f       	adc	r26, r26
    2cae:	bb 1f       	adc	r27, r27
    2cb0:	88 0f       	add	r24, r24
    2cb2:	99 1f       	adc	r25, r25
    2cb4:	aa 1f       	adc	r26, r26
    2cb6:	bb 1f       	adc	r27, r27
    2cb8:	88 0f       	add	r24, r24
    2cba:	99 1f       	adc	r25, r25
    2cbc:	aa 1f       	adc	r26, r26
    2cbe:	bb 1f       	adc	r27, r27
    2cc0:	98 2f       	mov	r25, r24
    2cc2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cc4:	89 2b       	or	r24, r25
    2cc6:	8d 8f       	std	Y+29, r24	; 0x1d
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    2cc8:	88 a5       	ldd	r24, Y+40	; 0x28
    2cca:	99 27       	eor	r25, r25
    2ccc:	87 fd       	sbrc	r24, 7
    2cce:	90 95       	com	r25
    2cd0:	a9 2f       	mov	r26, r25
    2cd2:	b9 2f       	mov	r27, r25
    2cd4:	8e 8f       	std	Y+30, r24	; 0x1e
    2cd6:	9f 8f       	std	Y+31, r25	; 0x1f
    2cd8:	a8 a3       	std	Y+32, r26	; 0x20
    2cda:	b9 a3       	std	Y+33, r27	; 0x21
    2cdc:	a9 c0       	rjmp	.+338    	; 0x2e30 <SevSeg_voidBCDDoubleDisplay+0x23c>
					num &= 0xF0;
    2cde:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ce0:	80 7f       	andi	r24, 0xF0	; 240
    2ce2:	8d 8f       	std	Y+29, r24	; 0x1d
					num |= Local_Counter2;
    2ce4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ce6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ce8:	89 2b       	or	r24, r25
    2cea:	8d 8f       	std	Y+29, r24	; 0x1d
    2cec:	80 e0       	ldi	r24, 0x00	; 0
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	a0 e2       	ldi	r26, 0x20	; 32
    2cf2:	b1 e4       	ldi	r27, 0x41	; 65
    2cf4:	89 8f       	std	Y+25, r24	; 0x19
    2cf6:	9a 8f       	std	Y+26, r25	; 0x1a
    2cf8:	ab 8f       	std	Y+27, r26	; 0x1b
    2cfa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cfc:	69 8d       	ldd	r22, Y+25	; 0x19
    2cfe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	4a e7       	ldi	r20, 0x7A	; 122
    2d0a:	55 e4       	ldi	r21, 0x45	; 69
    2d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d10:	dc 01       	movw	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	8d 8b       	std	Y+21, r24	; 0x15
    2d16:	9e 8b       	std	Y+22, r25	; 0x16
    2d18:	af 8b       	std	Y+23, r26	; 0x17
    2d1a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d1c:	6d 89       	ldd	r22, Y+21	; 0x15
    2d1e:	7e 89       	ldd	r23, Y+22	; 0x16
    2d20:	8f 89       	ldd	r24, Y+23	; 0x17
    2d22:	98 8d       	ldd	r25, Y+24	; 0x18
    2d24:	20 e0       	ldi	r18, 0x00	; 0
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	40 e8       	ldi	r20, 0x80	; 128
    2d2a:	5f e3       	ldi	r21, 0x3F	; 63
    2d2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d30:	88 23       	and	r24, r24
    2d32:	2c f4       	brge	.+10     	; 0x2d3e <SevSeg_voidBCDDoubleDisplay+0x14a>
		__ticks = 1;
    2d34:	81 e0       	ldi	r24, 0x01	; 1
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	9c 8b       	std	Y+20, r25	; 0x14
    2d3a:	8b 8b       	std	Y+19, r24	; 0x13
    2d3c:	3f c0       	rjmp	.+126    	; 0x2dbc <SevSeg_voidBCDDoubleDisplay+0x1c8>
	else if (__tmp > 65535)
    2d3e:	6d 89       	ldd	r22, Y+21	; 0x15
    2d40:	7e 89       	ldd	r23, Y+22	; 0x16
    2d42:	8f 89       	ldd	r24, Y+23	; 0x17
    2d44:	98 8d       	ldd	r25, Y+24	; 0x18
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	3f ef       	ldi	r19, 0xFF	; 255
    2d4a:	4f e7       	ldi	r20, 0x7F	; 127
    2d4c:	57 e4       	ldi	r21, 0x47	; 71
    2d4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d52:	18 16       	cp	r1, r24
    2d54:	4c f5       	brge	.+82     	; 0x2da8 <SevSeg_voidBCDDoubleDisplay+0x1b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d56:	69 8d       	ldd	r22, Y+25	; 0x19
    2d58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d5e:	20 e0       	ldi	r18, 0x00	; 0
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	40 e2       	ldi	r20, 0x20	; 32
    2d64:	51 e4       	ldi	r21, 0x41	; 65
    2d66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d6a:	dc 01       	movw	r26, r24
    2d6c:	cb 01       	movw	r24, r22
    2d6e:	bc 01       	movw	r22, r24
    2d70:	cd 01       	movw	r24, r26
    2d72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d76:	dc 01       	movw	r26, r24
    2d78:	cb 01       	movw	r24, r22
    2d7a:	9c 8b       	std	Y+20, r25	; 0x14
    2d7c:	8b 8b       	std	Y+19, r24	; 0x13
    2d7e:	0f c0       	rjmp	.+30     	; 0x2d9e <SevSeg_voidBCDDoubleDisplay+0x1aa>
    2d80:	80 e9       	ldi	r24, 0x90	; 144
    2d82:	91 e0       	ldi	r25, 0x01	; 1
    2d84:	9a 8b       	std	Y+18, r25	; 0x12
    2d86:	89 8b       	std	Y+17, r24	; 0x11
    2d88:	89 89       	ldd	r24, Y+17	; 0x11
    2d8a:	9a 89       	ldd	r25, Y+18	; 0x12
    2d8c:	01 97       	sbiw	r24, 0x01	; 1
    2d8e:	f1 f7       	brne	.-4      	; 0x2d8c <SevSeg_voidBCDDoubleDisplay+0x198>
    2d90:	9a 8b       	std	Y+18, r25	; 0x12
    2d92:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d94:	8b 89       	ldd	r24, Y+19	; 0x13
    2d96:	9c 89       	ldd	r25, Y+20	; 0x14
    2d98:	01 97       	sbiw	r24, 0x01	; 1
    2d9a:	9c 8b       	std	Y+20, r25	; 0x14
    2d9c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d9e:	8b 89       	ldd	r24, Y+19	; 0x13
    2da0:	9c 89       	ldd	r25, Y+20	; 0x14
    2da2:	00 97       	sbiw	r24, 0x00	; 0
    2da4:	69 f7       	brne	.-38     	; 0x2d80 <SevSeg_voidBCDDoubleDisplay+0x18c>
    2da6:	14 c0       	rjmp	.+40     	; 0x2dd0 <SevSeg_voidBCDDoubleDisplay+0x1dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2da8:	6d 89       	ldd	r22, Y+21	; 0x15
    2daa:	7e 89       	ldd	r23, Y+22	; 0x16
    2dac:	8f 89       	ldd	r24, Y+23	; 0x17
    2dae:	98 8d       	ldd	r25, Y+24	; 0x18
    2db0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db4:	dc 01       	movw	r26, r24
    2db6:	cb 01       	movw	r24, r22
    2db8:	9c 8b       	std	Y+20, r25	; 0x14
    2dba:	8b 8b       	std	Y+19, r24	; 0x13
    2dbc:	8b 89       	ldd	r24, Y+19	; 0x13
    2dbe:	9c 89       	ldd	r25, Y+20	; 0x14
    2dc0:	98 8b       	std	Y+16, r25	; 0x10
    2dc2:	8f 87       	std	Y+15, r24	; 0x0f
    2dc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dc6:	98 89       	ldd	r25, Y+16	; 0x10
    2dc8:	01 97       	sbiw	r24, 0x01	; 1
    2dca:	f1 f7       	brne	.-4      	; 0x2dc8 <SevSeg_voidBCDDoubleDisplay+0x1d4>
    2dcc:	98 8b       	std	Y+16, r25	; 0x10
    2dce:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(Sev_DELAY);
					DIO_voidSetPortValue(Sev_PORT,num);
    2dd0:	82 e0       	ldi	r24, 0x02	; 2
    2dd2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2dd4:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <DIO_voidSetPortValue>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    2dd8:	8e a1       	ldd	r24, Y+38	; 0x26
    2dda:	28 2f       	mov	r18, r24
    2ddc:	33 27       	eor	r19, r19
    2dde:	27 fd       	sbrc	r18, 7
    2de0:	30 95       	com	r19
    2de2:	43 2f       	mov	r20, r19
    2de4:	53 2f       	mov	r21, r19
    2de6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2de8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2dea:	a8 a1       	ldd	r26, Y+32	; 0x20
    2dec:	b9 a1       	ldd	r27, Y+33	; 0x21
    2dee:	28 17       	cp	r18, r24
    2df0:	39 07       	cpc	r19, r25
    2df2:	4a 07       	cpc	r20, r26
    2df4:	5b 07       	cpc	r21, r27
    2df6:	89 f4       	brne	.+34     	; 0x2e1a <SevSeg_voidBCDDoubleDisplay+0x226>
    2df8:	8f a1       	ldd	r24, Y+39	; 0x27
    2dfa:	28 2f       	mov	r18, r24
    2dfc:	33 27       	eor	r19, r19
    2dfe:	27 fd       	sbrc	r18, 7
    2e00:	30 95       	com	r19
    2e02:	43 2f       	mov	r20, r19
    2e04:	53 2f       	mov	r21, r19
    2e06:	8a a1       	ldd	r24, Y+34	; 0x22
    2e08:	9b a1       	ldd	r25, Y+35	; 0x23
    2e0a:	ac a1       	ldd	r26, Y+36	; 0x24
    2e0c:	bd a1       	ldd	r27, Y+37	; 0x25
    2e0e:	28 17       	cp	r18, r24
    2e10:	39 07       	cpc	r19, r25
    2e12:	4a 07       	cpc	r20, r26
    2e14:	5b 07       	cpc	r21, r27
    2e16:	09 f4       	brne	.+2      	; 0x2e1a <SevSeg_voidBCDDoubleDisplay+0x226>
    2e18:	31 c1       	rjmp	.+610    	; 0x307c <SevSeg_voidBCDDoubleDisplay+0x488>

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				num &= 0x0F;
				num |= (Local_Counter1 << 4);
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    2e1a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e1c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2e1e:	a8 a1       	ldd	r26, Y+32	; 0x20
    2e20:	b9 a1       	ldd	r27, Y+33	; 0x21
    2e22:	01 96       	adiw	r24, 0x01	; 1
    2e24:	a1 1d       	adc	r26, r1
    2e26:	b1 1d       	adc	r27, r1
    2e28:	8e 8f       	std	Y+30, r24	; 0x1e
    2e2a:	9f 8f       	std	Y+31, r25	; 0x1f
    2e2c:	a8 a3       	std	Y+32, r26	; 0x20
    2e2e:	b9 a3       	std	Y+33, r27	; 0x21
    2e30:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e32:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2e34:	a8 a1       	ldd	r26, Y+32	; 0x20
    2e36:	b9 a1       	ldd	r27, Y+33	; 0x21
    2e38:	8a 30       	cpi	r24, 0x0A	; 10
    2e3a:	91 05       	cpc	r25, r1
    2e3c:	a1 05       	cpc	r26, r1
    2e3e:	b1 05       	cpc	r27, r1
    2e40:	0c f4       	brge	.+2      	; 0x2e44 <SevSeg_voidBCDDoubleDisplay+0x250>
    2e42:	4d cf       	rjmp	.-358    	; 0x2cde <SevSeg_voidBCDDoubleDisplay+0xea>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 0;
    2e44:	18 a6       	std	Y+40, r1	; 0x28
	s32 Local_Counter2 = 0;
	u8 num = 0;
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    2e46:	8a a1       	ldd	r24, Y+34	; 0x22
    2e48:	9b a1       	ldd	r25, Y+35	; 0x23
    2e4a:	ac a1       	ldd	r26, Y+36	; 0x24
    2e4c:	bd a1       	ldd	r27, Y+37	; 0x25
    2e4e:	01 96       	adiw	r24, 0x01	; 1
    2e50:	a1 1d       	adc	r26, r1
    2e52:	b1 1d       	adc	r27, r1
    2e54:	8a a3       	std	Y+34, r24	; 0x22
    2e56:	9b a3       	std	Y+35, r25	; 0x23
    2e58:	ac a3       	std	Y+36, r26	; 0x24
    2e5a:	bd a3       	std	Y+37, r27	; 0x25
    2e5c:	8f a1       	ldd	r24, Y+39	; 0x27
    2e5e:	28 2f       	mov	r18, r24
    2e60:	33 27       	eor	r19, r19
    2e62:	27 fd       	sbrc	r18, 7
    2e64:	30 95       	com	r19
    2e66:	43 2f       	mov	r20, r19
    2e68:	53 2f       	mov	r21, r19
    2e6a:	8a a1       	ldd	r24, Y+34	; 0x22
    2e6c:	9b a1       	ldd	r25, Y+35	; 0x23
    2e6e:	ac a1       	ldd	r26, Y+36	; 0x24
    2e70:	bd a1       	ldd	r27, Y+37	; 0x25
    2e72:	28 17       	cp	r18, r24
    2e74:	39 07       	cpc	r19, r25
    2e76:	4a 07       	cpc	r20, r26
    2e78:	5b 07       	cpc	r21, r27
    2e7a:	0c f0       	brlt	.+2      	; 0x2e7e <SevSeg_voidBCDDoubleDisplay+0x28a>
    2e7c:	0a cf       	rjmp	.-492    	; 0x2c92 <SevSeg_voidBCDDoubleDisplay+0x9e>
    2e7e:	fe c0       	rjmp	.+508    	; 0x307c <SevSeg_voidBCDDoubleDisplay+0x488>

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    2e80:	89 a5       	ldd	r24, Y+41	; 0x29
    2e82:	99 27       	eor	r25, r25
    2e84:	87 fd       	sbrc	r24, 7
    2e86:	90 95       	com	r25
    2e88:	a9 2f       	mov	r26, r25
    2e8a:	b9 2f       	mov	r27, r25
    2e8c:	8a a3       	std	Y+34, r24	; 0x22
    2e8e:	9b a3       	std	Y+35, r25	; 0x23
    2e90:	ac a3       	std	Y+36, r26	; 0x24
    2e92:	bd a3       	std	Y+37, r27	; 0x25
    2e94:	e2 c0       	rjmp	.+452    	; 0x305a <SevSeg_voidBCDDoubleDisplay+0x466>

				num &= 0x0F;
    2e96:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e98:	8f 70       	andi	r24, 0x0F	; 15
    2e9a:	8d 8f       	std	Y+29, r24	; 0x1d
				num |= (Local_Counter1 << 4);
    2e9c:	8a a1       	ldd	r24, Y+34	; 0x22
    2e9e:	9b a1       	ldd	r25, Y+35	; 0x23
    2ea0:	ac a1       	ldd	r26, Y+36	; 0x24
    2ea2:	bd a1       	ldd	r27, Y+37	; 0x25
    2ea4:	88 0f       	add	r24, r24
    2ea6:	99 1f       	adc	r25, r25
    2ea8:	aa 1f       	adc	r26, r26
    2eaa:	bb 1f       	adc	r27, r27
    2eac:	88 0f       	add	r24, r24
    2eae:	99 1f       	adc	r25, r25
    2eb0:	aa 1f       	adc	r26, r26
    2eb2:	bb 1f       	adc	r27, r27
    2eb4:	88 0f       	add	r24, r24
    2eb6:	99 1f       	adc	r25, r25
    2eb8:	aa 1f       	adc	r26, r26
    2eba:	bb 1f       	adc	r27, r27
    2ebc:	88 0f       	add	r24, r24
    2ebe:	99 1f       	adc	r25, r25
    2ec0:	aa 1f       	adc	r26, r26
    2ec2:	bb 1f       	adc	r27, r27
    2ec4:	98 2f       	mov	r25, r24
    2ec6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ec8:	89 2b       	or	r24, r25
    2eca:	8d 8f       	std	Y+29, r24	; 0x1d

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    2ecc:	88 a5       	ldd	r24, Y+40	; 0x28
    2ece:	99 27       	eor	r25, r25
    2ed0:	87 fd       	sbrc	r24, 7
    2ed2:	90 95       	com	r25
    2ed4:	a9 2f       	mov	r26, r25
    2ed6:	b9 2f       	mov	r27, r25
    2ed8:	8e 8f       	std	Y+30, r24	; 0x1e
    2eda:	9f 8f       	std	Y+31, r25	; 0x1f
    2edc:	a8 a3       	std	Y+32, r26	; 0x20
    2ede:	b9 a3       	std	Y+33, r27	; 0x21
    2ee0:	a8 c0       	rjmp	.+336    	; 0x3032 <SevSeg_voidBCDDoubleDisplay+0x43e>
					num &= 0xF0;
    2ee2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ee4:	80 7f       	andi	r24, 0xF0	; 240
    2ee6:	8d 8f       	std	Y+29, r24	; 0x1d
					num |= Local_Counter2;
    2ee8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2eea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2eec:	89 2b       	or	r24, r25
    2eee:	8d 8f       	std	Y+29, r24	; 0x1d
    2ef0:	80 e0       	ldi	r24, 0x00	; 0
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	a0 e2       	ldi	r26, 0x20	; 32
    2ef6:	b1 e4       	ldi	r27, 0x41	; 65
    2ef8:	8b 87       	std	Y+11, r24	; 0x0b
    2efa:	9c 87       	std	Y+12, r25	; 0x0c
    2efc:	ad 87       	std	Y+13, r26	; 0x0d
    2efe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f00:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f02:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f04:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f06:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f08:	20 e0       	ldi	r18, 0x00	; 0
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	4a e7       	ldi	r20, 0x7A	; 122
    2f0e:	55 e4       	ldi	r21, 0x45	; 69
    2f10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	8f 83       	std	Y+7, r24	; 0x07
    2f1a:	98 87       	std	Y+8, r25	; 0x08
    2f1c:	a9 87       	std	Y+9, r26	; 0x09
    2f1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f20:	6f 81       	ldd	r22, Y+7	; 0x07
    2f22:	78 85       	ldd	r23, Y+8	; 0x08
    2f24:	89 85       	ldd	r24, Y+9	; 0x09
    2f26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f28:	20 e0       	ldi	r18, 0x00	; 0
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	40 e8       	ldi	r20, 0x80	; 128
    2f2e:	5f e3       	ldi	r21, 0x3F	; 63
    2f30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f34:	88 23       	and	r24, r24
    2f36:	2c f4       	brge	.+10     	; 0x2f42 <SevSeg_voidBCDDoubleDisplay+0x34e>
		__ticks = 1;
    2f38:	81 e0       	ldi	r24, 0x01	; 1
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	9e 83       	std	Y+6, r25	; 0x06
    2f3e:	8d 83       	std	Y+5, r24	; 0x05
    2f40:	3f c0       	rjmp	.+126    	; 0x2fc0 <SevSeg_voidBCDDoubleDisplay+0x3cc>
	else if (__tmp > 65535)
    2f42:	6f 81       	ldd	r22, Y+7	; 0x07
    2f44:	78 85       	ldd	r23, Y+8	; 0x08
    2f46:	89 85       	ldd	r24, Y+9	; 0x09
    2f48:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f4a:	20 e0       	ldi	r18, 0x00	; 0
    2f4c:	3f ef       	ldi	r19, 0xFF	; 255
    2f4e:	4f e7       	ldi	r20, 0x7F	; 127
    2f50:	57 e4       	ldi	r21, 0x47	; 71
    2f52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f56:	18 16       	cp	r1, r24
    2f58:	4c f5       	brge	.+82     	; 0x2fac <SevSeg_voidBCDDoubleDisplay+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f60:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	40 e2       	ldi	r20, 0x20	; 32
    2f68:	51 e4       	ldi	r21, 0x41	; 65
    2f6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f6e:	dc 01       	movw	r26, r24
    2f70:	cb 01       	movw	r24, r22
    2f72:	bc 01       	movw	r22, r24
    2f74:	cd 01       	movw	r24, r26
    2f76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f7a:	dc 01       	movw	r26, r24
    2f7c:	cb 01       	movw	r24, r22
    2f7e:	9e 83       	std	Y+6, r25	; 0x06
    2f80:	8d 83       	std	Y+5, r24	; 0x05
    2f82:	0f c0       	rjmp	.+30     	; 0x2fa2 <SevSeg_voidBCDDoubleDisplay+0x3ae>
    2f84:	80 e9       	ldi	r24, 0x90	; 144
    2f86:	91 e0       	ldi	r25, 0x01	; 1
    2f88:	9c 83       	std	Y+4, r25	; 0x04
    2f8a:	8b 83       	std	Y+3, r24	; 0x03
    2f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f90:	01 97       	sbiw	r24, 0x01	; 1
    2f92:	f1 f7       	brne	.-4      	; 0x2f90 <SevSeg_voidBCDDoubleDisplay+0x39c>
    2f94:	9c 83       	std	Y+4, r25	; 0x04
    2f96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f98:	8d 81       	ldd	r24, Y+5	; 0x05
    2f9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f9c:	01 97       	sbiw	r24, 0x01	; 1
    2f9e:	9e 83       	std	Y+6, r25	; 0x06
    2fa0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fa2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fa4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fa6:	00 97       	sbiw	r24, 0x00	; 0
    2fa8:	69 f7       	brne	.-38     	; 0x2f84 <SevSeg_voidBCDDoubleDisplay+0x390>
    2faa:	14 c0       	rjmp	.+40     	; 0x2fd4 <SevSeg_voidBCDDoubleDisplay+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fac:	6f 81       	ldd	r22, Y+7	; 0x07
    2fae:	78 85       	ldd	r23, Y+8	; 0x08
    2fb0:	89 85       	ldd	r24, Y+9	; 0x09
    2fb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb8:	dc 01       	movw	r26, r24
    2fba:	cb 01       	movw	r24, r22
    2fbc:	9e 83       	std	Y+6, r25	; 0x06
    2fbe:	8d 83       	std	Y+5, r24	; 0x05
    2fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fc4:	9a 83       	std	Y+2, r25	; 0x02
    2fc6:	89 83       	std	Y+1, r24	; 0x01
    2fc8:	89 81       	ldd	r24, Y+1	; 0x01
    2fca:	9a 81       	ldd	r25, Y+2	; 0x02
    2fcc:	01 97       	sbiw	r24, 0x01	; 1
    2fce:	f1 f7       	brne	.-4      	; 0x2fcc <SevSeg_voidBCDDoubleDisplay+0x3d8>
    2fd0:	9a 83       	std	Y+2, r25	; 0x02
    2fd2:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(Sev_DELAY);
					DIO_voidSetPortValue(Sev_PORT,num);
    2fd4:	82 e0       	ldi	r24, 0x02	; 2
    2fd6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2fd8:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <DIO_voidSetPortValue>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    2fdc:	8e a1       	ldd	r24, Y+38	; 0x26
    2fde:	28 2f       	mov	r18, r24
    2fe0:	33 27       	eor	r19, r19
    2fe2:	27 fd       	sbrc	r18, 7
    2fe4:	30 95       	com	r19
    2fe6:	43 2f       	mov	r20, r19
    2fe8:	53 2f       	mov	r21, r19
    2fea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2fec:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2fee:	a8 a1       	ldd	r26, Y+32	; 0x20
    2ff0:	b9 a1       	ldd	r27, Y+33	; 0x21
    2ff2:	28 17       	cp	r18, r24
    2ff4:	39 07       	cpc	r19, r25
    2ff6:	4a 07       	cpc	r20, r26
    2ff8:	5b 07       	cpc	r21, r27
    2ffa:	81 f4       	brne	.+32     	; 0x301c <SevSeg_voidBCDDoubleDisplay+0x428>
    2ffc:	8f a1       	ldd	r24, Y+39	; 0x27
    2ffe:	28 2f       	mov	r18, r24
    3000:	33 27       	eor	r19, r19
    3002:	27 fd       	sbrc	r18, 7
    3004:	30 95       	com	r19
    3006:	43 2f       	mov	r20, r19
    3008:	53 2f       	mov	r21, r19
    300a:	8a a1       	ldd	r24, Y+34	; 0x22
    300c:	9b a1       	ldd	r25, Y+35	; 0x23
    300e:	ac a1       	ldd	r26, Y+36	; 0x24
    3010:	bd a1       	ldd	r27, Y+37	; 0x25
    3012:	28 17       	cp	r18, r24
    3014:	39 07       	cpc	r19, r25
    3016:	4a 07       	cpc	r20, r26
    3018:	5b 07       	cpc	r21, r27
    301a:	81 f1       	breq	.+96     	; 0x307c <SevSeg_voidBCDDoubleDisplay+0x488>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){

				num &= 0x0F;
				num |= (Local_Counter1 << 4);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    301c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    301e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3020:	a8 a1       	ldd	r26, Y+32	; 0x20
    3022:	b9 a1       	ldd	r27, Y+33	; 0x21
    3024:	01 97       	sbiw	r24, 0x01	; 1
    3026:	a1 09       	sbc	r26, r1
    3028:	b1 09       	sbc	r27, r1
    302a:	8e 8f       	std	Y+30, r24	; 0x1e
    302c:	9f 8f       	std	Y+31, r25	; 0x1f
    302e:	a8 a3       	std	Y+32, r26	; 0x20
    3030:	b9 a3       	std	Y+33, r27	; 0x21
    3032:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3034:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3036:	a8 a1       	ldd	r26, Y+32	; 0x20
    3038:	b9 a1       	ldd	r27, Y+33	; 0x21
    303a:	bb 23       	and	r27, r27
    303c:	0c f0       	brlt	.+2      	; 0x3040 <SevSeg_voidBCDDoubleDisplay+0x44c>
    303e:	51 cf       	rjmp	.-350    	; 0x2ee2 <SevSeg_voidBCDDoubleDisplay+0x2ee>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}
				Local_SevSegOneStart = 9;
    3040:	89 e0       	ldi	r24, 0x09	; 9
    3042:	88 a7       	std	Y+40, r24	; 0x28

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    3044:	8a a1       	ldd	r24, Y+34	; 0x22
    3046:	9b a1       	ldd	r25, Y+35	; 0x23
    3048:	ac a1       	ldd	r26, Y+36	; 0x24
    304a:	bd a1       	ldd	r27, Y+37	; 0x25
    304c:	01 97       	sbiw	r24, 0x01	; 1
    304e:	a1 09       	sbc	r26, r1
    3050:	b1 09       	sbc	r27, r1
    3052:	8a a3       	std	Y+34, r24	; 0x22
    3054:	9b a3       	std	Y+35, r25	; 0x23
    3056:	ac a3       	std	Y+36, r26	; 0x24
    3058:	bd a3       	std	Y+37, r27	; 0x25
    305a:	8f a1       	ldd	r24, Y+39	; 0x27
    305c:	28 2f       	mov	r18, r24
    305e:	33 27       	eor	r19, r19
    3060:	27 fd       	sbrc	r18, 7
    3062:	30 95       	com	r19
    3064:	43 2f       	mov	r20, r19
    3066:	53 2f       	mov	r21, r19
    3068:	8a a1       	ldd	r24, Y+34	; 0x22
    306a:	9b a1       	ldd	r25, Y+35	; 0x23
    306c:	ac a1       	ldd	r26, Y+36	; 0x24
    306e:	bd a1       	ldd	r27, Y+37	; 0x25
    3070:	82 17       	cp	r24, r18
    3072:	93 07       	cpc	r25, r19
    3074:	a4 07       	cpc	r26, r20
    3076:	b5 07       	cpc	r27, r21
    3078:	0c f0       	brlt	.+2      	; 0x307c <SevSeg_voidBCDDoubleDisplay+0x488>
    307a:	0d cf       	rjmp	.-486    	; 0x2e96 <SevSeg_voidBCDDoubleDisplay+0x2a2>
				}
				Local_SevSegOneStart = 9;
			}
		}
	}
}
    307c:	ab 96       	adiw	r28, 0x2b	; 43
    307e:	0f b6       	in	r0, 0x3f	; 63
    3080:	f8 94       	cli
    3082:	de bf       	out	0x3e, r29	; 62
    3084:	0f be       	out	0x3f, r0	; 63
    3086:	cd bf       	out	0x3d, r28	; 61
    3088:	cf 91       	pop	r28
    308a:	df 91       	pop	r29
    308c:	08 95       	ret

0000308e <SevSeg_voidMulBCD>:

void SevSeg_voidMulBCD(s8 start,s8 end){
    308e:	df 93       	push	r29
    3090:	cf 93       	push	r28
    3092:	cd b7       	in	r28, 0x3d	; 61
    3094:	de b7       	in	r29, 0x3e	; 62
    3096:	c1 54       	subi	r28, 0x41	; 65
    3098:	d0 40       	sbci	r29, 0x00	; 0
    309a:	0f b6       	in	r0, 0x3f	; 63
    309c:	f8 94       	cli
    309e:	de bf       	out	0x3e, r29	; 62
    30a0:	0f be       	out	0x3f, r0	; 63
    30a2:	cd bf       	out	0x3d, r28	; 61
    30a4:	fe 01       	movw	r30, r28
    30a6:	e0 5c       	subi	r30, 0xC0	; 192
    30a8:	ff 4f       	sbci	r31, 0xFF	; 255
    30aa:	80 83       	st	Z, r24
    30ac:	fe 01       	movw	r30, r28
    30ae:	ef 5b       	subi	r30, 0xBF	; 191
    30b0:	ff 4f       	sbci	r31, 0xFF	; 255
    30b2:	60 83       	st	Z, r22
	s8 Local_SevSegTwoStart = start / 10;
    30b4:	fe 01       	movw	r30, r28
    30b6:	e0 5c       	subi	r30, 0xC0	; 192
    30b8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ba:	80 81       	ld	r24, Z
    30bc:	9a e0       	ldi	r25, 0x0A	; 10
    30be:	69 2f       	mov	r22, r25
    30c0:	0e 94 55 35 	call	0x6aaa	; 0x6aaa <__divmodqi4>
    30c4:	8f af       	std	Y+63, r24	; 0x3f
	s8 Local_SevSegOneStart = start % 10;
    30c6:	fe 01       	movw	r30, r28
    30c8:	e0 5c       	subi	r30, 0xC0	; 192
    30ca:	ff 4f       	sbci	r31, 0xFF	; 255
    30cc:	80 81       	ld	r24, Z
    30ce:	9a e0       	ldi	r25, 0x0A	; 10
    30d0:	69 2f       	mov	r22, r25
    30d2:	0e 94 55 35 	call	0x6aaa	; 0x6aaa <__divmodqi4>
    30d6:	89 2f       	mov	r24, r25
    30d8:	8e af       	std	Y+62, r24	; 0x3e

	s8 Local_SevSegTwoEnd = end / 10;
    30da:	fe 01       	movw	r30, r28
    30dc:	ef 5b       	subi	r30, 0xBF	; 191
    30de:	ff 4f       	sbci	r31, 0xFF	; 255
    30e0:	80 81       	ld	r24, Z
    30e2:	9a e0       	ldi	r25, 0x0A	; 10
    30e4:	69 2f       	mov	r22, r25
    30e6:	0e 94 55 35 	call	0x6aaa	; 0x6aaa <__divmodqi4>
    30ea:	8d af       	std	Y+61, r24	; 0x3d
	s8 Local_SevSegOneEnd = end % 10;
    30ec:	fe 01       	movw	r30, r28
    30ee:	ef 5b       	subi	r30, 0xBF	; 191
    30f0:	ff 4f       	sbci	r31, 0xFF	; 255
    30f2:	80 81       	ld	r24, Z
    30f4:	9a e0       	ldi	r25, 0x0A	; 10
    30f6:	69 2f       	mov	r22, r25
    30f8:	0e 94 55 35 	call	0x6aaa	; 0x6aaa <__divmodqi4>
    30fc:	89 2f       	mov	r24, r25
    30fe:	8c af       	std	Y+60, r24	; 0x3c

	s32 Local_Counter1 = 0;
    3100:	18 ae       	std	Y+56, r1	; 0x38
    3102:	19 ae       	std	Y+57, r1	; 0x39
    3104:	1a ae       	std	Y+58, r1	; 0x3a
    3106:	1b ae       	std	Y+59, r1	; 0x3b
	s32 Local_Counter2 = 0;
    3108:	1c aa       	std	Y+52, r1	; 0x34
    310a:	1d aa       	std	Y+53, r1	; 0x35
    310c:	1e aa       	std	Y+54, r1	; 0x36
    310e:	1f aa       	std	Y+55, r1	; 0x37
	u8 num = 0;
    3110:	1b aa       	std	Y+51, r1	; 0x33
	u32 count = 0;
    3112:	1f a6       	std	Y+47, r1	; 0x2f
    3114:	18 aa       	std	Y+48, r1	; 0x30
    3116:	19 aa       	std	Y+49, r1	; 0x31
    3118:	1a aa       	std	Y+50, r1	; 0x32
	u32 delay = 1000 / (Sev_DELAY * 2);
    311a:	82 e3       	ldi	r24, 0x32	; 50
    311c:	90 e0       	ldi	r25, 0x00	; 0
    311e:	a0 e0       	ldi	r26, 0x00	; 0
    3120:	b0 e0       	ldi	r27, 0x00	; 0
    3122:	8b a7       	std	Y+43, r24	; 0x2b
    3124:	9c a7       	std	Y+44, r25	; 0x2c
    3126:	ad a7       	std	Y+45, r26	; 0x2d
    3128:	be a7       	std	Y+46, r27	; 0x2e
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){
    312a:	8f ad       	ldd	r24, Y+63	; 0x3f
    312c:	88 23       	and	r24, r24
    312e:	0c f4       	brge	.+2      	; 0x3132 <SevSeg_voidMulBCD+0xa4>
    3130:	ad c2       	rjmp	.+1370   	; 0x368c <SevSeg_voidMulBCD+0x5fe>
    3132:	8f ad       	ldd	r24, Y+63	; 0x3f
    3134:	8a 30       	cpi	r24, 0x0A	; 10
    3136:	0c f0       	brlt	.+2      	; 0x313a <SevSeg_voidMulBCD+0xac>
    3138:	a9 c2       	rjmp	.+1362   	; 0x368c <SevSeg_voidMulBCD+0x5fe>
    313a:	8d ad       	ldd	r24, Y+61	; 0x3d
    313c:	8a 30       	cpi	r24, 0x0A	; 10
    313e:	0c f0       	brlt	.+2      	; 0x3142 <SevSeg_voidMulBCD+0xb4>
    3140:	a5 c2       	rjmp	.+1354   	; 0x368c <SevSeg_voidMulBCD+0x5fe>
    3142:	8d ad       	ldd	r24, Y+61	; 0x3d
    3144:	88 23       	and	r24, r24
    3146:	0c f4       	brge	.+2      	; 0x314a <SevSeg_voidMulBCD+0xbc>
    3148:	a1 c2       	rjmp	.+1346   	; 0x368c <SevSeg_voidMulBCD+0x5fe>

		if(start < end){
    314a:	de 01       	movw	r26, r28
    314c:	af 5b       	subi	r26, 0xBF	; 191
    314e:	bf 4f       	sbci	r27, 0xFF	; 255
    3150:	fe 01       	movw	r30, r28
    3152:	e0 5c       	subi	r30, 0xC0	; 192
    3154:	ff 4f       	sbci	r31, 0xFF	; 255
    3156:	90 81       	ld	r25, Z
    3158:	8c 91       	ld	r24, X
    315a:	98 17       	cp	r25, r24
    315c:	0c f0       	brlt	.+2      	; 0x3160 <SevSeg_voidMulBCD+0xd2>
    315e:	98 c1       	rjmp	.+816    	; 0x3490 <SevSeg_voidMulBCD+0x402>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    3160:	8f ad       	ldd	r24, Y+63	; 0x3f
    3162:	99 27       	eor	r25, r25
    3164:	87 fd       	sbrc	r24, 7
    3166:	90 95       	com	r25
    3168:	a9 2f       	mov	r26, r25
    316a:	b9 2f       	mov	r27, r25
    316c:	88 af       	std	Y+56, r24	; 0x38
    316e:	99 af       	std	Y+57, r25	; 0x39
    3170:	aa af       	std	Y+58, r26	; 0x3a
    3172:	bb af       	std	Y+59, r27	; 0x3b
    3174:	7b c1       	rjmp	.+758    	; 0x346c <SevSeg_voidMulBCD+0x3de>
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    3176:	8e ad       	ldd	r24, Y+62	; 0x3e
    3178:	99 27       	eor	r25, r25
    317a:	87 fd       	sbrc	r24, 7
    317c:	90 95       	com	r25
    317e:	a9 2f       	mov	r26, r25
    3180:	b9 2f       	mov	r27, r25
    3182:	8c ab       	std	Y+52, r24	; 0x34
    3184:	9d ab       	std	Y+53, r25	; 0x35
    3186:	ae ab       	std	Y+54, r26	; 0x36
    3188:	bf ab       	std	Y+55, r27	; 0x37
    318a:	5a c1       	rjmp	.+692    	; 0x3440 <SevSeg_voidMulBCD+0x3b2>
					count = 0;
    318c:	1f a6       	std	Y+47, r1	; 0x2f
    318e:	18 aa       	std	Y+48, r1	; 0x30
    3190:	19 aa       	std	Y+49, r1	; 0x31
    3192:	1a aa       	std	Y+50, r1	; 0x32
    3194:	1b c1       	rjmp	.+566    	; 0x33cc <SevSeg_voidMulBCD+0x33e>
					while(count< delay){
						DIO_voidSetPortValue(Sev_PORT,MulBCDArr[Local_Counter1]);
    3196:	88 ad       	ldd	r24, Y+56	; 0x38
    3198:	99 ad       	ldd	r25, Y+57	; 0x39
    319a:	aa ad       	ldd	r26, Y+58	; 0x3a
    319c:	bb ad       	ldd	r27, Y+59	; 0x3b
    319e:	fc 01       	movw	r30, r24
    31a0:	e2 5f       	subi	r30, 0xF2	; 242
    31a2:	fd 4f       	sbci	r31, 0xFD	; 253
    31a4:	90 81       	ld	r25, Z
    31a6:	82 e0       	ldi	r24, 0x02	; 2
    31a8:	69 2f       	mov	r22, r25
    31aa:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <DIO_voidSetPortValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN6, Low);
    31ae:	82 e0       	ldi	r24, 0x02	; 2
    31b0:	66 e0       	ldi	r22, 0x06	; 6
    31b2:	40 e0       	ldi	r20, 0x00	; 0
    31b4:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN5, High);
    31b8:	82 e0       	ldi	r24, 0x02	; 2
    31ba:	65 e0       	ldi	r22, 0x05	; 5
    31bc:	41 e0       	ldi	r20, 0x01	; 1
    31be:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
    31c2:	80 e0       	ldi	r24, 0x00	; 0
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	a0 e2       	ldi	r26, 0x20	; 32
    31c8:	b1 e4       	ldi	r27, 0x41	; 65
    31ca:	8f a3       	std	Y+39, r24	; 0x27
    31cc:	98 a7       	std	Y+40, r25	; 0x28
    31ce:	a9 a7       	std	Y+41, r26	; 0x29
    31d0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31d2:	6f a1       	ldd	r22, Y+39	; 0x27
    31d4:	78 a5       	ldd	r23, Y+40	; 0x28
    31d6:	89 a5       	ldd	r24, Y+41	; 0x29
    31d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    31da:	20 e0       	ldi	r18, 0x00	; 0
    31dc:	30 e0       	ldi	r19, 0x00	; 0
    31de:	4a e7       	ldi	r20, 0x7A	; 122
    31e0:	55 e4       	ldi	r21, 0x45	; 69
    31e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e6:	dc 01       	movw	r26, r24
    31e8:	cb 01       	movw	r24, r22
    31ea:	8b a3       	std	Y+35, r24	; 0x23
    31ec:	9c a3       	std	Y+36, r25	; 0x24
    31ee:	ad a3       	std	Y+37, r26	; 0x25
    31f0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    31f2:	6b a1       	ldd	r22, Y+35	; 0x23
    31f4:	7c a1       	ldd	r23, Y+36	; 0x24
    31f6:	8d a1       	ldd	r24, Y+37	; 0x25
    31f8:	9e a1       	ldd	r25, Y+38	; 0x26
    31fa:	20 e0       	ldi	r18, 0x00	; 0
    31fc:	30 e0       	ldi	r19, 0x00	; 0
    31fe:	40 e8       	ldi	r20, 0x80	; 128
    3200:	5f e3       	ldi	r21, 0x3F	; 63
    3202:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3206:	88 23       	and	r24, r24
    3208:	2c f4       	brge	.+10     	; 0x3214 <SevSeg_voidMulBCD+0x186>
		__ticks = 1;
    320a:	81 e0       	ldi	r24, 0x01	; 1
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	9a a3       	std	Y+34, r25	; 0x22
    3210:	89 a3       	std	Y+33, r24	; 0x21
    3212:	3f c0       	rjmp	.+126    	; 0x3292 <SevSeg_voidMulBCD+0x204>
	else if (__tmp > 65535)
    3214:	6b a1       	ldd	r22, Y+35	; 0x23
    3216:	7c a1       	ldd	r23, Y+36	; 0x24
    3218:	8d a1       	ldd	r24, Y+37	; 0x25
    321a:	9e a1       	ldd	r25, Y+38	; 0x26
    321c:	20 e0       	ldi	r18, 0x00	; 0
    321e:	3f ef       	ldi	r19, 0xFF	; 255
    3220:	4f e7       	ldi	r20, 0x7F	; 127
    3222:	57 e4       	ldi	r21, 0x47	; 71
    3224:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3228:	18 16       	cp	r1, r24
    322a:	4c f5       	brge	.+82     	; 0x327e <SevSeg_voidMulBCD+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    322c:	6f a1       	ldd	r22, Y+39	; 0x27
    322e:	78 a5       	ldd	r23, Y+40	; 0x28
    3230:	89 a5       	ldd	r24, Y+41	; 0x29
    3232:	9a a5       	ldd	r25, Y+42	; 0x2a
    3234:	20 e0       	ldi	r18, 0x00	; 0
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	40 e2       	ldi	r20, 0x20	; 32
    323a:	51 e4       	ldi	r21, 0x41	; 65
    323c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3240:	dc 01       	movw	r26, r24
    3242:	cb 01       	movw	r24, r22
    3244:	bc 01       	movw	r22, r24
    3246:	cd 01       	movw	r24, r26
    3248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    324c:	dc 01       	movw	r26, r24
    324e:	cb 01       	movw	r24, r22
    3250:	9a a3       	std	Y+34, r25	; 0x22
    3252:	89 a3       	std	Y+33, r24	; 0x21
    3254:	0f c0       	rjmp	.+30     	; 0x3274 <SevSeg_voidMulBCD+0x1e6>
    3256:	80 e9       	ldi	r24, 0x90	; 144
    3258:	91 e0       	ldi	r25, 0x01	; 1
    325a:	98 a3       	std	Y+32, r25	; 0x20
    325c:	8f 8f       	std	Y+31, r24	; 0x1f
    325e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3260:	98 a1       	ldd	r25, Y+32	; 0x20
    3262:	01 97       	sbiw	r24, 0x01	; 1
    3264:	f1 f7       	brne	.-4      	; 0x3262 <SevSeg_voidMulBCD+0x1d4>
    3266:	98 a3       	std	Y+32, r25	; 0x20
    3268:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    326a:	89 a1       	ldd	r24, Y+33	; 0x21
    326c:	9a a1       	ldd	r25, Y+34	; 0x22
    326e:	01 97       	sbiw	r24, 0x01	; 1
    3270:	9a a3       	std	Y+34, r25	; 0x22
    3272:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3274:	89 a1       	ldd	r24, Y+33	; 0x21
    3276:	9a a1       	ldd	r25, Y+34	; 0x22
    3278:	00 97       	sbiw	r24, 0x00	; 0
    327a:	69 f7       	brne	.-38     	; 0x3256 <SevSeg_voidMulBCD+0x1c8>
    327c:	14 c0       	rjmp	.+40     	; 0x32a6 <SevSeg_voidMulBCD+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    327e:	6b a1       	ldd	r22, Y+35	; 0x23
    3280:	7c a1       	ldd	r23, Y+36	; 0x24
    3282:	8d a1       	ldd	r24, Y+37	; 0x25
    3284:	9e a1       	ldd	r25, Y+38	; 0x26
    3286:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    328a:	dc 01       	movw	r26, r24
    328c:	cb 01       	movw	r24, r22
    328e:	9a a3       	std	Y+34, r25	; 0x22
    3290:	89 a3       	std	Y+33, r24	; 0x21
    3292:	89 a1       	ldd	r24, Y+33	; 0x21
    3294:	9a a1       	ldd	r25, Y+34	; 0x22
    3296:	9e 8f       	std	Y+30, r25	; 0x1e
    3298:	8d 8f       	std	Y+29, r24	; 0x1d
    329a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    329c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    329e:	01 97       	sbiw	r24, 0x01	; 1
    32a0:	f1 f7       	brne	.-4      	; 0x329e <SevSeg_voidMulBCD+0x210>
    32a2:	9e 8f       	std	Y+30, r25	; 0x1e
    32a4:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(Sev_DELAY);
						DIO_voidSetPortValue(Sev_PORT,MulBCDArr[Local_Counter2]);
    32a6:	8c a9       	ldd	r24, Y+52	; 0x34
    32a8:	9d a9       	ldd	r25, Y+53	; 0x35
    32aa:	ae a9       	ldd	r26, Y+54	; 0x36
    32ac:	bf a9       	ldd	r27, Y+55	; 0x37
    32ae:	fc 01       	movw	r30, r24
    32b0:	e2 5f       	subi	r30, 0xF2	; 242
    32b2:	fd 4f       	sbci	r31, 0xFD	; 253
    32b4:	90 81       	ld	r25, Z
    32b6:	82 e0       	ldi	r24, 0x02	; 2
    32b8:	69 2f       	mov	r22, r25
    32ba:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <DIO_voidSetPortValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN6, High);
    32be:	82 e0       	ldi	r24, 0x02	; 2
    32c0:	66 e0       	ldi	r22, 0x06	; 6
    32c2:	41 e0       	ldi	r20, 0x01	; 1
    32c4:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN5, Low);
    32c8:	82 e0       	ldi	r24, 0x02	; 2
    32ca:	65 e0       	ldi	r22, 0x05	; 5
    32cc:	40 e0       	ldi	r20, 0x00	; 0
    32ce:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
    32d2:	80 e0       	ldi	r24, 0x00	; 0
    32d4:	90 e0       	ldi	r25, 0x00	; 0
    32d6:	a0 e2       	ldi	r26, 0x20	; 32
    32d8:	b1 e4       	ldi	r27, 0x41	; 65
    32da:	89 8f       	std	Y+25, r24	; 0x19
    32dc:	9a 8f       	std	Y+26, r25	; 0x1a
    32de:	ab 8f       	std	Y+27, r26	; 0x1b
    32e0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32e2:	69 8d       	ldd	r22, Y+25	; 0x19
    32e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32ea:	20 e0       	ldi	r18, 0x00	; 0
    32ec:	30 e0       	ldi	r19, 0x00	; 0
    32ee:	4a e7       	ldi	r20, 0x7A	; 122
    32f0:	55 e4       	ldi	r21, 0x45	; 69
    32f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f6:	dc 01       	movw	r26, r24
    32f8:	cb 01       	movw	r24, r22
    32fa:	8d 8b       	std	Y+21, r24	; 0x15
    32fc:	9e 8b       	std	Y+22, r25	; 0x16
    32fe:	af 8b       	std	Y+23, r26	; 0x17
    3300:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3302:	6d 89       	ldd	r22, Y+21	; 0x15
    3304:	7e 89       	ldd	r23, Y+22	; 0x16
    3306:	8f 89       	ldd	r24, Y+23	; 0x17
    3308:	98 8d       	ldd	r25, Y+24	; 0x18
    330a:	20 e0       	ldi	r18, 0x00	; 0
    330c:	30 e0       	ldi	r19, 0x00	; 0
    330e:	40 e8       	ldi	r20, 0x80	; 128
    3310:	5f e3       	ldi	r21, 0x3F	; 63
    3312:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3316:	88 23       	and	r24, r24
    3318:	2c f4       	brge	.+10     	; 0x3324 <SevSeg_voidMulBCD+0x296>
		__ticks = 1;
    331a:	81 e0       	ldi	r24, 0x01	; 1
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	9c 8b       	std	Y+20, r25	; 0x14
    3320:	8b 8b       	std	Y+19, r24	; 0x13
    3322:	3f c0       	rjmp	.+126    	; 0x33a2 <SevSeg_voidMulBCD+0x314>
	else if (__tmp > 65535)
    3324:	6d 89       	ldd	r22, Y+21	; 0x15
    3326:	7e 89       	ldd	r23, Y+22	; 0x16
    3328:	8f 89       	ldd	r24, Y+23	; 0x17
    332a:	98 8d       	ldd	r25, Y+24	; 0x18
    332c:	20 e0       	ldi	r18, 0x00	; 0
    332e:	3f ef       	ldi	r19, 0xFF	; 255
    3330:	4f e7       	ldi	r20, 0x7F	; 127
    3332:	57 e4       	ldi	r21, 0x47	; 71
    3334:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3338:	18 16       	cp	r1, r24
    333a:	4c f5       	brge	.+82     	; 0x338e <SevSeg_voidMulBCD+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    333c:	69 8d       	ldd	r22, Y+25	; 0x19
    333e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3340:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3342:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3344:	20 e0       	ldi	r18, 0x00	; 0
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	40 e2       	ldi	r20, 0x20	; 32
    334a:	51 e4       	ldi	r21, 0x41	; 65
    334c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3350:	dc 01       	movw	r26, r24
    3352:	cb 01       	movw	r24, r22
    3354:	bc 01       	movw	r22, r24
    3356:	cd 01       	movw	r24, r26
    3358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    335c:	dc 01       	movw	r26, r24
    335e:	cb 01       	movw	r24, r22
    3360:	9c 8b       	std	Y+20, r25	; 0x14
    3362:	8b 8b       	std	Y+19, r24	; 0x13
    3364:	0f c0       	rjmp	.+30     	; 0x3384 <SevSeg_voidMulBCD+0x2f6>
    3366:	80 e9       	ldi	r24, 0x90	; 144
    3368:	91 e0       	ldi	r25, 0x01	; 1
    336a:	9a 8b       	std	Y+18, r25	; 0x12
    336c:	89 8b       	std	Y+17, r24	; 0x11
    336e:	89 89       	ldd	r24, Y+17	; 0x11
    3370:	9a 89       	ldd	r25, Y+18	; 0x12
    3372:	01 97       	sbiw	r24, 0x01	; 1
    3374:	f1 f7       	brne	.-4      	; 0x3372 <SevSeg_voidMulBCD+0x2e4>
    3376:	9a 8b       	std	Y+18, r25	; 0x12
    3378:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    337a:	8b 89       	ldd	r24, Y+19	; 0x13
    337c:	9c 89       	ldd	r25, Y+20	; 0x14
    337e:	01 97       	sbiw	r24, 0x01	; 1
    3380:	9c 8b       	std	Y+20, r25	; 0x14
    3382:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3384:	8b 89       	ldd	r24, Y+19	; 0x13
    3386:	9c 89       	ldd	r25, Y+20	; 0x14
    3388:	00 97       	sbiw	r24, 0x00	; 0
    338a:	69 f7       	brne	.-38     	; 0x3366 <SevSeg_voidMulBCD+0x2d8>
    338c:	14 c0       	rjmp	.+40     	; 0x33b6 <SevSeg_voidMulBCD+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    338e:	6d 89       	ldd	r22, Y+21	; 0x15
    3390:	7e 89       	ldd	r23, Y+22	; 0x16
    3392:	8f 89       	ldd	r24, Y+23	; 0x17
    3394:	98 8d       	ldd	r25, Y+24	; 0x18
    3396:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    339a:	dc 01       	movw	r26, r24
    339c:	cb 01       	movw	r24, r22
    339e:	9c 8b       	std	Y+20, r25	; 0x14
    33a0:	8b 8b       	std	Y+19, r24	; 0x13
    33a2:	8b 89       	ldd	r24, Y+19	; 0x13
    33a4:	9c 89       	ldd	r25, Y+20	; 0x14
    33a6:	98 8b       	std	Y+16, r25	; 0x10
    33a8:	8f 87       	std	Y+15, r24	; 0x0f
    33aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    33ac:	98 89       	ldd	r25, Y+16	; 0x10
    33ae:	01 97       	sbiw	r24, 0x01	; 1
    33b0:	f1 f7       	brne	.-4      	; 0x33ae <SevSeg_voidMulBCD+0x320>
    33b2:	98 8b       	std	Y+16, r25	; 0x10
    33b4:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(Sev_DELAY);
						count++;
    33b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    33b8:	98 a9       	ldd	r25, Y+48	; 0x30
    33ba:	a9 a9       	ldd	r26, Y+49	; 0x31
    33bc:	ba a9       	ldd	r27, Y+50	; 0x32
    33be:	01 96       	adiw	r24, 0x01	; 1
    33c0:	a1 1d       	adc	r26, r1
    33c2:	b1 1d       	adc	r27, r1
    33c4:	8f a7       	std	Y+47, r24	; 0x2f
    33c6:	98 ab       	std	Y+48, r25	; 0x30
    33c8:	a9 ab       	std	Y+49, r26	; 0x31
    33ca:	ba ab       	std	Y+50, r27	; 0x32

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
					count = 0;
					while(count< delay){
    33cc:	2f a5       	ldd	r18, Y+47	; 0x2f
    33ce:	38 a9       	ldd	r19, Y+48	; 0x30
    33d0:	49 a9       	ldd	r20, Y+49	; 0x31
    33d2:	5a a9       	ldd	r21, Y+50	; 0x32
    33d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    33d6:	9c a5       	ldd	r25, Y+44	; 0x2c
    33d8:	ad a5       	ldd	r26, Y+45	; 0x2d
    33da:	be a5       	ldd	r27, Y+46	; 0x2e
    33dc:	28 17       	cp	r18, r24
    33de:	39 07       	cpc	r19, r25
    33e0:	4a 07       	cpc	r20, r26
    33e2:	5b 07       	cpc	r21, r27
    33e4:	08 f4       	brcc	.+2      	; 0x33e8 <SevSeg_voidMulBCD+0x35a>
    33e6:	d7 ce       	rjmp	.-594    	; 0x3196 <SevSeg_voidMulBCD+0x108>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN5, Low);
						_delay_ms(Sev_DELAY);
						count++;
					}
					//DIO_voidSetPortValue(Sev_PORT,num);
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    33e8:	8c ad       	ldd	r24, Y+60	; 0x3c
    33ea:	28 2f       	mov	r18, r24
    33ec:	33 27       	eor	r19, r19
    33ee:	27 fd       	sbrc	r18, 7
    33f0:	30 95       	com	r19
    33f2:	43 2f       	mov	r20, r19
    33f4:	53 2f       	mov	r21, r19
    33f6:	8c a9       	ldd	r24, Y+52	; 0x34
    33f8:	9d a9       	ldd	r25, Y+53	; 0x35
    33fa:	ae a9       	ldd	r26, Y+54	; 0x36
    33fc:	bf a9       	ldd	r27, Y+55	; 0x37
    33fe:	28 17       	cp	r18, r24
    3400:	39 07       	cpc	r19, r25
    3402:	4a 07       	cpc	r20, r26
    3404:	5b 07       	cpc	r21, r27
    3406:	89 f4       	brne	.+34     	; 0x342a <SevSeg_voidMulBCD+0x39c>
    3408:	8d ad       	ldd	r24, Y+61	; 0x3d
    340a:	28 2f       	mov	r18, r24
    340c:	33 27       	eor	r19, r19
    340e:	27 fd       	sbrc	r18, 7
    3410:	30 95       	com	r19
    3412:	43 2f       	mov	r20, r19
    3414:	53 2f       	mov	r21, r19
    3416:	88 ad       	ldd	r24, Y+56	; 0x38
    3418:	99 ad       	ldd	r25, Y+57	; 0x39
    341a:	aa ad       	ldd	r26, Y+58	; 0x3a
    341c:	bb ad       	ldd	r27, Y+59	; 0x3b
    341e:	28 17       	cp	r18, r24
    3420:	39 07       	cpc	r19, r25
    3422:	4a 07       	cpc	r20, r26
    3424:	5b 07       	cpc	r21, r27
    3426:	09 f4       	brne	.+2      	; 0x342a <SevSeg_voidMulBCD+0x39c>
    3428:	31 c1       	rjmp	.+610    	; 0x368c <SevSeg_voidMulBCD+0x5fe>
	u32 delay = 1000 / (Sev_DELAY * 2);
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    342a:	8c a9       	ldd	r24, Y+52	; 0x34
    342c:	9d a9       	ldd	r25, Y+53	; 0x35
    342e:	ae a9       	ldd	r26, Y+54	; 0x36
    3430:	bf a9       	ldd	r27, Y+55	; 0x37
    3432:	01 96       	adiw	r24, 0x01	; 1
    3434:	a1 1d       	adc	r26, r1
    3436:	b1 1d       	adc	r27, r1
    3438:	8c ab       	std	Y+52, r24	; 0x34
    343a:	9d ab       	std	Y+53, r25	; 0x35
    343c:	ae ab       	std	Y+54, r26	; 0x36
    343e:	bf ab       	std	Y+55, r27	; 0x37
    3440:	8c a9       	ldd	r24, Y+52	; 0x34
    3442:	9d a9       	ldd	r25, Y+53	; 0x35
    3444:	ae a9       	ldd	r26, Y+54	; 0x36
    3446:	bf a9       	ldd	r27, Y+55	; 0x37
    3448:	8a 30       	cpi	r24, 0x0A	; 10
    344a:	91 05       	cpc	r25, r1
    344c:	a1 05       	cpc	r26, r1
    344e:	b1 05       	cpc	r27, r1
    3450:	0c f4       	brge	.+2      	; 0x3454 <SevSeg_voidMulBCD+0x3c6>
    3452:	9c ce       	rjmp	.-712    	; 0x318c <SevSeg_voidMulBCD+0xfe>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 0;
    3454:	1e ae       	std	Y+62, r1	; 0x3e
	u32 count = 0;
	u32 delay = 1000 / (Sev_DELAY * 2);
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    3456:	88 ad       	ldd	r24, Y+56	; 0x38
    3458:	99 ad       	ldd	r25, Y+57	; 0x39
    345a:	aa ad       	ldd	r26, Y+58	; 0x3a
    345c:	bb ad       	ldd	r27, Y+59	; 0x3b
    345e:	01 96       	adiw	r24, 0x01	; 1
    3460:	a1 1d       	adc	r26, r1
    3462:	b1 1d       	adc	r27, r1
    3464:	88 af       	std	Y+56, r24	; 0x38
    3466:	99 af       	std	Y+57, r25	; 0x39
    3468:	aa af       	std	Y+58, r26	; 0x3a
    346a:	bb af       	std	Y+59, r27	; 0x3b
    346c:	8d ad       	ldd	r24, Y+61	; 0x3d
    346e:	28 2f       	mov	r18, r24
    3470:	33 27       	eor	r19, r19
    3472:	27 fd       	sbrc	r18, 7
    3474:	30 95       	com	r19
    3476:	43 2f       	mov	r20, r19
    3478:	53 2f       	mov	r21, r19
    347a:	88 ad       	ldd	r24, Y+56	; 0x38
    347c:	99 ad       	ldd	r25, Y+57	; 0x39
    347e:	aa ad       	ldd	r26, Y+58	; 0x3a
    3480:	bb ad       	ldd	r27, Y+59	; 0x3b
    3482:	28 17       	cp	r18, r24
    3484:	39 07       	cpc	r19, r25
    3486:	4a 07       	cpc	r20, r26
    3488:	5b 07       	cpc	r21, r27
    348a:	0c f0       	brlt	.+2      	; 0x348e <SevSeg_voidMulBCD+0x400>
    348c:	74 ce       	rjmp	.-792    	; 0x3176 <SevSeg_voidMulBCD+0xe8>
    348e:	fe c0       	rjmp	.+508    	; 0x368c <SevSeg_voidMulBCD+0x5fe>

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    3490:	8f ad       	ldd	r24, Y+63	; 0x3f
    3492:	99 27       	eor	r25, r25
    3494:	87 fd       	sbrc	r24, 7
    3496:	90 95       	com	r25
    3498:	a9 2f       	mov	r26, r25
    349a:	b9 2f       	mov	r27, r25
    349c:	88 af       	std	Y+56, r24	; 0x38
    349e:	99 af       	std	Y+57, r25	; 0x39
    34a0:	aa af       	std	Y+58, r26	; 0x3a
    34a2:	bb af       	std	Y+59, r27	; 0x3b
    34a4:	e2 c0       	rjmp	.+452    	; 0x366a <SevSeg_voidMulBCD+0x5dc>

				num &= 0x0F;
    34a6:	8b a9       	ldd	r24, Y+51	; 0x33
    34a8:	8f 70       	andi	r24, 0x0F	; 15
    34aa:	8b ab       	std	Y+51, r24	; 0x33
				num |= (Local_Counter1 << 4);
    34ac:	88 ad       	ldd	r24, Y+56	; 0x38
    34ae:	99 ad       	ldd	r25, Y+57	; 0x39
    34b0:	aa ad       	ldd	r26, Y+58	; 0x3a
    34b2:	bb ad       	ldd	r27, Y+59	; 0x3b
    34b4:	88 0f       	add	r24, r24
    34b6:	99 1f       	adc	r25, r25
    34b8:	aa 1f       	adc	r26, r26
    34ba:	bb 1f       	adc	r27, r27
    34bc:	88 0f       	add	r24, r24
    34be:	99 1f       	adc	r25, r25
    34c0:	aa 1f       	adc	r26, r26
    34c2:	bb 1f       	adc	r27, r27
    34c4:	88 0f       	add	r24, r24
    34c6:	99 1f       	adc	r25, r25
    34c8:	aa 1f       	adc	r26, r26
    34ca:	bb 1f       	adc	r27, r27
    34cc:	88 0f       	add	r24, r24
    34ce:	99 1f       	adc	r25, r25
    34d0:	aa 1f       	adc	r26, r26
    34d2:	bb 1f       	adc	r27, r27
    34d4:	98 2f       	mov	r25, r24
    34d6:	8b a9       	ldd	r24, Y+51	; 0x33
    34d8:	89 2b       	or	r24, r25
    34da:	8b ab       	std	Y+51, r24	; 0x33

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    34dc:	8e ad       	ldd	r24, Y+62	; 0x3e
    34de:	99 27       	eor	r25, r25
    34e0:	87 fd       	sbrc	r24, 7
    34e2:	90 95       	com	r25
    34e4:	a9 2f       	mov	r26, r25
    34e6:	b9 2f       	mov	r27, r25
    34e8:	8c ab       	std	Y+52, r24	; 0x34
    34ea:	9d ab       	std	Y+53, r25	; 0x35
    34ec:	ae ab       	std	Y+54, r26	; 0x36
    34ee:	bf ab       	std	Y+55, r27	; 0x37
    34f0:	a8 c0       	rjmp	.+336    	; 0x3642 <SevSeg_voidMulBCD+0x5b4>
					num &= 0xF0;
    34f2:	8b a9       	ldd	r24, Y+51	; 0x33
    34f4:	80 7f       	andi	r24, 0xF0	; 240
    34f6:	8b ab       	std	Y+51, r24	; 0x33
					num |= Local_Counter2;
    34f8:	9c a9       	ldd	r25, Y+52	; 0x34
    34fa:	8b a9       	ldd	r24, Y+51	; 0x33
    34fc:	89 2b       	or	r24, r25
    34fe:	8b ab       	std	Y+51, r24	; 0x33
    3500:	80 e0       	ldi	r24, 0x00	; 0
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	a0 e2       	ldi	r26, 0x20	; 32
    3506:	b1 e4       	ldi	r27, 0x41	; 65
    3508:	8b 87       	std	Y+11, r24	; 0x0b
    350a:	9c 87       	std	Y+12, r25	; 0x0c
    350c:	ad 87       	std	Y+13, r26	; 0x0d
    350e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3510:	6b 85       	ldd	r22, Y+11	; 0x0b
    3512:	7c 85       	ldd	r23, Y+12	; 0x0c
    3514:	8d 85       	ldd	r24, Y+13	; 0x0d
    3516:	9e 85       	ldd	r25, Y+14	; 0x0e
    3518:	20 e0       	ldi	r18, 0x00	; 0
    351a:	30 e0       	ldi	r19, 0x00	; 0
    351c:	4a e7       	ldi	r20, 0x7A	; 122
    351e:	55 e4       	ldi	r21, 0x45	; 69
    3520:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3524:	dc 01       	movw	r26, r24
    3526:	cb 01       	movw	r24, r22
    3528:	8f 83       	std	Y+7, r24	; 0x07
    352a:	98 87       	std	Y+8, r25	; 0x08
    352c:	a9 87       	std	Y+9, r26	; 0x09
    352e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3530:	6f 81       	ldd	r22, Y+7	; 0x07
    3532:	78 85       	ldd	r23, Y+8	; 0x08
    3534:	89 85       	ldd	r24, Y+9	; 0x09
    3536:	9a 85       	ldd	r25, Y+10	; 0x0a
    3538:	20 e0       	ldi	r18, 0x00	; 0
    353a:	30 e0       	ldi	r19, 0x00	; 0
    353c:	40 e8       	ldi	r20, 0x80	; 128
    353e:	5f e3       	ldi	r21, 0x3F	; 63
    3540:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3544:	88 23       	and	r24, r24
    3546:	2c f4       	brge	.+10     	; 0x3552 <SevSeg_voidMulBCD+0x4c4>
		__ticks = 1;
    3548:	81 e0       	ldi	r24, 0x01	; 1
    354a:	90 e0       	ldi	r25, 0x00	; 0
    354c:	9e 83       	std	Y+6, r25	; 0x06
    354e:	8d 83       	std	Y+5, r24	; 0x05
    3550:	3f c0       	rjmp	.+126    	; 0x35d0 <SevSeg_voidMulBCD+0x542>
	else if (__tmp > 65535)
    3552:	6f 81       	ldd	r22, Y+7	; 0x07
    3554:	78 85       	ldd	r23, Y+8	; 0x08
    3556:	89 85       	ldd	r24, Y+9	; 0x09
    3558:	9a 85       	ldd	r25, Y+10	; 0x0a
    355a:	20 e0       	ldi	r18, 0x00	; 0
    355c:	3f ef       	ldi	r19, 0xFF	; 255
    355e:	4f e7       	ldi	r20, 0x7F	; 127
    3560:	57 e4       	ldi	r21, 0x47	; 71
    3562:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3566:	18 16       	cp	r1, r24
    3568:	4c f5       	brge	.+82     	; 0x35bc <SevSeg_voidMulBCD+0x52e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    356a:	6b 85       	ldd	r22, Y+11	; 0x0b
    356c:	7c 85       	ldd	r23, Y+12	; 0x0c
    356e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3570:	9e 85       	ldd	r25, Y+14	; 0x0e
    3572:	20 e0       	ldi	r18, 0x00	; 0
    3574:	30 e0       	ldi	r19, 0x00	; 0
    3576:	40 e2       	ldi	r20, 0x20	; 32
    3578:	51 e4       	ldi	r21, 0x41	; 65
    357a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    357e:	dc 01       	movw	r26, r24
    3580:	cb 01       	movw	r24, r22
    3582:	bc 01       	movw	r22, r24
    3584:	cd 01       	movw	r24, r26
    3586:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    358a:	dc 01       	movw	r26, r24
    358c:	cb 01       	movw	r24, r22
    358e:	9e 83       	std	Y+6, r25	; 0x06
    3590:	8d 83       	std	Y+5, r24	; 0x05
    3592:	0f c0       	rjmp	.+30     	; 0x35b2 <SevSeg_voidMulBCD+0x524>
    3594:	80 e9       	ldi	r24, 0x90	; 144
    3596:	91 e0       	ldi	r25, 0x01	; 1
    3598:	9c 83       	std	Y+4, r25	; 0x04
    359a:	8b 83       	std	Y+3, r24	; 0x03
    359c:	8b 81       	ldd	r24, Y+3	; 0x03
    359e:	9c 81       	ldd	r25, Y+4	; 0x04
    35a0:	01 97       	sbiw	r24, 0x01	; 1
    35a2:	f1 f7       	brne	.-4      	; 0x35a0 <SevSeg_voidMulBCD+0x512>
    35a4:	9c 83       	std	Y+4, r25	; 0x04
    35a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35a8:	8d 81       	ldd	r24, Y+5	; 0x05
    35aa:	9e 81       	ldd	r25, Y+6	; 0x06
    35ac:	01 97       	sbiw	r24, 0x01	; 1
    35ae:	9e 83       	std	Y+6, r25	; 0x06
    35b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35b2:	8d 81       	ldd	r24, Y+5	; 0x05
    35b4:	9e 81       	ldd	r25, Y+6	; 0x06
    35b6:	00 97       	sbiw	r24, 0x00	; 0
    35b8:	69 f7       	brne	.-38     	; 0x3594 <SevSeg_voidMulBCD+0x506>
    35ba:	14 c0       	rjmp	.+40     	; 0x35e4 <SevSeg_voidMulBCD+0x556>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35bc:	6f 81       	ldd	r22, Y+7	; 0x07
    35be:	78 85       	ldd	r23, Y+8	; 0x08
    35c0:	89 85       	ldd	r24, Y+9	; 0x09
    35c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35c8:	dc 01       	movw	r26, r24
    35ca:	cb 01       	movw	r24, r22
    35cc:	9e 83       	std	Y+6, r25	; 0x06
    35ce:	8d 83       	std	Y+5, r24	; 0x05
    35d0:	8d 81       	ldd	r24, Y+5	; 0x05
    35d2:	9e 81       	ldd	r25, Y+6	; 0x06
    35d4:	9a 83       	std	Y+2, r25	; 0x02
    35d6:	89 83       	std	Y+1, r24	; 0x01
    35d8:	89 81       	ldd	r24, Y+1	; 0x01
    35da:	9a 81       	ldd	r25, Y+2	; 0x02
    35dc:	01 97       	sbiw	r24, 0x01	; 1
    35de:	f1 f7       	brne	.-4      	; 0x35dc <SevSeg_voidMulBCD+0x54e>
    35e0:	9a 83       	std	Y+2, r25	; 0x02
    35e2:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(Sev_DELAY);
					DIO_voidSetPortValue(Sev_PORT,num);
    35e4:	82 e0       	ldi	r24, 0x02	; 2
    35e6:	6b a9       	ldd	r22, Y+51	; 0x33
    35e8:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <DIO_voidSetPortValue>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    35ec:	8c ad       	ldd	r24, Y+60	; 0x3c
    35ee:	28 2f       	mov	r18, r24
    35f0:	33 27       	eor	r19, r19
    35f2:	27 fd       	sbrc	r18, 7
    35f4:	30 95       	com	r19
    35f6:	43 2f       	mov	r20, r19
    35f8:	53 2f       	mov	r21, r19
    35fa:	8c a9       	ldd	r24, Y+52	; 0x34
    35fc:	9d a9       	ldd	r25, Y+53	; 0x35
    35fe:	ae a9       	ldd	r26, Y+54	; 0x36
    3600:	bf a9       	ldd	r27, Y+55	; 0x37
    3602:	28 17       	cp	r18, r24
    3604:	39 07       	cpc	r19, r25
    3606:	4a 07       	cpc	r20, r26
    3608:	5b 07       	cpc	r21, r27
    360a:	81 f4       	brne	.+32     	; 0x362c <SevSeg_voidMulBCD+0x59e>
    360c:	8d ad       	ldd	r24, Y+61	; 0x3d
    360e:	28 2f       	mov	r18, r24
    3610:	33 27       	eor	r19, r19
    3612:	27 fd       	sbrc	r18, 7
    3614:	30 95       	com	r19
    3616:	43 2f       	mov	r20, r19
    3618:	53 2f       	mov	r21, r19
    361a:	88 ad       	ldd	r24, Y+56	; 0x38
    361c:	99 ad       	ldd	r25, Y+57	; 0x39
    361e:	aa ad       	ldd	r26, Y+58	; 0x3a
    3620:	bb ad       	ldd	r27, Y+59	; 0x3b
    3622:	28 17       	cp	r18, r24
    3624:	39 07       	cpc	r19, r25
    3626:	4a 07       	cpc	r20, r26
    3628:	5b 07       	cpc	r21, r27
    362a:	81 f1       	breq	.+96     	; 0x368c <SevSeg_voidMulBCD+0x5fe>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){

				num &= 0x0F;
				num |= (Local_Counter1 << 4);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    362c:	8c a9       	ldd	r24, Y+52	; 0x34
    362e:	9d a9       	ldd	r25, Y+53	; 0x35
    3630:	ae a9       	ldd	r26, Y+54	; 0x36
    3632:	bf a9       	ldd	r27, Y+55	; 0x37
    3634:	01 97       	sbiw	r24, 0x01	; 1
    3636:	a1 09       	sbc	r26, r1
    3638:	b1 09       	sbc	r27, r1
    363a:	8c ab       	std	Y+52, r24	; 0x34
    363c:	9d ab       	std	Y+53, r25	; 0x35
    363e:	ae ab       	std	Y+54, r26	; 0x36
    3640:	bf ab       	std	Y+55, r27	; 0x37
    3642:	8c a9       	ldd	r24, Y+52	; 0x34
    3644:	9d a9       	ldd	r25, Y+53	; 0x35
    3646:	ae a9       	ldd	r26, Y+54	; 0x36
    3648:	bf a9       	ldd	r27, Y+55	; 0x37
    364a:	bb 23       	and	r27, r27
    364c:	0c f0       	brlt	.+2      	; 0x3650 <SevSeg_voidMulBCD+0x5c2>
    364e:	51 cf       	rjmp	.-350    	; 0x34f2 <SevSeg_voidMulBCD+0x464>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}
				Local_SevSegOneStart = 9;
    3650:	89 e0       	ldi	r24, 0x09	; 9
    3652:	8e af       	std	Y+62, r24	; 0x3e

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    3654:	88 ad       	ldd	r24, Y+56	; 0x38
    3656:	99 ad       	ldd	r25, Y+57	; 0x39
    3658:	aa ad       	ldd	r26, Y+58	; 0x3a
    365a:	bb ad       	ldd	r27, Y+59	; 0x3b
    365c:	01 97       	sbiw	r24, 0x01	; 1
    365e:	a1 09       	sbc	r26, r1
    3660:	b1 09       	sbc	r27, r1
    3662:	88 af       	std	Y+56, r24	; 0x38
    3664:	99 af       	std	Y+57, r25	; 0x39
    3666:	aa af       	std	Y+58, r26	; 0x3a
    3668:	bb af       	std	Y+59, r27	; 0x3b
    366a:	8d ad       	ldd	r24, Y+61	; 0x3d
    366c:	28 2f       	mov	r18, r24
    366e:	33 27       	eor	r19, r19
    3670:	27 fd       	sbrc	r18, 7
    3672:	30 95       	com	r19
    3674:	43 2f       	mov	r20, r19
    3676:	53 2f       	mov	r21, r19
    3678:	88 ad       	ldd	r24, Y+56	; 0x38
    367a:	99 ad       	ldd	r25, Y+57	; 0x39
    367c:	aa ad       	ldd	r26, Y+58	; 0x3a
    367e:	bb ad       	ldd	r27, Y+59	; 0x3b
    3680:	82 17       	cp	r24, r18
    3682:	93 07       	cpc	r25, r19
    3684:	a4 07       	cpc	r26, r20
    3686:	b5 07       	cpc	r27, r21
    3688:	0c f0       	brlt	.+2      	; 0x368c <SevSeg_voidMulBCD+0x5fe>
    368a:	0d cf       	rjmp	.-486    	; 0x34a6 <SevSeg_voidMulBCD+0x418>
				}
				Local_SevSegOneStart = 9;
			}
		}
	}
}
    368c:	cf 5b       	subi	r28, 0xBF	; 191
    368e:	df 4f       	sbci	r29, 0xFF	; 255
    3690:	0f b6       	in	r0, 0x3f	; 63
    3692:	f8 94       	cli
    3694:	de bf       	out	0x3e, r29	; 62
    3696:	0f be       	out	0x3f, r0	; 63
    3698:	cd bf       	out	0x3d, r28	; 61
    369a:	cf 91       	pop	r28
    369c:	df 91       	pop	r29
    369e:	08 95       	ret

000036a0 <LCD_voidInit>:
#include "../Header/LCD_Interface.h"
#include "../../../MCAL/DIO/Header/DIO_Interface.h"
#include "util/delay.h"


void LCD_voidInit(){
    36a0:	0f 93       	push	r16
    36a2:	1f 93       	push	r17
    36a4:	df 93       	push	r29
    36a6:	cf 93       	push	r28
    36a8:	cd b7       	in	r28, 0x3d	; 61
    36aa:	de b7       	in	r29, 0x3e	; 62
    36ac:	cc 58       	subi	r28, 0x8C	; 140
    36ae:	d0 40       	sbci	r29, 0x00	; 0
    36b0:	0f b6       	in	r0, 0x3f	; 63
    36b2:	f8 94       	cli
    36b4:	de bf       	out	0x3e, r29	; 62
    36b6:	0f be       	out	0x3f, r0	; 63
    36b8:	cd bf       	out	0x3d, r28	; 61
    36ba:	fe 01       	movw	r30, r28
    36bc:	e7 57       	subi	r30, 0x77	; 119
    36be:	ff 4f       	sbci	r31, 0xFF	; 255
    36c0:	80 e0       	ldi	r24, 0x00	; 0
    36c2:	90 e0       	ldi	r25, 0x00	; 0
    36c4:	ac e0       	ldi	r26, 0x0C	; 12
    36c6:	b2 e4       	ldi	r27, 0x42	; 66
    36c8:	80 83       	st	Z, r24
    36ca:	91 83       	std	Z+1, r25	; 0x01
    36cc:	a2 83       	std	Z+2, r26	; 0x02
    36ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36d0:	8e 01       	movw	r16, r28
    36d2:	0b 57       	subi	r16, 0x7B	; 123
    36d4:	1f 4f       	sbci	r17, 0xFF	; 255
    36d6:	fe 01       	movw	r30, r28
    36d8:	e7 57       	subi	r30, 0x77	; 119
    36da:	ff 4f       	sbci	r31, 0xFF	; 255
    36dc:	60 81       	ld	r22, Z
    36de:	71 81       	ldd	r23, Z+1	; 0x01
    36e0:	82 81       	ldd	r24, Z+2	; 0x02
    36e2:	93 81       	ldd	r25, Z+3	; 0x03
    36e4:	20 e0       	ldi	r18, 0x00	; 0
    36e6:	30 e0       	ldi	r19, 0x00	; 0
    36e8:	4a e7       	ldi	r20, 0x7A	; 122
    36ea:	55 e4       	ldi	r21, 0x45	; 69
    36ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36f0:	dc 01       	movw	r26, r24
    36f2:	cb 01       	movw	r24, r22
    36f4:	f8 01       	movw	r30, r16
    36f6:	80 83       	st	Z, r24
    36f8:	91 83       	std	Z+1, r25	; 0x01
    36fa:	a2 83       	std	Z+2, r26	; 0x02
    36fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36fe:	fe 01       	movw	r30, r28
    3700:	eb 57       	subi	r30, 0x7B	; 123
    3702:	ff 4f       	sbci	r31, 0xFF	; 255
    3704:	60 81       	ld	r22, Z
    3706:	71 81       	ldd	r23, Z+1	; 0x01
    3708:	82 81       	ldd	r24, Z+2	; 0x02
    370a:	93 81       	ldd	r25, Z+3	; 0x03
    370c:	20 e0       	ldi	r18, 0x00	; 0
    370e:	30 e0       	ldi	r19, 0x00	; 0
    3710:	40 e8       	ldi	r20, 0x80	; 128
    3712:	5f e3       	ldi	r21, 0x3F	; 63
    3714:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3718:	88 23       	and	r24, r24
    371a:	44 f4       	brge	.+16     	; 0x372c <LCD_voidInit+0x8c>
		__ticks = 1;
    371c:	fe 01       	movw	r30, r28
    371e:	ed 57       	subi	r30, 0x7D	; 125
    3720:	ff 4f       	sbci	r31, 0xFF	; 255
    3722:	81 e0       	ldi	r24, 0x01	; 1
    3724:	90 e0       	ldi	r25, 0x00	; 0
    3726:	91 83       	std	Z+1, r25	; 0x01
    3728:	80 83       	st	Z, r24
    372a:	64 c0       	rjmp	.+200    	; 0x37f4 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    372c:	fe 01       	movw	r30, r28
    372e:	eb 57       	subi	r30, 0x7B	; 123
    3730:	ff 4f       	sbci	r31, 0xFF	; 255
    3732:	60 81       	ld	r22, Z
    3734:	71 81       	ldd	r23, Z+1	; 0x01
    3736:	82 81       	ldd	r24, Z+2	; 0x02
    3738:	93 81       	ldd	r25, Z+3	; 0x03
    373a:	20 e0       	ldi	r18, 0x00	; 0
    373c:	3f ef       	ldi	r19, 0xFF	; 255
    373e:	4f e7       	ldi	r20, 0x7F	; 127
    3740:	57 e4       	ldi	r21, 0x47	; 71
    3742:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3746:	18 16       	cp	r1, r24
    3748:	0c f0       	brlt	.+2      	; 0x374c <LCD_voidInit+0xac>
    374a:	43 c0       	rjmp	.+134    	; 0x37d2 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    374c:	fe 01       	movw	r30, r28
    374e:	e7 57       	subi	r30, 0x77	; 119
    3750:	ff 4f       	sbci	r31, 0xFF	; 255
    3752:	60 81       	ld	r22, Z
    3754:	71 81       	ldd	r23, Z+1	; 0x01
    3756:	82 81       	ldd	r24, Z+2	; 0x02
    3758:	93 81       	ldd	r25, Z+3	; 0x03
    375a:	20 e0       	ldi	r18, 0x00	; 0
    375c:	30 e0       	ldi	r19, 0x00	; 0
    375e:	40 e2       	ldi	r20, 0x20	; 32
    3760:	51 e4       	ldi	r21, 0x41	; 65
    3762:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3766:	dc 01       	movw	r26, r24
    3768:	cb 01       	movw	r24, r22
    376a:	8e 01       	movw	r16, r28
    376c:	0d 57       	subi	r16, 0x7D	; 125
    376e:	1f 4f       	sbci	r17, 0xFF	; 255
    3770:	bc 01       	movw	r22, r24
    3772:	cd 01       	movw	r24, r26
    3774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3778:	dc 01       	movw	r26, r24
    377a:	cb 01       	movw	r24, r22
    377c:	f8 01       	movw	r30, r16
    377e:	91 83       	std	Z+1, r25	; 0x01
    3780:	80 83       	st	Z, r24
    3782:	1f c0       	rjmp	.+62     	; 0x37c2 <LCD_voidInit+0x122>
    3784:	fe 01       	movw	r30, r28
    3786:	ef 57       	subi	r30, 0x7F	; 127
    3788:	ff 4f       	sbci	r31, 0xFF	; 255
    378a:	80 e9       	ldi	r24, 0x90	; 144
    378c:	91 e0       	ldi	r25, 0x01	; 1
    378e:	91 83       	std	Z+1, r25	; 0x01
    3790:	80 83       	st	Z, r24
    3792:	fe 01       	movw	r30, r28
    3794:	ef 57       	subi	r30, 0x7F	; 127
    3796:	ff 4f       	sbci	r31, 0xFF	; 255
    3798:	80 81       	ld	r24, Z
    379a:	91 81       	ldd	r25, Z+1	; 0x01
    379c:	01 97       	sbiw	r24, 0x01	; 1
    379e:	f1 f7       	brne	.-4      	; 0x379c <LCD_voidInit+0xfc>
    37a0:	fe 01       	movw	r30, r28
    37a2:	ef 57       	subi	r30, 0x7F	; 127
    37a4:	ff 4f       	sbci	r31, 0xFF	; 255
    37a6:	91 83       	std	Z+1, r25	; 0x01
    37a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37aa:	de 01       	movw	r26, r28
    37ac:	ad 57       	subi	r26, 0x7D	; 125
    37ae:	bf 4f       	sbci	r27, 0xFF	; 255
    37b0:	fe 01       	movw	r30, r28
    37b2:	ed 57       	subi	r30, 0x7D	; 125
    37b4:	ff 4f       	sbci	r31, 0xFF	; 255
    37b6:	80 81       	ld	r24, Z
    37b8:	91 81       	ldd	r25, Z+1	; 0x01
    37ba:	01 97       	sbiw	r24, 0x01	; 1
    37bc:	11 96       	adiw	r26, 0x01	; 1
    37be:	9c 93       	st	X, r25
    37c0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37c2:	fe 01       	movw	r30, r28
    37c4:	ed 57       	subi	r30, 0x7D	; 125
    37c6:	ff 4f       	sbci	r31, 0xFF	; 255
    37c8:	80 81       	ld	r24, Z
    37ca:	91 81       	ldd	r25, Z+1	; 0x01
    37cc:	00 97       	sbiw	r24, 0x00	; 0
    37ce:	d1 f6       	brne	.-76     	; 0x3784 <LCD_voidInit+0xe4>
    37d0:	27 c0       	rjmp	.+78     	; 0x3820 <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37d2:	8e 01       	movw	r16, r28
    37d4:	0d 57       	subi	r16, 0x7D	; 125
    37d6:	1f 4f       	sbci	r17, 0xFF	; 255
    37d8:	fe 01       	movw	r30, r28
    37da:	eb 57       	subi	r30, 0x7B	; 123
    37dc:	ff 4f       	sbci	r31, 0xFF	; 255
    37de:	60 81       	ld	r22, Z
    37e0:	71 81       	ldd	r23, Z+1	; 0x01
    37e2:	82 81       	ldd	r24, Z+2	; 0x02
    37e4:	93 81       	ldd	r25, Z+3	; 0x03
    37e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ea:	dc 01       	movw	r26, r24
    37ec:	cb 01       	movw	r24, r22
    37ee:	f8 01       	movw	r30, r16
    37f0:	91 83       	std	Z+1, r25	; 0x01
    37f2:	80 83       	st	Z, r24
    37f4:	de 01       	movw	r26, r28
    37f6:	a1 58       	subi	r26, 0x81	; 129
    37f8:	bf 4f       	sbci	r27, 0xFF	; 255
    37fa:	fe 01       	movw	r30, r28
    37fc:	ed 57       	subi	r30, 0x7D	; 125
    37fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3800:	80 81       	ld	r24, Z
    3802:	91 81       	ldd	r25, Z+1	; 0x01
    3804:	8d 93       	st	X+, r24
    3806:	9c 93       	st	X, r25
    3808:	fe 01       	movw	r30, r28
    380a:	e1 58       	subi	r30, 0x81	; 129
    380c:	ff 4f       	sbci	r31, 0xFF	; 255
    380e:	80 81       	ld	r24, Z
    3810:	91 81       	ldd	r25, Z+1	; 0x01
    3812:	01 97       	sbiw	r24, 0x01	; 1
    3814:	f1 f7       	brne	.-4      	; 0x3812 <LCD_voidInit+0x172>
    3816:	fe 01       	movw	r30, r28
    3818:	e1 58       	subi	r30, 0x81	; 129
    381a:	ff 4f       	sbci	r31, 0xFF	; 255
    381c:	91 83       	std	Z+1, r25	; 0x01
    381e:	80 83       	st	Z, r24
	_delay_ms(35);
#if LCD_BITS == LCD_4_BIT_MODE
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    3820:	80 e3       	ldi	r24, 0x30	; 48
    3822:	0e 94 40 22 	call	0x4480	; 0x4480 <LCD_voidSendInitCommand>
    3826:	fe 01       	movw	r30, r28
    3828:	e5 58       	subi	r30, 0x85	; 133
    382a:	ff 4f       	sbci	r31, 0xFF	; 255
    382c:	80 e0       	ldi	r24, 0x00	; 0
    382e:	90 e0       	ldi	r25, 0x00	; 0
    3830:	a0 ea       	ldi	r26, 0xA0	; 160
    3832:	b0 e4       	ldi	r27, 0x40	; 64
    3834:	80 83       	st	Z, r24
    3836:	91 83       	std	Z+1, r25	; 0x01
    3838:	a2 83       	std	Z+2, r26	; 0x02
    383a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    383c:	8e 01       	movw	r16, r28
    383e:	09 58       	subi	r16, 0x89	; 137
    3840:	1f 4f       	sbci	r17, 0xFF	; 255
    3842:	fe 01       	movw	r30, r28
    3844:	e5 58       	subi	r30, 0x85	; 133
    3846:	ff 4f       	sbci	r31, 0xFF	; 255
    3848:	60 81       	ld	r22, Z
    384a:	71 81       	ldd	r23, Z+1	; 0x01
    384c:	82 81       	ldd	r24, Z+2	; 0x02
    384e:	93 81       	ldd	r25, Z+3	; 0x03
    3850:	20 e0       	ldi	r18, 0x00	; 0
    3852:	30 e0       	ldi	r19, 0x00	; 0
    3854:	4a e7       	ldi	r20, 0x7A	; 122
    3856:	55 e4       	ldi	r21, 0x45	; 69
    3858:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    385c:	dc 01       	movw	r26, r24
    385e:	cb 01       	movw	r24, r22
    3860:	f8 01       	movw	r30, r16
    3862:	80 83       	st	Z, r24
    3864:	91 83       	std	Z+1, r25	; 0x01
    3866:	a2 83       	std	Z+2, r26	; 0x02
    3868:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    386a:	fe 01       	movw	r30, r28
    386c:	e9 58       	subi	r30, 0x89	; 137
    386e:	ff 4f       	sbci	r31, 0xFF	; 255
    3870:	60 81       	ld	r22, Z
    3872:	71 81       	ldd	r23, Z+1	; 0x01
    3874:	82 81       	ldd	r24, Z+2	; 0x02
    3876:	93 81       	ldd	r25, Z+3	; 0x03
    3878:	20 e0       	ldi	r18, 0x00	; 0
    387a:	30 e0       	ldi	r19, 0x00	; 0
    387c:	40 e8       	ldi	r20, 0x80	; 128
    387e:	5f e3       	ldi	r21, 0x3F	; 63
    3880:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3884:	88 23       	and	r24, r24
    3886:	44 f4       	brge	.+16     	; 0x3898 <LCD_voidInit+0x1f8>
		__ticks = 1;
    3888:	fe 01       	movw	r30, r28
    388a:	eb 58       	subi	r30, 0x8B	; 139
    388c:	ff 4f       	sbci	r31, 0xFF	; 255
    388e:	81 e0       	ldi	r24, 0x01	; 1
    3890:	90 e0       	ldi	r25, 0x00	; 0
    3892:	91 83       	std	Z+1, r25	; 0x01
    3894:	80 83       	st	Z, r24
    3896:	64 c0       	rjmp	.+200    	; 0x3960 <LCD_voidInit+0x2c0>
	else if (__tmp > 65535)
    3898:	fe 01       	movw	r30, r28
    389a:	e9 58       	subi	r30, 0x89	; 137
    389c:	ff 4f       	sbci	r31, 0xFF	; 255
    389e:	60 81       	ld	r22, Z
    38a0:	71 81       	ldd	r23, Z+1	; 0x01
    38a2:	82 81       	ldd	r24, Z+2	; 0x02
    38a4:	93 81       	ldd	r25, Z+3	; 0x03
    38a6:	20 e0       	ldi	r18, 0x00	; 0
    38a8:	3f ef       	ldi	r19, 0xFF	; 255
    38aa:	4f e7       	ldi	r20, 0x7F	; 127
    38ac:	57 e4       	ldi	r21, 0x47	; 71
    38ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38b2:	18 16       	cp	r1, r24
    38b4:	0c f0       	brlt	.+2      	; 0x38b8 <LCD_voidInit+0x218>
    38b6:	43 c0       	rjmp	.+134    	; 0x393e <LCD_voidInit+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38b8:	fe 01       	movw	r30, r28
    38ba:	e5 58       	subi	r30, 0x85	; 133
    38bc:	ff 4f       	sbci	r31, 0xFF	; 255
    38be:	60 81       	ld	r22, Z
    38c0:	71 81       	ldd	r23, Z+1	; 0x01
    38c2:	82 81       	ldd	r24, Z+2	; 0x02
    38c4:	93 81       	ldd	r25, Z+3	; 0x03
    38c6:	20 e0       	ldi	r18, 0x00	; 0
    38c8:	30 e0       	ldi	r19, 0x00	; 0
    38ca:	40 e2       	ldi	r20, 0x20	; 32
    38cc:	51 e4       	ldi	r21, 0x41	; 65
    38ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d2:	dc 01       	movw	r26, r24
    38d4:	cb 01       	movw	r24, r22
    38d6:	8e 01       	movw	r16, r28
    38d8:	0b 58       	subi	r16, 0x8B	; 139
    38da:	1f 4f       	sbci	r17, 0xFF	; 255
    38dc:	bc 01       	movw	r22, r24
    38de:	cd 01       	movw	r24, r26
    38e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38e4:	dc 01       	movw	r26, r24
    38e6:	cb 01       	movw	r24, r22
    38e8:	f8 01       	movw	r30, r16
    38ea:	91 83       	std	Z+1, r25	; 0x01
    38ec:	80 83       	st	Z, r24
    38ee:	1f c0       	rjmp	.+62     	; 0x392e <LCD_voidInit+0x28e>
    38f0:	fe 01       	movw	r30, r28
    38f2:	ed 58       	subi	r30, 0x8D	; 141
    38f4:	ff 4f       	sbci	r31, 0xFF	; 255
    38f6:	80 e9       	ldi	r24, 0x90	; 144
    38f8:	91 e0       	ldi	r25, 0x01	; 1
    38fa:	91 83       	std	Z+1, r25	; 0x01
    38fc:	80 83       	st	Z, r24
    38fe:	fe 01       	movw	r30, r28
    3900:	ed 58       	subi	r30, 0x8D	; 141
    3902:	ff 4f       	sbci	r31, 0xFF	; 255
    3904:	80 81       	ld	r24, Z
    3906:	91 81       	ldd	r25, Z+1	; 0x01
    3908:	01 97       	sbiw	r24, 0x01	; 1
    390a:	f1 f7       	brne	.-4      	; 0x3908 <LCD_voidInit+0x268>
    390c:	fe 01       	movw	r30, r28
    390e:	ed 58       	subi	r30, 0x8D	; 141
    3910:	ff 4f       	sbci	r31, 0xFF	; 255
    3912:	91 83       	std	Z+1, r25	; 0x01
    3914:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3916:	de 01       	movw	r26, r28
    3918:	ab 58       	subi	r26, 0x8B	; 139
    391a:	bf 4f       	sbci	r27, 0xFF	; 255
    391c:	fe 01       	movw	r30, r28
    391e:	eb 58       	subi	r30, 0x8B	; 139
    3920:	ff 4f       	sbci	r31, 0xFF	; 255
    3922:	80 81       	ld	r24, Z
    3924:	91 81       	ldd	r25, Z+1	; 0x01
    3926:	01 97       	sbiw	r24, 0x01	; 1
    3928:	11 96       	adiw	r26, 0x01	; 1
    392a:	9c 93       	st	X, r25
    392c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    392e:	fe 01       	movw	r30, r28
    3930:	eb 58       	subi	r30, 0x8B	; 139
    3932:	ff 4f       	sbci	r31, 0xFF	; 255
    3934:	80 81       	ld	r24, Z
    3936:	91 81       	ldd	r25, Z+1	; 0x01
    3938:	00 97       	sbiw	r24, 0x00	; 0
    393a:	d1 f6       	brne	.-76     	; 0x38f0 <LCD_voidInit+0x250>
    393c:	27 c0       	rjmp	.+78     	; 0x398c <LCD_voidInit+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    393e:	8e 01       	movw	r16, r28
    3940:	0b 58       	subi	r16, 0x8B	; 139
    3942:	1f 4f       	sbci	r17, 0xFF	; 255
    3944:	fe 01       	movw	r30, r28
    3946:	e9 58       	subi	r30, 0x89	; 137
    3948:	ff 4f       	sbci	r31, 0xFF	; 255
    394a:	60 81       	ld	r22, Z
    394c:	71 81       	ldd	r23, Z+1	; 0x01
    394e:	82 81       	ldd	r24, Z+2	; 0x02
    3950:	93 81       	ldd	r25, Z+3	; 0x03
    3952:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3956:	dc 01       	movw	r26, r24
    3958:	cb 01       	movw	r24, r22
    395a:	f8 01       	movw	r30, r16
    395c:	91 83       	std	Z+1, r25	; 0x01
    395e:	80 83       	st	Z, r24
    3960:	de 01       	movw	r26, r28
    3962:	af 58       	subi	r26, 0x8F	; 143
    3964:	bf 4f       	sbci	r27, 0xFF	; 255
    3966:	fe 01       	movw	r30, r28
    3968:	eb 58       	subi	r30, 0x8B	; 139
    396a:	ff 4f       	sbci	r31, 0xFF	; 255
    396c:	80 81       	ld	r24, Z
    396e:	91 81       	ldd	r25, Z+1	; 0x01
    3970:	8d 93       	st	X+, r24
    3972:	9c 93       	st	X, r25
    3974:	fe 01       	movw	r30, r28
    3976:	ef 58       	subi	r30, 0x8F	; 143
    3978:	ff 4f       	sbci	r31, 0xFF	; 255
    397a:	80 81       	ld	r24, Z
    397c:	91 81       	ldd	r25, Z+1	; 0x01
    397e:	01 97       	sbiw	r24, 0x01	; 1
    3980:	f1 f7       	brne	.-4      	; 0x397e <LCD_voidInit+0x2de>
    3982:	fe 01       	movw	r30, r28
    3984:	ef 58       	subi	r30, 0x8F	; 143
    3986:	ff 4f       	sbci	r31, 0xFF	; 255
    3988:	91 83       	std	Z+1, r25	; 0x01
    398a:	80 83       	st	Z, r24
	_delay_ms(5);
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    398c:	80 e3       	ldi	r24, 0x30	; 48
    398e:	0e 94 40 22 	call	0x4480	; 0x4480 <LCD_voidSendInitCommand>
    3992:	fe 01       	movw	r30, r28
    3994:	e3 59       	subi	r30, 0x93	; 147
    3996:	ff 4f       	sbci	r31, 0xFF	; 255
    3998:	80 e0       	ldi	r24, 0x00	; 0
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	a0 e8       	ldi	r26, 0x80	; 128
    399e:	bf e3       	ldi	r27, 0x3F	; 63
    39a0:	80 83       	st	Z, r24
    39a2:	91 83       	std	Z+1, r25	; 0x01
    39a4:	a2 83       	std	Z+2, r26	; 0x02
    39a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39a8:	8e 01       	movw	r16, r28
    39aa:	07 59       	subi	r16, 0x97	; 151
    39ac:	1f 4f       	sbci	r17, 0xFF	; 255
    39ae:	fe 01       	movw	r30, r28
    39b0:	e3 59       	subi	r30, 0x93	; 147
    39b2:	ff 4f       	sbci	r31, 0xFF	; 255
    39b4:	60 81       	ld	r22, Z
    39b6:	71 81       	ldd	r23, Z+1	; 0x01
    39b8:	82 81       	ldd	r24, Z+2	; 0x02
    39ba:	93 81       	ldd	r25, Z+3	; 0x03
    39bc:	20 e0       	ldi	r18, 0x00	; 0
    39be:	30 e0       	ldi	r19, 0x00	; 0
    39c0:	4a e7       	ldi	r20, 0x7A	; 122
    39c2:	55 e4       	ldi	r21, 0x45	; 69
    39c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39c8:	dc 01       	movw	r26, r24
    39ca:	cb 01       	movw	r24, r22
    39cc:	f8 01       	movw	r30, r16
    39ce:	80 83       	st	Z, r24
    39d0:	91 83       	std	Z+1, r25	; 0x01
    39d2:	a2 83       	std	Z+2, r26	; 0x02
    39d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39d6:	fe 01       	movw	r30, r28
    39d8:	e7 59       	subi	r30, 0x97	; 151
    39da:	ff 4f       	sbci	r31, 0xFF	; 255
    39dc:	60 81       	ld	r22, Z
    39de:	71 81       	ldd	r23, Z+1	; 0x01
    39e0:	82 81       	ldd	r24, Z+2	; 0x02
    39e2:	93 81       	ldd	r25, Z+3	; 0x03
    39e4:	20 e0       	ldi	r18, 0x00	; 0
    39e6:	30 e0       	ldi	r19, 0x00	; 0
    39e8:	40 e8       	ldi	r20, 0x80	; 128
    39ea:	5f e3       	ldi	r21, 0x3F	; 63
    39ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39f0:	88 23       	and	r24, r24
    39f2:	44 f4       	brge	.+16     	; 0x3a04 <LCD_voidInit+0x364>
		__ticks = 1;
    39f4:	fe 01       	movw	r30, r28
    39f6:	e9 59       	subi	r30, 0x99	; 153
    39f8:	ff 4f       	sbci	r31, 0xFF	; 255
    39fa:	81 e0       	ldi	r24, 0x01	; 1
    39fc:	90 e0       	ldi	r25, 0x00	; 0
    39fe:	91 83       	std	Z+1, r25	; 0x01
    3a00:	80 83       	st	Z, r24
    3a02:	64 c0       	rjmp	.+200    	; 0x3acc <LCD_voidInit+0x42c>
	else if (__tmp > 65535)
    3a04:	fe 01       	movw	r30, r28
    3a06:	e7 59       	subi	r30, 0x97	; 151
    3a08:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0a:	60 81       	ld	r22, Z
    3a0c:	71 81       	ldd	r23, Z+1	; 0x01
    3a0e:	82 81       	ldd	r24, Z+2	; 0x02
    3a10:	93 81       	ldd	r25, Z+3	; 0x03
    3a12:	20 e0       	ldi	r18, 0x00	; 0
    3a14:	3f ef       	ldi	r19, 0xFF	; 255
    3a16:	4f e7       	ldi	r20, 0x7F	; 127
    3a18:	57 e4       	ldi	r21, 0x47	; 71
    3a1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a1e:	18 16       	cp	r1, r24
    3a20:	0c f0       	brlt	.+2      	; 0x3a24 <LCD_voidInit+0x384>
    3a22:	43 c0       	rjmp	.+134    	; 0x3aaa <LCD_voidInit+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a24:	fe 01       	movw	r30, r28
    3a26:	e3 59       	subi	r30, 0x93	; 147
    3a28:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2a:	60 81       	ld	r22, Z
    3a2c:	71 81       	ldd	r23, Z+1	; 0x01
    3a2e:	82 81       	ldd	r24, Z+2	; 0x02
    3a30:	93 81       	ldd	r25, Z+3	; 0x03
    3a32:	20 e0       	ldi	r18, 0x00	; 0
    3a34:	30 e0       	ldi	r19, 0x00	; 0
    3a36:	40 e2       	ldi	r20, 0x20	; 32
    3a38:	51 e4       	ldi	r21, 0x41	; 65
    3a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a3e:	dc 01       	movw	r26, r24
    3a40:	cb 01       	movw	r24, r22
    3a42:	8e 01       	movw	r16, r28
    3a44:	09 59       	subi	r16, 0x99	; 153
    3a46:	1f 4f       	sbci	r17, 0xFF	; 255
    3a48:	bc 01       	movw	r22, r24
    3a4a:	cd 01       	movw	r24, r26
    3a4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a50:	dc 01       	movw	r26, r24
    3a52:	cb 01       	movw	r24, r22
    3a54:	f8 01       	movw	r30, r16
    3a56:	91 83       	std	Z+1, r25	; 0x01
    3a58:	80 83       	st	Z, r24
    3a5a:	1f c0       	rjmp	.+62     	; 0x3a9a <LCD_voidInit+0x3fa>
    3a5c:	fe 01       	movw	r30, r28
    3a5e:	eb 59       	subi	r30, 0x9B	; 155
    3a60:	ff 4f       	sbci	r31, 0xFF	; 255
    3a62:	80 e9       	ldi	r24, 0x90	; 144
    3a64:	91 e0       	ldi	r25, 0x01	; 1
    3a66:	91 83       	std	Z+1, r25	; 0x01
    3a68:	80 83       	st	Z, r24
    3a6a:	fe 01       	movw	r30, r28
    3a6c:	eb 59       	subi	r30, 0x9B	; 155
    3a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a70:	80 81       	ld	r24, Z
    3a72:	91 81       	ldd	r25, Z+1	; 0x01
    3a74:	01 97       	sbiw	r24, 0x01	; 1
    3a76:	f1 f7       	brne	.-4      	; 0x3a74 <LCD_voidInit+0x3d4>
    3a78:	fe 01       	movw	r30, r28
    3a7a:	eb 59       	subi	r30, 0x9B	; 155
    3a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7e:	91 83       	std	Z+1, r25	; 0x01
    3a80:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a82:	de 01       	movw	r26, r28
    3a84:	a9 59       	subi	r26, 0x99	; 153
    3a86:	bf 4f       	sbci	r27, 0xFF	; 255
    3a88:	fe 01       	movw	r30, r28
    3a8a:	e9 59       	subi	r30, 0x99	; 153
    3a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8e:	80 81       	ld	r24, Z
    3a90:	91 81       	ldd	r25, Z+1	; 0x01
    3a92:	01 97       	sbiw	r24, 0x01	; 1
    3a94:	11 96       	adiw	r26, 0x01	; 1
    3a96:	9c 93       	st	X, r25
    3a98:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a9a:	fe 01       	movw	r30, r28
    3a9c:	e9 59       	subi	r30, 0x99	; 153
    3a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa0:	80 81       	ld	r24, Z
    3aa2:	91 81       	ldd	r25, Z+1	; 0x01
    3aa4:	00 97       	sbiw	r24, 0x00	; 0
    3aa6:	d1 f6       	brne	.-76     	; 0x3a5c <LCD_voidInit+0x3bc>
    3aa8:	27 c0       	rjmp	.+78     	; 0x3af8 <LCD_voidInit+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aaa:	8e 01       	movw	r16, r28
    3aac:	09 59       	subi	r16, 0x99	; 153
    3aae:	1f 4f       	sbci	r17, 0xFF	; 255
    3ab0:	fe 01       	movw	r30, r28
    3ab2:	e7 59       	subi	r30, 0x97	; 151
    3ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab6:	60 81       	ld	r22, Z
    3ab8:	71 81       	ldd	r23, Z+1	; 0x01
    3aba:	82 81       	ldd	r24, Z+2	; 0x02
    3abc:	93 81       	ldd	r25, Z+3	; 0x03
    3abe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ac2:	dc 01       	movw	r26, r24
    3ac4:	cb 01       	movw	r24, r22
    3ac6:	f8 01       	movw	r30, r16
    3ac8:	91 83       	std	Z+1, r25	; 0x01
    3aca:	80 83       	st	Z, r24
    3acc:	de 01       	movw	r26, r28
    3ace:	ad 59       	subi	r26, 0x9D	; 157
    3ad0:	bf 4f       	sbci	r27, 0xFF	; 255
    3ad2:	fe 01       	movw	r30, r28
    3ad4:	e9 59       	subi	r30, 0x99	; 153
    3ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad8:	80 81       	ld	r24, Z
    3ada:	91 81       	ldd	r25, Z+1	; 0x01
    3adc:	8d 93       	st	X+, r24
    3ade:	9c 93       	st	X, r25
    3ae0:	fe 01       	movw	r30, r28
    3ae2:	ed 59       	subi	r30, 0x9D	; 157
    3ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae6:	80 81       	ld	r24, Z
    3ae8:	91 81       	ldd	r25, Z+1	; 0x01
    3aea:	01 97       	sbiw	r24, 0x01	; 1
    3aec:	f1 f7       	brne	.-4      	; 0x3aea <LCD_voidInit+0x44a>
    3aee:	fe 01       	movw	r30, r28
    3af0:	ed 59       	subi	r30, 0x9D	; 157
    3af2:	ff 4f       	sbci	r31, 0xFF	; 255
    3af4:	91 83       	std	Z+1, r25	; 0x01
    3af6:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    3af8:	80 e3       	ldi	r24, 0x30	; 48
    3afa:	0e 94 40 22 	call	0x4480	; 0x4480 <LCD_voidSendInitCommand>
    3afe:	fe 01       	movw	r30, r28
    3b00:	e1 5a       	subi	r30, 0xA1	; 161
    3b02:	ff 4f       	sbci	r31, 0xFF	; 255
    3b04:	80 e0       	ldi	r24, 0x00	; 0
    3b06:	90 e0       	ldi	r25, 0x00	; 0
    3b08:	a0 e8       	ldi	r26, 0x80	; 128
    3b0a:	bf e3       	ldi	r27, 0x3F	; 63
    3b0c:	80 83       	st	Z, r24
    3b0e:	91 83       	std	Z+1, r25	; 0x01
    3b10:	a2 83       	std	Z+2, r26	; 0x02
    3b12:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b14:	8e 01       	movw	r16, r28
    3b16:	05 5a       	subi	r16, 0xA5	; 165
    3b18:	1f 4f       	sbci	r17, 0xFF	; 255
    3b1a:	fe 01       	movw	r30, r28
    3b1c:	e1 5a       	subi	r30, 0xA1	; 161
    3b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b20:	60 81       	ld	r22, Z
    3b22:	71 81       	ldd	r23, Z+1	; 0x01
    3b24:	82 81       	ldd	r24, Z+2	; 0x02
    3b26:	93 81       	ldd	r25, Z+3	; 0x03
    3b28:	20 e0       	ldi	r18, 0x00	; 0
    3b2a:	30 e0       	ldi	r19, 0x00	; 0
    3b2c:	4a e7       	ldi	r20, 0x7A	; 122
    3b2e:	55 e4       	ldi	r21, 0x45	; 69
    3b30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b34:	dc 01       	movw	r26, r24
    3b36:	cb 01       	movw	r24, r22
    3b38:	f8 01       	movw	r30, r16
    3b3a:	80 83       	st	Z, r24
    3b3c:	91 83       	std	Z+1, r25	; 0x01
    3b3e:	a2 83       	std	Z+2, r26	; 0x02
    3b40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b42:	fe 01       	movw	r30, r28
    3b44:	e5 5a       	subi	r30, 0xA5	; 165
    3b46:	ff 4f       	sbci	r31, 0xFF	; 255
    3b48:	60 81       	ld	r22, Z
    3b4a:	71 81       	ldd	r23, Z+1	; 0x01
    3b4c:	82 81       	ldd	r24, Z+2	; 0x02
    3b4e:	93 81       	ldd	r25, Z+3	; 0x03
    3b50:	20 e0       	ldi	r18, 0x00	; 0
    3b52:	30 e0       	ldi	r19, 0x00	; 0
    3b54:	40 e8       	ldi	r20, 0x80	; 128
    3b56:	5f e3       	ldi	r21, 0x3F	; 63
    3b58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b5c:	88 23       	and	r24, r24
    3b5e:	44 f4       	brge	.+16     	; 0x3b70 <LCD_voidInit+0x4d0>
		__ticks = 1;
    3b60:	fe 01       	movw	r30, r28
    3b62:	e7 5a       	subi	r30, 0xA7	; 167
    3b64:	ff 4f       	sbci	r31, 0xFF	; 255
    3b66:	81 e0       	ldi	r24, 0x01	; 1
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	91 83       	std	Z+1, r25	; 0x01
    3b6c:	80 83       	st	Z, r24
    3b6e:	64 c0       	rjmp	.+200    	; 0x3c38 <LCD_voidInit+0x598>
	else if (__tmp > 65535)
    3b70:	fe 01       	movw	r30, r28
    3b72:	e5 5a       	subi	r30, 0xA5	; 165
    3b74:	ff 4f       	sbci	r31, 0xFF	; 255
    3b76:	60 81       	ld	r22, Z
    3b78:	71 81       	ldd	r23, Z+1	; 0x01
    3b7a:	82 81       	ldd	r24, Z+2	; 0x02
    3b7c:	93 81       	ldd	r25, Z+3	; 0x03
    3b7e:	20 e0       	ldi	r18, 0x00	; 0
    3b80:	3f ef       	ldi	r19, 0xFF	; 255
    3b82:	4f e7       	ldi	r20, 0x7F	; 127
    3b84:	57 e4       	ldi	r21, 0x47	; 71
    3b86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b8a:	18 16       	cp	r1, r24
    3b8c:	0c f0       	brlt	.+2      	; 0x3b90 <LCD_voidInit+0x4f0>
    3b8e:	43 c0       	rjmp	.+134    	; 0x3c16 <LCD_voidInit+0x576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b90:	fe 01       	movw	r30, r28
    3b92:	e1 5a       	subi	r30, 0xA1	; 161
    3b94:	ff 4f       	sbci	r31, 0xFF	; 255
    3b96:	60 81       	ld	r22, Z
    3b98:	71 81       	ldd	r23, Z+1	; 0x01
    3b9a:	82 81       	ldd	r24, Z+2	; 0x02
    3b9c:	93 81       	ldd	r25, Z+3	; 0x03
    3b9e:	20 e0       	ldi	r18, 0x00	; 0
    3ba0:	30 e0       	ldi	r19, 0x00	; 0
    3ba2:	40 e2       	ldi	r20, 0x20	; 32
    3ba4:	51 e4       	ldi	r21, 0x41	; 65
    3ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3baa:	dc 01       	movw	r26, r24
    3bac:	cb 01       	movw	r24, r22
    3bae:	8e 01       	movw	r16, r28
    3bb0:	07 5a       	subi	r16, 0xA7	; 167
    3bb2:	1f 4f       	sbci	r17, 0xFF	; 255
    3bb4:	bc 01       	movw	r22, r24
    3bb6:	cd 01       	movw	r24, r26
    3bb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bbc:	dc 01       	movw	r26, r24
    3bbe:	cb 01       	movw	r24, r22
    3bc0:	f8 01       	movw	r30, r16
    3bc2:	91 83       	std	Z+1, r25	; 0x01
    3bc4:	80 83       	st	Z, r24
    3bc6:	1f c0       	rjmp	.+62     	; 0x3c06 <LCD_voidInit+0x566>
    3bc8:	fe 01       	movw	r30, r28
    3bca:	e9 5a       	subi	r30, 0xA9	; 169
    3bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bce:	80 e9       	ldi	r24, 0x90	; 144
    3bd0:	91 e0       	ldi	r25, 0x01	; 1
    3bd2:	91 83       	std	Z+1, r25	; 0x01
    3bd4:	80 83       	st	Z, r24
    3bd6:	fe 01       	movw	r30, r28
    3bd8:	e9 5a       	subi	r30, 0xA9	; 169
    3bda:	ff 4f       	sbci	r31, 0xFF	; 255
    3bdc:	80 81       	ld	r24, Z
    3bde:	91 81       	ldd	r25, Z+1	; 0x01
    3be0:	01 97       	sbiw	r24, 0x01	; 1
    3be2:	f1 f7       	brne	.-4      	; 0x3be0 <LCD_voidInit+0x540>
    3be4:	fe 01       	movw	r30, r28
    3be6:	e9 5a       	subi	r30, 0xA9	; 169
    3be8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bea:	91 83       	std	Z+1, r25	; 0x01
    3bec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bee:	de 01       	movw	r26, r28
    3bf0:	a7 5a       	subi	r26, 0xA7	; 167
    3bf2:	bf 4f       	sbci	r27, 0xFF	; 255
    3bf4:	fe 01       	movw	r30, r28
    3bf6:	e7 5a       	subi	r30, 0xA7	; 167
    3bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfa:	80 81       	ld	r24, Z
    3bfc:	91 81       	ldd	r25, Z+1	; 0x01
    3bfe:	01 97       	sbiw	r24, 0x01	; 1
    3c00:	11 96       	adiw	r26, 0x01	; 1
    3c02:	9c 93       	st	X, r25
    3c04:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c06:	fe 01       	movw	r30, r28
    3c08:	e7 5a       	subi	r30, 0xA7	; 167
    3c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0c:	80 81       	ld	r24, Z
    3c0e:	91 81       	ldd	r25, Z+1	; 0x01
    3c10:	00 97       	sbiw	r24, 0x00	; 0
    3c12:	d1 f6       	brne	.-76     	; 0x3bc8 <LCD_voidInit+0x528>
    3c14:	27 c0       	rjmp	.+78     	; 0x3c64 <LCD_voidInit+0x5c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c16:	8e 01       	movw	r16, r28
    3c18:	07 5a       	subi	r16, 0xA7	; 167
    3c1a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c1c:	fe 01       	movw	r30, r28
    3c1e:	e5 5a       	subi	r30, 0xA5	; 165
    3c20:	ff 4f       	sbci	r31, 0xFF	; 255
    3c22:	60 81       	ld	r22, Z
    3c24:	71 81       	ldd	r23, Z+1	; 0x01
    3c26:	82 81       	ldd	r24, Z+2	; 0x02
    3c28:	93 81       	ldd	r25, Z+3	; 0x03
    3c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c2e:	dc 01       	movw	r26, r24
    3c30:	cb 01       	movw	r24, r22
    3c32:	f8 01       	movw	r30, r16
    3c34:	91 83       	std	Z+1, r25	; 0x01
    3c36:	80 83       	st	Z, r24
    3c38:	de 01       	movw	r26, r28
    3c3a:	ab 5a       	subi	r26, 0xAB	; 171
    3c3c:	bf 4f       	sbci	r27, 0xFF	; 255
    3c3e:	fe 01       	movw	r30, r28
    3c40:	e7 5a       	subi	r30, 0xA7	; 167
    3c42:	ff 4f       	sbci	r31, 0xFF	; 255
    3c44:	80 81       	ld	r24, Z
    3c46:	91 81       	ldd	r25, Z+1	; 0x01
    3c48:	8d 93       	st	X+, r24
    3c4a:	9c 93       	st	X, r25
    3c4c:	fe 01       	movw	r30, r28
    3c4e:	eb 5a       	subi	r30, 0xAB	; 171
    3c50:	ff 4f       	sbci	r31, 0xFF	; 255
    3c52:	80 81       	ld	r24, Z
    3c54:	91 81       	ldd	r25, Z+1	; 0x01
    3c56:	01 97       	sbiw	r24, 0x01	; 1
    3c58:	f1 f7       	brne	.-4      	; 0x3c56 <LCD_voidInit+0x5b6>
    3c5a:	fe 01       	movw	r30, r28
    3c5c:	eb 5a       	subi	r30, 0xAB	; 171
    3c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c60:	91 83       	std	Z+1, r25	; 0x01
    3c62:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_voidSendInitCommand(LCD_4BitMode);
    3c64:	80 e2       	ldi	r24, 0x20	; 32
    3c66:	0e 94 40 22 	call	0x4480	; 0x4480 <LCD_voidSendInitCommand>
    3c6a:	fe 01       	movw	r30, r28
    3c6c:	ef 5a       	subi	r30, 0xAF	; 175
    3c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c70:	80 e0       	ldi	r24, 0x00	; 0
    3c72:	90 e0       	ldi	r25, 0x00	; 0
    3c74:	a0 e8       	ldi	r26, 0x80	; 128
    3c76:	bf e3       	ldi	r27, 0x3F	; 63
    3c78:	80 83       	st	Z, r24
    3c7a:	91 83       	std	Z+1, r25	; 0x01
    3c7c:	a2 83       	std	Z+2, r26	; 0x02
    3c7e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c80:	8e 01       	movw	r16, r28
    3c82:	03 5b       	subi	r16, 0xB3	; 179
    3c84:	1f 4f       	sbci	r17, 0xFF	; 255
    3c86:	fe 01       	movw	r30, r28
    3c88:	ef 5a       	subi	r30, 0xAF	; 175
    3c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c8c:	60 81       	ld	r22, Z
    3c8e:	71 81       	ldd	r23, Z+1	; 0x01
    3c90:	82 81       	ldd	r24, Z+2	; 0x02
    3c92:	93 81       	ldd	r25, Z+3	; 0x03
    3c94:	20 e0       	ldi	r18, 0x00	; 0
    3c96:	30 e0       	ldi	r19, 0x00	; 0
    3c98:	4a e7       	ldi	r20, 0x7A	; 122
    3c9a:	55 e4       	ldi	r21, 0x45	; 69
    3c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ca0:	dc 01       	movw	r26, r24
    3ca2:	cb 01       	movw	r24, r22
    3ca4:	f8 01       	movw	r30, r16
    3ca6:	80 83       	st	Z, r24
    3ca8:	91 83       	std	Z+1, r25	; 0x01
    3caa:	a2 83       	std	Z+2, r26	; 0x02
    3cac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3cae:	fe 01       	movw	r30, r28
    3cb0:	e3 5b       	subi	r30, 0xB3	; 179
    3cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb4:	60 81       	ld	r22, Z
    3cb6:	71 81       	ldd	r23, Z+1	; 0x01
    3cb8:	82 81       	ldd	r24, Z+2	; 0x02
    3cba:	93 81       	ldd	r25, Z+3	; 0x03
    3cbc:	20 e0       	ldi	r18, 0x00	; 0
    3cbe:	30 e0       	ldi	r19, 0x00	; 0
    3cc0:	40 e8       	ldi	r20, 0x80	; 128
    3cc2:	5f e3       	ldi	r21, 0x3F	; 63
    3cc4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cc8:	88 23       	and	r24, r24
    3cca:	44 f4       	brge	.+16     	; 0x3cdc <LCD_voidInit+0x63c>
		__ticks = 1;
    3ccc:	fe 01       	movw	r30, r28
    3cce:	e5 5b       	subi	r30, 0xB5	; 181
    3cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd2:	81 e0       	ldi	r24, 0x01	; 1
    3cd4:	90 e0       	ldi	r25, 0x00	; 0
    3cd6:	91 83       	std	Z+1, r25	; 0x01
    3cd8:	80 83       	st	Z, r24
    3cda:	64 c0       	rjmp	.+200    	; 0x3da4 <LCD_voidInit+0x704>
	else if (__tmp > 65535)
    3cdc:	fe 01       	movw	r30, r28
    3cde:	e3 5b       	subi	r30, 0xB3	; 179
    3ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce2:	60 81       	ld	r22, Z
    3ce4:	71 81       	ldd	r23, Z+1	; 0x01
    3ce6:	82 81       	ldd	r24, Z+2	; 0x02
    3ce8:	93 81       	ldd	r25, Z+3	; 0x03
    3cea:	20 e0       	ldi	r18, 0x00	; 0
    3cec:	3f ef       	ldi	r19, 0xFF	; 255
    3cee:	4f e7       	ldi	r20, 0x7F	; 127
    3cf0:	57 e4       	ldi	r21, 0x47	; 71
    3cf2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cf6:	18 16       	cp	r1, r24
    3cf8:	0c f0       	brlt	.+2      	; 0x3cfc <LCD_voidInit+0x65c>
    3cfa:	43 c0       	rjmp	.+134    	; 0x3d82 <LCD_voidInit+0x6e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cfc:	fe 01       	movw	r30, r28
    3cfe:	ef 5a       	subi	r30, 0xAF	; 175
    3d00:	ff 4f       	sbci	r31, 0xFF	; 255
    3d02:	60 81       	ld	r22, Z
    3d04:	71 81       	ldd	r23, Z+1	; 0x01
    3d06:	82 81       	ldd	r24, Z+2	; 0x02
    3d08:	93 81       	ldd	r25, Z+3	; 0x03
    3d0a:	20 e0       	ldi	r18, 0x00	; 0
    3d0c:	30 e0       	ldi	r19, 0x00	; 0
    3d0e:	40 e2       	ldi	r20, 0x20	; 32
    3d10:	51 e4       	ldi	r21, 0x41	; 65
    3d12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d16:	dc 01       	movw	r26, r24
    3d18:	cb 01       	movw	r24, r22
    3d1a:	8e 01       	movw	r16, r28
    3d1c:	05 5b       	subi	r16, 0xB5	; 181
    3d1e:	1f 4f       	sbci	r17, 0xFF	; 255
    3d20:	bc 01       	movw	r22, r24
    3d22:	cd 01       	movw	r24, r26
    3d24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d28:	dc 01       	movw	r26, r24
    3d2a:	cb 01       	movw	r24, r22
    3d2c:	f8 01       	movw	r30, r16
    3d2e:	91 83       	std	Z+1, r25	; 0x01
    3d30:	80 83       	st	Z, r24
    3d32:	1f c0       	rjmp	.+62     	; 0x3d72 <LCD_voidInit+0x6d2>
    3d34:	fe 01       	movw	r30, r28
    3d36:	e7 5b       	subi	r30, 0xB7	; 183
    3d38:	ff 4f       	sbci	r31, 0xFF	; 255
    3d3a:	80 e9       	ldi	r24, 0x90	; 144
    3d3c:	91 e0       	ldi	r25, 0x01	; 1
    3d3e:	91 83       	std	Z+1, r25	; 0x01
    3d40:	80 83       	st	Z, r24
    3d42:	fe 01       	movw	r30, r28
    3d44:	e7 5b       	subi	r30, 0xB7	; 183
    3d46:	ff 4f       	sbci	r31, 0xFF	; 255
    3d48:	80 81       	ld	r24, Z
    3d4a:	91 81       	ldd	r25, Z+1	; 0x01
    3d4c:	01 97       	sbiw	r24, 0x01	; 1
    3d4e:	f1 f7       	brne	.-4      	; 0x3d4c <LCD_voidInit+0x6ac>
    3d50:	fe 01       	movw	r30, r28
    3d52:	e7 5b       	subi	r30, 0xB7	; 183
    3d54:	ff 4f       	sbci	r31, 0xFF	; 255
    3d56:	91 83       	std	Z+1, r25	; 0x01
    3d58:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d5a:	de 01       	movw	r26, r28
    3d5c:	a5 5b       	subi	r26, 0xB5	; 181
    3d5e:	bf 4f       	sbci	r27, 0xFF	; 255
    3d60:	fe 01       	movw	r30, r28
    3d62:	e5 5b       	subi	r30, 0xB5	; 181
    3d64:	ff 4f       	sbci	r31, 0xFF	; 255
    3d66:	80 81       	ld	r24, Z
    3d68:	91 81       	ldd	r25, Z+1	; 0x01
    3d6a:	01 97       	sbiw	r24, 0x01	; 1
    3d6c:	11 96       	adiw	r26, 0x01	; 1
    3d6e:	9c 93       	st	X, r25
    3d70:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d72:	fe 01       	movw	r30, r28
    3d74:	e5 5b       	subi	r30, 0xB5	; 181
    3d76:	ff 4f       	sbci	r31, 0xFF	; 255
    3d78:	80 81       	ld	r24, Z
    3d7a:	91 81       	ldd	r25, Z+1	; 0x01
    3d7c:	00 97       	sbiw	r24, 0x00	; 0
    3d7e:	d1 f6       	brne	.-76     	; 0x3d34 <LCD_voidInit+0x694>
    3d80:	27 c0       	rjmp	.+78     	; 0x3dd0 <LCD_voidInit+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d82:	8e 01       	movw	r16, r28
    3d84:	05 5b       	subi	r16, 0xB5	; 181
    3d86:	1f 4f       	sbci	r17, 0xFF	; 255
    3d88:	fe 01       	movw	r30, r28
    3d8a:	e3 5b       	subi	r30, 0xB3	; 179
    3d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8e:	60 81       	ld	r22, Z
    3d90:	71 81       	ldd	r23, Z+1	; 0x01
    3d92:	82 81       	ldd	r24, Z+2	; 0x02
    3d94:	93 81       	ldd	r25, Z+3	; 0x03
    3d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d9a:	dc 01       	movw	r26, r24
    3d9c:	cb 01       	movw	r24, r22
    3d9e:	f8 01       	movw	r30, r16
    3da0:	91 83       	std	Z+1, r25	; 0x01
    3da2:	80 83       	st	Z, r24
    3da4:	de 01       	movw	r26, r28
    3da6:	a9 5b       	subi	r26, 0xB9	; 185
    3da8:	bf 4f       	sbci	r27, 0xFF	; 255
    3daa:	fe 01       	movw	r30, r28
    3dac:	e5 5b       	subi	r30, 0xB5	; 181
    3dae:	ff 4f       	sbci	r31, 0xFF	; 255
    3db0:	80 81       	ld	r24, Z
    3db2:	91 81       	ldd	r25, Z+1	; 0x01
    3db4:	8d 93       	st	X+, r24
    3db6:	9c 93       	st	X, r25
    3db8:	fe 01       	movw	r30, r28
    3dba:	e9 5b       	subi	r30, 0xB9	; 185
    3dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dbe:	80 81       	ld	r24, Z
    3dc0:	91 81       	ldd	r25, Z+1	; 0x01
    3dc2:	01 97       	sbiw	r24, 0x01	; 1
    3dc4:	f1 f7       	brne	.-4      	; 0x3dc2 <LCD_voidInit+0x722>
    3dc6:	fe 01       	movw	r30, r28
    3dc8:	e9 5b       	subi	r30, 0xB9	; 185
    3dca:	ff 4f       	sbci	r31, 0xFF	; 255
    3dcc:	91 83       	std	Z+1, r25	; 0x01
    3dce:	80 83       	st	Z, r24
	_delay_ms(1);
#endif
	LCD_voidSendCommand(LCD_FunctionSet);
    3dd0:	8c e2       	ldi	r24, 0x2C	; 44
    3dd2:	0e 94 50 21 	call	0x42a0	; 0x42a0 <LCD_voidSendCommand>
    3dd6:	fe 01       	movw	r30, r28
    3dd8:	ed 5b       	subi	r30, 0xBD	; 189
    3dda:	ff 4f       	sbci	r31, 0xFF	; 255
    3ddc:	80 e0       	ldi	r24, 0x00	; 0
    3dde:	90 e0       	ldi	r25, 0x00	; 0
    3de0:	a0 e8       	ldi	r26, 0x80	; 128
    3de2:	bf e3       	ldi	r27, 0x3F	; 63
    3de4:	80 83       	st	Z, r24
    3de6:	91 83       	std	Z+1, r25	; 0x01
    3de8:	a2 83       	std	Z+2, r26	; 0x02
    3dea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dec:	8e 01       	movw	r16, r28
    3dee:	01 5c       	subi	r16, 0xC1	; 193
    3df0:	1f 4f       	sbci	r17, 0xFF	; 255
    3df2:	fe 01       	movw	r30, r28
    3df4:	ed 5b       	subi	r30, 0xBD	; 189
    3df6:	ff 4f       	sbci	r31, 0xFF	; 255
    3df8:	60 81       	ld	r22, Z
    3dfa:	71 81       	ldd	r23, Z+1	; 0x01
    3dfc:	82 81       	ldd	r24, Z+2	; 0x02
    3dfe:	93 81       	ldd	r25, Z+3	; 0x03
    3e00:	20 e0       	ldi	r18, 0x00	; 0
    3e02:	30 e0       	ldi	r19, 0x00	; 0
    3e04:	4a e7       	ldi	r20, 0x7A	; 122
    3e06:	55 e4       	ldi	r21, 0x45	; 69
    3e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e0c:	dc 01       	movw	r26, r24
    3e0e:	cb 01       	movw	r24, r22
    3e10:	f8 01       	movw	r30, r16
    3e12:	80 83       	st	Z, r24
    3e14:	91 83       	std	Z+1, r25	; 0x01
    3e16:	a2 83       	std	Z+2, r26	; 0x02
    3e18:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e1a:	fe 01       	movw	r30, r28
    3e1c:	ff 96       	adiw	r30, 0x3f	; 63
    3e1e:	60 81       	ld	r22, Z
    3e20:	71 81       	ldd	r23, Z+1	; 0x01
    3e22:	82 81       	ldd	r24, Z+2	; 0x02
    3e24:	93 81       	ldd	r25, Z+3	; 0x03
    3e26:	20 e0       	ldi	r18, 0x00	; 0
    3e28:	30 e0       	ldi	r19, 0x00	; 0
    3e2a:	40 e8       	ldi	r20, 0x80	; 128
    3e2c:	5f e3       	ldi	r21, 0x3F	; 63
    3e2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e32:	88 23       	and	r24, r24
    3e34:	2c f4       	brge	.+10     	; 0x3e40 <LCD_voidInit+0x7a0>
		__ticks = 1;
    3e36:	81 e0       	ldi	r24, 0x01	; 1
    3e38:	90 e0       	ldi	r25, 0x00	; 0
    3e3a:	9e af       	std	Y+62, r25	; 0x3e
    3e3c:	8d af       	std	Y+61, r24	; 0x3d
    3e3e:	46 c0       	rjmp	.+140    	; 0x3ecc <LCD_voidInit+0x82c>
	else if (__tmp > 65535)
    3e40:	fe 01       	movw	r30, r28
    3e42:	ff 96       	adiw	r30, 0x3f	; 63
    3e44:	60 81       	ld	r22, Z
    3e46:	71 81       	ldd	r23, Z+1	; 0x01
    3e48:	82 81       	ldd	r24, Z+2	; 0x02
    3e4a:	93 81       	ldd	r25, Z+3	; 0x03
    3e4c:	20 e0       	ldi	r18, 0x00	; 0
    3e4e:	3f ef       	ldi	r19, 0xFF	; 255
    3e50:	4f e7       	ldi	r20, 0x7F	; 127
    3e52:	57 e4       	ldi	r21, 0x47	; 71
    3e54:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e58:	18 16       	cp	r1, r24
    3e5a:	64 f5       	brge	.+88     	; 0x3eb4 <LCD_voidInit+0x814>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e5c:	fe 01       	movw	r30, r28
    3e5e:	ed 5b       	subi	r30, 0xBD	; 189
    3e60:	ff 4f       	sbci	r31, 0xFF	; 255
    3e62:	60 81       	ld	r22, Z
    3e64:	71 81       	ldd	r23, Z+1	; 0x01
    3e66:	82 81       	ldd	r24, Z+2	; 0x02
    3e68:	93 81       	ldd	r25, Z+3	; 0x03
    3e6a:	20 e0       	ldi	r18, 0x00	; 0
    3e6c:	30 e0       	ldi	r19, 0x00	; 0
    3e6e:	40 e2       	ldi	r20, 0x20	; 32
    3e70:	51 e4       	ldi	r21, 0x41	; 65
    3e72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e76:	dc 01       	movw	r26, r24
    3e78:	cb 01       	movw	r24, r22
    3e7a:	bc 01       	movw	r22, r24
    3e7c:	cd 01       	movw	r24, r26
    3e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e82:	dc 01       	movw	r26, r24
    3e84:	cb 01       	movw	r24, r22
    3e86:	9e af       	std	Y+62, r25	; 0x3e
    3e88:	8d af       	std	Y+61, r24	; 0x3d
    3e8a:	0f c0       	rjmp	.+30     	; 0x3eaa <LCD_voidInit+0x80a>
    3e8c:	80 e9       	ldi	r24, 0x90	; 144
    3e8e:	91 e0       	ldi	r25, 0x01	; 1
    3e90:	9c af       	std	Y+60, r25	; 0x3c
    3e92:	8b af       	std	Y+59, r24	; 0x3b
    3e94:	8b ad       	ldd	r24, Y+59	; 0x3b
    3e96:	9c ad       	ldd	r25, Y+60	; 0x3c
    3e98:	01 97       	sbiw	r24, 0x01	; 1
    3e9a:	f1 f7       	brne	.-4      	; 0x3e98 <LCD_voidInit+0x7f8>
    3e9c:	9c af       	std	Y+60, r25	; 0x3c
    3e9e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ea0:	8d ad       	ldd	r24, Y+61	; 0x3d
    3ea2:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ea4:	01 97       	sbiw	r24, 0x01	; 1
    3ea6:	9e af       	std	Y+62, r25	; 0x3e
    3ea8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3eaa:	8d ad       	ldd	r24, Y+61	; 0x3d
    3eac:	9e ad       	ldd	r25, Y+62	; 0x3e
    3eae:	00 97       	sbiw	r24, 0x00	; 0
    3eb0:	69 f7       	brne	.-38     	; 0x3e8c <LCD_voidInit+0x7ec>
    3eb2:	16 c0       	rjmp	.+44     	; 0x3ee0 <LCD_voidInit+0x840>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3eb4:	fe 01       	movw	r30, r28
    3eb6:	ff 96       	adiw	r30, 0x3f	; 63
    3eb8:	60 81       	ld	r22, Z
    3eba:	71 81       	ldd	r23, Z+1	; 0x01
    3ebc:	82 81       	ldd	r24, Z+2	; 0x02
    3ebe:	93 81       	ldd	r25, Z+3	; 0x03
    3ec0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ec4:	dc 01       	movw	r26, r24
    3ec6:	cb 01       	movw	r24, r22
    3ec8:	9e af       	std	Y+62, r25	; 0x3e
    3eca:	8d af       	std	Y+61, r24	; 0x3d
    3ecc:	8d ad       	ldd	r24, Y+61	; 0x3d
    3ece:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ed0:	9a af       	std	Y+58, r25	; 0x3a
    3ed2:	89 af       	std	Y+57, r24	; 0x39
    3ed4:	89 ad       	ldd	r24, Y+57	; 0x39
    3ed6:	9a ad       	ldd	r25, Y+58	; 0x3a
    3ed8:	01 97       	sbiw	r24, 0x01	; 1
    3eda:	f1 f7       	brne	.-4      	; 0x3ed8 <LCD_voidInit+0x838>
    3edc:	9a af       	std	Y+58, r25	; 0x3a
    3ede:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	LCD_voidSendCommand(LCD_DisplayOFF);
    3ee0:	88 e0       	ldi	r24, 0x08	; 8
    3ee2:	0e 94 50 21 	call	0x42a0	; 0x42a0 <LCD_voidSendCommand>
    3ee6:	80 e0       	ldi	r24, 0x00	; 0
    3ee8:	90 e0       	ldi	r25, 0x00	; 0
    3eea:	a0 e8       	ldi	r26, 0x80	; 128
    3eec:	bf e3       	ldi	r27, 0x3F	; 63
    3eee:	8d ab       	std	Y+53, r24	; 0x35
    3ef0:	9e ab       	std	Y+54, r25	; 0x36
    3ef2:	af ab       	std	Y+55, r26	; 0x37
    3ef4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ef6:	6d a9       	ldd	r22, Y+53	; 0x35
    3ef8:	7e a9       	ldd	r23, Y+54	; 0x36
    3efa:	8f a9       	ldd	r24, Y+55	; 0x37
    3efc:	98 ad       	ldd	r25, Y+56	; 0x38
    3efe:	20 e0       	ldi	r18, 0x00	; 0
    3f00:	30 e0       	ldi	r19, 0x00	; 0
    3f02:	4a e7       	ldi	r20, 0x7A	; 122
    3f04:	55 e4       	ldi	r21, 0x45	; 69
    3f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f0a:	dc 01       	movw	r26, r24
    3f0c:	cb 01       	movw	r24, r22
    3f0e:	89 ab       	std	Y+49, r24	; 0x31
    3f10:	9a ab       	std	Y+50, r25	; 0x32
    3f12:	ab ab       	std	Y+51, r26	; 0x33
    3f14:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3f16:	69 a9       	ldd	r22, Y+49	; 0x31
    3f18:	7a a9       	ldd	r23, Y+50	; 0x32
    3f1a:	8b a9       	ldd	r24, Y+51	; 0x33
    3f1c:	9c a9       	ldd	r25, Y+52	; 0x34
    3f1e:	20 e0       	ldi	r18, 0x00	; 0
    3f20:	30 e0       	ldi	r19, 0x00	; 0
    3f22:	40 e8       	ldi	r20, 0x80	; 128
    3f24:	5f e3       	ldi	r21, 0x3F	; 63
    3f26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f2a:	88 23       	and	r24, r24
    3f2c:	2c f4       	brge	.+10     	; 0x3f38 <LCD_voidInit+0x898>
		__ticks = 1;
    3f2e:	81 e0       	ldi	r24, 0x01	; 1
    3f30:	90 e0       	ldi	r25, 0x00	; 0
    3f32:	98 ab       	std	Y+48, r25	; 0x30
    3f34:	8f a7       	std	Y+47, r24	; 0x2f
    3f36:	3f c0       	rjmp	.+126    	; 0x3fb6 <LCD_voidInit+0x916>
	else if (__tmp > 65535)
    3f38:	69 a9       	ldd	r22, Y+49	; 0x31
    3f3a:	7a a9       	ldd	r23, Y+50	; 0x32
    3f3c:	8b a9       	ldd	r24, Y+51	; 0x33
    3f3e:	9c a9       	ldd	r25, Y+52	; 0x34
    3f40:	20 e0       	ldi	r18, 0x00	; 0
    3f42:	3f ef       	ldi	r19, 0xFF	; 255
    3f44:	4f e7       	ldi	r20, 0x7F	; 127
    3f46:	57 e4       	ldi	r21, 0x47	; 71
    3f48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f4c:	18 16       	cp	r1, r24
    3f4e:	4c f5       	brge	.+82     	; 0x3fa2 <LCD_voidInit+0x902>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f50:	6d a9       	ldd	r22, Y+53	; 0x35
    3f52:	7e a9       	ldd	r23, Y+54	; 0x36
    3f54:	8f a9       	ldd	r24, Y+55	; 0x37
    3f56:	98 ad       	ldd	r25, Y+56	; 0x38
    3f58:	20 e0       	ldi	r18, 0x00	; 0
    3f5a:	30 e0       	ldi	r19, 0x00	; 0
    3f5c:	40 e2       	ldi	r20, 0x20	; 32
    3f5e:	51 e4       	ldi	r21, 0x41	; 65
    3f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f64:	dc 01       	movw	r26, r24
    3f66:	cb 01       	movw	r24, r22
    3f68:	bc 01       	movw	r22, r24
    3f6a:	cd 01       	movw	r24, r26
    3f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f70:	dc 01       	movw	r26, r24
    3f72:	cb 01       	movw	r24, r22
    3f74:	98 ab       	std	Y+48, r25	; 0x30
    3f76:	8f a7       	std	Y+47, r24	; 0x2f
    3f78:	0f c0       	rjmp	.+30     	; 0x3f98 <LCD_voidInit+0x8f8>
    3f7a:	80 e9       	ldi	r24, 0x90	; 144
    3f7c:	91 e0       	ldi	r25, 0x01	; 1
    3f7e:	9e a7       	std	Y+46, r25	; 0x2e
    3f80:	8d a7       	std	Y+45, r24	; 0x2d
    3f82:	8d a5       	ldd	r24, Y+45	; 0x2d
    3f84:	9e a5       	ldd	r25, Y+46	; 0x2e
    3f86:	01 97       	sbiw	r24, 0x01	; 1
    3f88:	f1 f7       	brne	.-4      	; 0x3f86 <LCD_voidInit+0x8e6>
    3f8a:	9e a7       	std	Y+46, r25	; 0x2e
    3f8c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f8e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f90:	98 a9       	ldd	r25, Y+48	; 0x30
    3f92:	01 97       	sbiw	r24, 0x01	; 1
    3f94:	98 ab       	std	Y+48, r25	; 0x30
    3f96:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f98:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f9a:	98 a9       	ldd	r25, Y+48	; 0x30
    3f9c:	00 97       	sbiw	r24, 0x00	; 0
    3f9e:	69 f7       	brne	.-38     	; 0x3f7a <LCD_voidInit+0x8da>
    3fa0:	14 c0       	rjmp	.+40     	; 0x3fca <LCD_voidInit+0x92a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fa2:	69 a9       	ldd	r22, Y+49	; 0x31
    3fa4:	7a a9       	ldd	r23, Y+50	; 0x32
    3fa6:	8b a9       	ldd	r24, Y+51	; 0x33
    3fa8:	9c a9       	ldd	r25, Y+52	; 0x34
    3faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fae:	dc 01       	movw	r26, r24
    3fb0:	cb 01       	movw	r24, r22
    3fb2:	98 ab       	std	Y+48, r25	; 0x30
    3fb4:	8f a7       	std	Y+47, r24	; 0x2f
    3fb6:	8f a5       	ldd	r24, Y+47	; 0x2f
    3fb8:	98 a9       	ldd	r25, Y+48	; 0x30
    3fba:	9c a7       	std	Y+44, r25	; 0x2c
    3fbc:	8b a7       	std	Y+43, r24	; 0x2b
    3fbe:	8b a5       	ldd	r24, Y+43	; 0x2b
    3fc0:	9c a5       	ldd	r25, Y+44	; 0x2c
    3fc2:	01 97       	sbiw	r24, 0x01	; 1
    3fc4:	f1 f7       	brne	.-4      	; 0x3fc2 <LCD_voidInit+0x922>
    3fc6:	9c a7       	std	Y+44, r25	; 0x2c
    3fc8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_voidSendCommand(LCD_ClearDisplay);
    3fca:	81 e0       	ldi	r24, 0x01	; 1
    3fcc:	0e 94 50 21 	call	0x42a0	; 0x42a0 <LCD_voidSendCommand>
    3fd0:	80 e0       	ldi	r24, 0x00	; 0
    3fd2:	90 e0       	ldi	r25, 0x00	; 0
    3fd4:	a0 ea       	ldi	r26, 0xA0	; 160
    3fd6:	b0 e4       	ldi	r27, 0x40	; 64
    3fd8:	8f a3       	std	Y+39, r24	; 0x27
    3fda:	98 a7       	std	Y+40, r25	; 0x28
    3fdc:	a9 a7       	std	Y+41, r26	; 0x29
    3fde:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fe0:	6f a1       	ldd	r22, Y+39	; 0x27
    3fe2:	78 a5       	ldd	r23, Y+40	; 0x28
    3fe4:	89 a5       	ldd	r24, Y+41	; 0x29
    3fe6:	9a a5       	ldd	r25, Y+42	; 0x2a
    3fe8:	20 e0       	ldi	r18, 0x00	; 0
    3fea:	30 e0       	ldi	r19, 0x00	; 0
    3fec:	4a e7       	ldi	r20, 0x7A	; 122
    3fee:	55 e4       	ldi	r21, 0x45	; 69
    3ff0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ff4:	dc 01       	movw	r26, r24
    3ff6:	cb 01       	movw	r24, r22
    3ff8:	8b a3       	std	Y+35, r24	; 0x23
    3ffa:	9c a3       	std	Y+36, r25	; 0x24
    3ffc:	ad a3       	std	Y+37, r26	; 0x25
    3ffe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4000:	6b a1       	ldd	r22, Y+35	; 0x23
    4002:	7c a1       	ldd	r23, Y+36	; 0x24
    4004:	8d a1       	ldd	r24, Y+37	; 0x25
    4006:	9e a1       	ldd	r25, Y+38	; 0x26
    4008:	20 e0       	ldi	r18, 0x00	; 0
    400a:	30 e0       	ldi	r19, 0x00	; 0
    400c:	40 e8       	ldi	r20, 0x80	; 128
    400e:	5f e3       	ldi	r21, 0x3F	; 63
    4010:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4014:	88 23       	and	r24, r24
    4016:	2c f4       	brge	.+10     	; 0x4022 <LCD_voidInit+0x982>
		__ticks = 1;
    4018:	81 e0       	ldi	r24, 0x01	; 1
    401a:	90 e0       	ldi	r25, 0x00	; 0
    401c:	9a a3       	std	Y+34, r25	; 0x22
    401e:	89 a3       	std	Y+33, r24	; 0x21
    4020:	3f c0       	rjmp	.+126    	; 0x40a0 <LCD_voidInit+0xa00>
	else if (__tmp > 65535)
    4022:	6b a1       	ldd	r22, Y+35	; 0x23
    4024:	7c a1       	ldd	r23, Y+36	; 0x24
    4026:	8d a1       	ldd	r24, Y+37	; 0x25
    4028:	9e a1       	ldd	r25, Y+38	; 0x26
    402a:	20 e0       	ldi	r18, 0x00	; 0
    402c:	3f ef       	ldi	r19, 0xFF	; 255
    402e:	4f e7       	ldi	r20, 0x7F	; 127
    4030:	57 e4       	ldi	r21, 0x47	; 71
    4032:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4036:	18 16       	cp	r1, r24
    4038:	4c f5       	brge	.+82     	; 0x408c <LCD_voidInit+0x9ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    403a:	6f a1       	ldd	r22, Y+39	; 0x27
    403c:	78 a5       	ldd	r23, Y+40	; 0x28
    403e:	89 a5       	ldd	r24, Y+41	; 0x29
    4040:	9a a5       	ldd	r25, Y+42	; 0x2a
    4042:	20 e0       	ldi	r18, 0x00	; 0
    4044:	30 e0       	ldi	r19, 0x00	; 0
    4046:	40 e2       	ldi	r20, 0x20	; 32
    4048:	51 e4       	ldi	r21, 0x41	; 65
    404a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    404e:	dc 01       	movw	r26, r24
    4050:	cb 01       	movw	r24, r22
    4052:	bc 01       	movw	r22, r24
    4054:	cd 01       	movw	r24, r26
    4056:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    405a:	dc 01       	movw	r26, r24
    405c:	cb 01       	movw	r24, r22
    405e:	9a a3       	std	Y+34, r25	; 0x22
    4060:	89 a3       	std	Y+33, r24	; 0x21
    4062:	0f c0       	rjmp	.+30     	; 0x4082 <LCD_voidInit+0x9e2>
    4064:	80 e9       	ldi	r24, 0x90	; 144
    4066:	91 e0       	ldi	r25, 0x01	; 1
    4068:	98 a3       	std	Y+32, r25	; 0x20
    406a:	8f 8f       	std	Y+31, r24	; 0x1f
    406c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    406e:	98 a1       	ldd	r25, Y+32	; 0x20
    4070:	01 97       	sbiw	r24, 0x01	; 1
    4072:	f1 f7       	brne	.-4      	; 0x4070 <LCD_voidInit+0x9d0>
    4074:	98 a3       	std	Y+32, r25	; 0x20
    4076:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4078:	89 a1       	ldd	r24, Y+33	; 0x21
    407a:	9a a1       	ldd	r25, Y+34	; 0x22
    407c:	01 97       	sbiw	r24, 0x01	; 1
    407e:	9a a3       	std	Y+34, r25	; 0x22
    4080:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4082:	89 a1       	ldd	r24, Y+33	; 0x21
    4084:	9a a1       	ldd	r25, Y+34	; 0x22
    4086:	00 97       	sbiw	r24, 0x00	; 0
    4088:	69 f7       	brne	.-38     	; 0x4064 <LCD_voidInit+0x9c4>
    408a:	14 c0       	rjmp	.+40     	; 0x40b4 <LCD_voidInit+0xa14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    408c:	6b a1       	ldd	r22, Y+35	; 0x23
    408e:	7c a1       	ldd	r23, Y+36	; 0x24
    4090:	8d a1       	ldd	r24, Y+37	; 0x25
    4092:	9e a1       	ldd	r25, Y+38	; 0x26
    4094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4098:	dc 01       	movw	r26, r24
    409a:	cb 01       	movw	r24, r22
    409c:	9a a3       	std	Y+34, r25	; 0x22
    409e:	89 a3       	std	Y+33, r24	; 0x21
    40a0:	89 a1       	ldd	r24, Y+33	; 0x21
    40a2:	9a a1       	ldd	r25, Y+34	; 0x22
    40a4:	9e 8f       	std	Y+30, r25	; 0x1e
    40a6:	8d 8f       	std	Y+29, r24	; 0x1d
    40a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    40aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    40ac:	01 97       	sbiw	r24, 0x01	; 1
    40ae:	f1 f7       	brne	.-4      	; 0x40ac <LCD_voidInit+0xa0c>
    40b0:	9e 8f       	std	Y+30, r25	; 0x1e
    40b2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	LCD_voidSendCommand(LCD_DisplayON);
    40b4:	8c e0       	ldi	r24, 0x0C	; 12
    40b6:	0e 94 50 21 	call	0x42a0	; 0x42a0 <LCD_voidSendCommand>
    40ba:	80 e0       	ldi	r24, 0x00	; 0
    40bc:	90 e0       	ldi	r25, 0x00	; 0
    40be:	a0 e8       	ldi	r26, 0x80	; 128
    40c0:	bf e3       	ldi	r27, 0x3F	; 63
    40c2:	89 8f       	std	Y+25, r24	; 0x19
    40c4:	9a 8f       	std	Y+26, r25	; 0x1a
    40c6:	ab 8f       	std	Y+27, r26	; 0x1b
    40c8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40ca:	69 8d       	ldd	r22, Y+25	; 0x19
    40cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    40ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    40d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    40d2:	20 e0       	ldi	r18, 0x00	; 0
    40d4:	30 e0       	ldi	r19, 0x00	; 0
    40d6:	4a e7       	ldi	r20, 0x7A	; 122
    40d8:	55 e4       	ldi	r21, 0x45	; 69
    40da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40de:	dc 01       	movw	r26, r24
    40e0:	cb 01       	movw	r24, r22
    40e2:	8d 8b       	std	Y+21, r24	; 0x15
    40e4:	9e 8b       	std	Y+22, r25	; 0x16
    40e6:	af 8b       	std	Y+23, r26	; 0x17
    40e8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    40ea:	6d 89       	ldd	r22, Y+21	; 0x15
    40ec:	7e 89       	ldd	r23, Y+22	; 0x16
    40ee:	8f 89       	ldd	r24, Y+23	; 0x17
    40f0:	98 8d       	ldd	r25, Y+24	; 0x18
    40f2:	20 e0       	ldi	r18, 0x00	; 0
    40f4:	30 e0       	ldi	r19, 0x00	; 0
    40f6:	40 e8       	ldi	r20, 0x80	; 128
    40f8:	5f e3       	ldi	r21, 0x3F	; 63
    40fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40fe:	88 23       	and	r24, r24
    4100:	2c f4       	brge	.+10     	; 0x410c <LCD_voidInit+0xa6c>
		__ticks = 1;
    4102:	81 e0       	ldi	r24, 0x01	; 1
    4104:	90 e0       	ldi	r25, 0x00	; 0
    4106:	9c 8b       	std	Y+20, r25	; 0x14
    4108:	8b 8b       	std	Y+19, r24	; 0x13
    410a:	3f c0       	rjmp	.+126    	; 0x418a <LCD_voidInit+0xaea>
	else if (__tmp > 65535)
    410c:	6d 89       	ldd	r22, Y+21	; 0x15
    410e:	7e 89       	ldd	r23, Y+22	; 0x16
    4110:	8f 89       	ldd	r24, Y+23	; 0x17
    4112:	98 8d       	ldd	r25, Y+24	; 0x18
    4114:	20 e0       	ldi	r18, 0x00	; 0
    4116:	3f ef       	ldi	r19, 0xFF	; 255
    4118:	4f e7       	ldi	r20, 0x7F	; 127
    411a:	57 e4       	ldi	r21, 0x47	; 71
    411c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4120:	18 16       	cp	r1, r24
    4122:	4c f5       	brge	.+82     	; 0x4176 <LCD_voidInit+0xad6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4124:	69 8d       	ldd	r22, Y+25	; 0x19
    4126:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4128:	8b 8d       	ldd	r24, Y+27	; 0x1b
    412a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    412c:	20 e0       	ldi	r18, 0x00	; 0
    412e:	30 e0       	ldi	r19, 0x00	; 0
    4130:	40 e2       	ldi	r20, 0x20	; 32
    4132:	51 e4       	ldi	r21, 0x41	; 65
    4134:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4138:	dc 01       	movw	r26, r24
    413a:	cb 01       	movw	r24, r22
    413c:	bc 01       	movw	r22, r24
    413e:	cd 01       	movw	r24, r26
    4140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4144:	dc 01       	movw	r26, r24
    4146:	cb 01       	movw	r24, r22
    4148:	9c 8b       	std	Y+20, r25	; 0x14
    414a:	8b 8b       	std	Y+19, r24	; 0x13
    414c:	0f c0       	rjmp	.+30     	; 0x416c <LCD_voidInit+0xacc>
    414e:	80 e9       	ldi	r24, 0x90	; 144
    4150:	91 e0       	ldi	r25, 0x01	; 1
    4152:	9a 8b       	std	Y+18, r25	; 0x12
    4154:	89 8b       	std	Y+17, r24	; 0x11
    4156:	89 89       	ldd	r24, Y+17	; 0x11
    4158:	9a 89       	ldd	r25, Y+18	; 0x12
    415a:	01 97       	sbiw	r24, 0x01	; 1
    415c:	f1 f7       	brne	.-4      	; 0x415a <LCD_voidInit+0xaba>
    415e:	9a 8b       	std	Y+18, r25	; 0x12
    4160:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4162:	8b 89       	ldd	r24, Y+19	; 0x13
    4164:	9c 89       	ldd	r25, Y+20	; 0x14
    4166:	01 97       	sbiw	r24, 0x01	; 1
    4168:	9c 8b       	std	Y+20, r25	; 0x14
    416a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    416c:	8b 89       	ldd	r24, Y+19	; 0x13
    416e:	9c 89       	ldd	r25, Y+20	; 0x14
    4170:	00 97       	sbiw	r24, 0x00	; 0
    4172:	69 f7       	brne	.-38     	; 0x414e <LCD_voidInit+0xaae>
    4174:	14 c0       	rjmp	.+40     	; 0x419e <LCD_voidInit+0xafe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4176:	6d 89       	ldd	r22, Y+21	; 0x15
    4178:	7e 89       	ldd	r23, Y+22	; 0x16
    417a:	8f 89       	ldd	r24, Y+23	; 0x17
    417c:	98 8d       	ldd	r25, Y+24	; 0x18
    417e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4182:	dc 01       	movw	r26, r24
    4184:	cb 01       	movw	r24, r22
    4186:	9c 8b       	std	Y+20, r25	; 0x14
    4188:	8b 8b       	std	Y+19, r24	; 0x13
    418a:	8b 89       	ldd	r24, Y+19	; 0x13
    418c:	9c 89       	ldd	r25, Y+20	; 0x14
    418e:	98 8b       	std	Y+16, r25	; 0x10
    4190:	8f 87       	std	Y+15, r24	; 0x0f
    4192:	8f 85       	ldd	r24, Y+15	; 0x0f
    4194:	98 89       	ldd	r25, Y+16	; 0x10
    4196:	01 97       	sbiw	r24, 0x01	; 1
    4198:	f1 f7       	brne	.-4      	; 0x4196 <LCD_voidInit+0xaf6>
    419a:	98 8b       	std	Y+16, r25	; 0x10
    419c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_voidSendCommand(LCD_EntryMode);
    419e:	86 e0       	ldi	r24, 0x06	; 6
    41a0:	0e 94 50 21 	call	0x42a0	; 0x42a0 <LCD_voidSendCommand>
    41a4:	80 e0       	ldi	r24, 0x00	; 0
    41a6:	90 e0       	ldi	r25, 0x00	; 0
    41a8:	a0 e8       	ldi	r26, 0x80	; 128
    41aa:	bf e3       	ldi	r27, 0x3F	; 63
    41ac:	8b 87       	std	Y+11, r24	; 0x0b
    41ae:	9c 87       	std	Y+12, r25	; 0x0c
    41b0:	ad 87       	std	Y+13, r26	; 0x0d
    41b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    41b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    41b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    41ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    41bc:	20 e0       	ldi	r18, 0x00	; 0
    41be:	30 e0       	ldi	r19, 0x00	; 0
    41c0:	4a e7       	ldi	r20, 0x7A	; 122
    41c2:	55 e4       	ldi	r21, 0x45	; 69
    41c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41c8:	dc 01       	movw	r26, r24
    41ca:	cb 01       	movw	r24, r22
    41cc:	8f 83       	std	Y+7, r24	; 0x07
    41ce:	98 87       	std	Y+8, r25	; 0x08
    41d0:	a9 87       	std	Y+9, r26	; 0x09
    41d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41d4:	6f 81       	ldd	r22, Y+7	; 0x07
    41d6:	78 85       	ldd	r23, Y+8	; 0x08
    41d8:	89 85       	ldd	r24, Y+9	; 0x09
    41da:	9a 85       	ldd	r25, Y+10	; 0x0a
    41dc:	20 e0       	ldi	r18, 0x00	; 0
    41de:	30 e0       	ldi	r19, 0x00	; 0
    41e0:	40 e8       	ldi	r20, 0x80	; 128
    41e2:	5f e3       	ldi	r21, 0x3F	; 63
    41e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41e8:	88 23       	and	r24, r24
    41ea:	2c f4       	brge	.+10     	; 0x41f6 <LCD_voidInit+0xb56>
		__ticks = 1;
    41ec:	81 e0       	ldi	r24, 0x01	; 1
    41ee:	90 e0       	ldi	r25, 0x00	; 0
    41f0:	9e 83       	std	Y+6, r25	; 0x06
    41f2:	8d 83       	std	Y+5, r24	; 0x05
    41f4:	3f c0       	rjmp	.+126    	; 0x4274 <LCD_voidInit+0xbd4>
	else if (__tmp > 65535)
    41f6:	6f 81       	ldd	r22, Y+7	; 0x07
    41f8:	78 85       	ldd	r23, Y+8	; 0x08
    41fa:	89 85       	ldd	r24, Y+9	; 0x09
    41fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    41fe:	20 e0       	ldi	r18, 0x00	; 0
    4200:	3f ef       	ldi	r19, 0xFF	; 255
    4202:	4f e7       	ldi	r20, 0x7F	; 127
    4204:	57 e4       	ldi	r21, 0x47	; 71
    4206:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    420a:	18 16       	cp	r1, r24
    420c:	4c f5       	brge	.+82     	; 0x4260 <LCD_voidInit+0xbc0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    420e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4210:	7c 85       	ldd	r23, Y+12	; 0x0c
    4212:	8d 85       	ldd	r24, Y+13	; 0x0d
    4214:	9e 85       	ldd	r25, Y+14	; 0x0e
    4216:	20 e0       	ldi	r18, 0x00	; 0
    4218:	30 e0       	ldi	r19, 0x00	; 0
    421a:	40 e2       	ldi	r20, 0x20	; 32
    421c:	51 e4       	ldi	r21, 0x41	; 65
    421e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4222:	dc 01       	movw	r26, r24
    4224:	cb 01       	movw	r24, r22
    4226:	bc 01       	movw	r22, r24
    4228:	cd 01       	movw	r24, r26
    422a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    422e:	dc 01       	movw	r26, r24
    4230:	cb 01       	movw	r24, r22
    4232:	9e 83       	std	Y+6, r25	; 0x06
    4234:	8d 83       	std	Y+5, r24	; 0x05
    4236:	0f c0       	rjmp	.+30     	; 0x4256 <LCD_voidInit+0xbb6>
    4238:	80 e9       	ldi	r24, 0x90	; 144
    423a:	91 e0       	ldi	r25, 0x01	; 1
    423c:	9c 83       	std	Y+4, r25	; 0x04
    423e:	8b 83       	std	Y+3, r24	; 0x03
    4240:	8b 81       	ldd	r24, Y+3	; 0x03
    4242:	9c 81       	ldd	r25, Y+4	; 0x04
    4244:	01 97       	sbiw	r24, 0x01	; 1
    4246:	f1 f7       	brne	.-4      	; 0x4244 <LCD_voidInit+0xba4>
    4248:	9c 83       	std	Y+4, r25	; 0x04
    424a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    424c:	8d 81       	ldd	r24, Y+5	; 0x05
    424e:	9e 81       	ldd	r25, Y+6	; 0x06
    4250:	01 97       	sbiw	r24, 0x01	; 1
    4252:	9e 83       	std	Y+6, r25	; 0x06
    4254:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4256:	8d 81       	ldd	r24, Y+5	; 0x05
    4258:	9e 81       	ldd	r25, Y+6	; 0x06
    425a:	00 97       	sbiw	r24, 0x00	; 0
    425c:	69 f7       	brne	.-38     	; 0x4238 <LCD_voidInit+0xb98>
    425e:	14 c0       	rjmp	.+40     	; 0x4288 <LCD_voidInit+0xbe8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4260:	6f 81       	ldd	r22, Y+7	; 0x07
    4262:	78 85       	ldd	r23, Y+8	; 0x08
    4264:	89 85       	ldd	r24, Y+9	; 0x09
    4266:	9a 85       	ldd	r25, Y+10	; 0x0a
    4268:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    426c:	dc 01       	movw	r26, r24
    426e:	cb 01       	movw	r24, r22
    4270:	9e 83       	std	Y+6, r25	; 0x06
    4272:	8d 83       	std	Y+5, r24	; 0x05
    4274:	8d 81       	ldd	r24, Y+5	; 0x05
    4276:	9e 81       	ldd	r25, Y+6	; 0x06
    4278:	9a 83       	std	Y+2, r25	; 0x02
    427a:	89 83       	std	Y+1, r24	; 0x01
    427c:	89 81       	ldd	r24, Y+1	; 0x01
    427e:	9a 81       	ldd	r25, Y+2	; 0x02
    4280:	01 97       	sbiw	r24, 0x01	; 1
    4282:	f1 f7       	brne	.-4      	; 0x4280 <LCD_voidInit+0xbe0>
    4284:	9a 83       	std	Y+2, r25	; 0x02
    4286:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    4288:	c4 57       	subi	r28, 0x74	; 116
    428a:	df 4f       	sbci	r29, 0xFF	; 255
    428c:	0f b6       	in	r0, 0x3f	; 63
    428e:	f8 94       	cli
    4290:	de bf       	out	0x3e, r29	; 62
    4292:	0f be       	out	0x3f, r0	; 63
    4294:	cd bf       	out	0x3d, r28	; 61
    4296:	cf 91       	pop	r28
    4298:	df 91       	pop	r29
    429a:	1f 91       	pop	r17
    429c:	0f 91       	pop	r16
    429e:	08 95       	ret

000042a0 <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 command){
    42a0:	df 93       	push	r29
    42a2:	cf 93       	push	r28
    42a4:	cd b7       	in	r28, 0x3d	; 61
    42a6:	de b7       	in	r29, 0x3e	; 62
    42a8:	2f 97       	sbiw	r28, 0x0f	; 15
    42aa:	0f b6       	in	r0, 0x3f	; 63
    42ac:	f8 94       	cli
    42ae:	de bf       	out	0x3e, r29	; 62
    42b0:	0f be       	out	0x3f, r0	; 63
    42b2:	cd bf       	out	0x3d, r28	; 61
    42b4:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS, Low); //RS = 0
    42b6:	81 e0       	ldi	r24, 0x01	; 1
    42b8:	63 e0       	ldi	r22, 0x03	; 3
    42ba:	40 e0       	ldi	r20, 0x00	; 0
    42bc:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    42c0:	81 e0       	ldi	r24, 0x01	; 1
    42c2:	62 e0       	ldi	r22, 0x02	; 2
    42c4:	41 e0       	ldi	r20, 0x01	; 1
    42c6:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D0, GET_BIT(command, 0));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D1, GET_BIT(command, 1));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D2, GET_BIT(command, 2));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D3, GET_BIT(command, 3));
#endif
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(command, 4));
    42ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    42cc:	82 95       	swap	r24
    42ce:	8f 70       	andi	r24, 0x0F	; 15
    42d0:	98 2f       	mov	r25, r24
    42d2:	91 70       	andi	r25, 0x01	; 1
    42d4:	82 e0       	ldi	r24, 0x02	; 2
    42d6:	60 e0       	ldi	r22, 0x00	; 0
    42d8:	49 2f       	mov	r20, r25
    42da:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(command, 5));
    42de:	8f 85       	ldd	r24, Y+15	; 0x0f
    42e0:	82 95       	swap	r24
    42e2:	86 95       	lsr	r24
    42e4:	87 70       	andi	r24, 0x07	; 7
    42e6:	98 2f       	mov	r25, r24
    42e8:	91 70       	andi	r25, 0x01	; 1
    42ea:	82 e0       	ldi	r24, 0x02	; 2
    42ec:	61 e0       	ldi	r22, 0x01	; 1
    42ee:	49 2f       	mov	r20, r25
    42f0:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(command, 6));
    42f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    42f6:	82 95       	swap	r24
    42f8:	86 95       	lsr	r24
    42fa:	86 95       	lsr	r24
    42fc:	83 70       	andi	r24, 0x03	; 3
    42fe:	98 2f       	mov	r25, r24
    4300:	91 70       	andi	r25, 0x01	; 1
    4302:	82 e0       	ldi	r24, 0x02	; 2
    4304:	62 e0       	ldi	r22, 0x02	; 2
    4306:	49 2f       	mov	r20, r25
    4308:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(command, 7));
    430c:	8f 85       	ldd	r24, Y+15	; 0x0f
    430e:	98 2f       	mov	r25, r24
    4310:	99 1f       	adc	r25, r25
    4312:	99 27       	eor	r25, r25
    4314:	99 1f       	adc	r25, r25
    4316:	82 e0       	ldi	r24, 0x02	; 2
    4318:	64 e0       	ldi	r22, 0x04	; 4
    431a:	49 2f       	mov	r20, r25
    431c:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    4320:	81 e0       	ldi	r24, 0x01	; 1
    4322:	62 e0       	ldi	r22, 0x02	; 2
    4324:	40 e0       	ldi	r20, 0x00	; 0
    4326:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>

#if LCD_BITS == LCD_4_BIT_MODE
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    432a:	81 e0       	ldi	r24, 0x01	; 1
    432c:	62 e0       	ldi	r22, 0x02	; 2
    432e:	41 e0       	ldi	r20, 0x01	; 1
    4330:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(command, 0));
    4334:	8f 85       	ldd	r24, Y+15	; 0x0f
    4336:	98 2f       	mov	r25, r24
    4338:	91 70       	andi	r25, 0x01	; 1
    433a:	82 e0       	ldi	r24, 0x02	; 2
    433c:	60 e0       	ldi	r22, 0x00	; 0
    433e:	49 2f       	mov	r20, r25
    4340:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(command, 1));
    4344:	8f 85       	ldd	r24, Y+15	; 0x0f
    4346:	86 95       	lsr	r24
    4348:	98 2f       	mov	r25, r24
    434a:	91 70       	andi	r25, 0x01	; 1
    434c:	82 e0       	ldi	r24, 0x02	; 2
    434e:	61 e0       	ldi	r22, 0x01	; 1
    4350:	49 2f       	mov	r20, r25
    4352:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(command, 2));
    4356:	8f 85       	ldd	r24, Y+15	; 0x0f
    4358:	86 95       	lsr	r24
    435a:	86 95       	lsr	r24
    435c:	98 2f       	mov	r25, r24
    435e:	91 70       	andi	r25, 0x01	; 1
    4360:	82 e0       	ldi	r24, 0x02	; 2
    4362:	62 e0       	ldi	r22, 0x02	; 2
    4364:	49 2f       	mov	r20, r25
    4366:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(command, 3));
    436a:	8f 85       	ldd	r24, Y+15	; 0x0f
    436c:	86 95       	lsr	r24
    436e:	86 95       	lsr	r24
    4370:	86 95       	lsr	r24
    4372:	98 2f       	mov	r25, r24
    4374:	91 70       	andi	r25, 0x01	; 1
    4376:	82 e0       	ldi	r24, 0x02	; 2
    4378:	64 e0       	ldi	r22, 0x04	; 4
    437a:	49 2f       	mov	r20, r25
    437c:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    4380:	81 e0       	ldi	r24, 0x01	; 1
    4382:	62 e0       	ldi	r22, 0x02	; 2
    4384:	40 e0       	ldi	r20, 0x00	; 0
    4386:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
    438a:	80 e0       	ldi	r24, 0x00	; 0
    438c:	90 e0       	ldi	r25, 0x00	; 0
    438e:	a0 ea       	ldi	r26, 0xA0	; 160
    4390:	b0 e4       	ldi	r27, 0x40	; 64
    4392:	8b 87       	std	Y+11, r24	; 0x0b
    4394:	9c 87       	std	Y+12, r25	; 0x0c
    4396:	ad 87       	std	Y+13, r26	; 0x0d
    4398:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    439a:	6b 85       	ldd	r22, Y+11	; 0x0b
    439c:	7c 85       	ldd	r23, Y+12	; 0x0c
    439e:	8d 85       	ldd	r24, Y+13	; 0x0d
    43a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    43a2:	20 e0       	ldi	r18, 0x00	; 0
    43a4:	30 e0       	ldi	r19, 0x00	; 0
    43a6:	4a e7       	ldi	r20, 0x7A	; 122
    43a8:	55 e4       	ldi	r21, 0x45	; 69
    43aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43ae:	dc 01       	movw	r26, r24
    43b0:	cb 01       	movw	r24, r22
    43b2:	8f 83       	std	Y+7, r24	; 0x07
    43b4:	98 87       	std	Y+8, r25	; 0x08
    43b6:	a9 87       	std	Y+9, r26	; 0x09
    43b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    43ba:	6f 81       	ldd	r22, Y+7	; 0x07
    43bc:	78 85       	ldd	r23, Y+8	; 0x08
    43be:	89 85       	ldd	r24, Y+9	; 0x09
    43c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    43c2:	20 e0       	ldi	r18, 0x00	; 0
    43c4:	30 e0       	ldi	r19, 0x00	; 0
    43c6:	40 e8       	ldi	r20, 0x80	; 128
    43c8:	5f e3       	ldi	r21, 0x3F	; 63
    43ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43ce:	88 23       	and	r24, r24
    43d0:	2c f4       	brge	.+10     	; 0x43dc <LCD_voidSendCommand+0x13c>
		__ticks = 1;
    43d2:	81 e0       	ldi	r24, 0x01	; 1
    43d4:	90 e0       	ldi	r25, 0x00	; 0
    43d6:	9e 83       	std	Y+6, r25	; 0x06
    43d8:	8d 83       	std	Y+5, r24	; 0x05
    43da:	3f c0       	rjmp	.+126    	; 0x445a <LCD_voidSendCommand+0x1ba>
	else if (__tmp > 65535)
    43dc:	6f 81       	ldd	r22, Y+7	; 0x07
    43de:	78 85       	ldd	r23, Y+8	; 0x08
    43e0:	89 85       	ldd	r24, Y+9	; 0x09
    43e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    43e4:	20 e0       	ldi	r18, 0x00	; 0
    43e6:	3f ef       	ldi	r19, 0xFF	; 255
    43e8:	4f e7       	ldi	r20, 0x7F	; 127
    43ea:	57 e4       	ldi	r21, 0x47	; 71
    43ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43f0:	18 16       	cp	r1, r24
    43f2:	4c f5       	brge	.+82     	; 0x4446 <LCD_voidSendCommand+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    43f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    43f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    43fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    43fc:	20 e0       	ldi	r18, 0x00	; 0
    43fe:	30 e0       	ldi	r19, 0x00	; 0
    4400:	40 e2       	ldi	r20, 0x20	; 32
    4402:	51 e4       	ldi	r21, 0x41	; 65
    4404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4408:	dc 01       	movw	r26, r24
    440a:	cb 01       	movw	r24, r22
    440c:	bc 01       	movw	r22, r24
    440e:	cd 01       	movw	r24, r26
    4410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4414:	dc 01       	movw	r26, r24
    4416:	cb 01       	movw	r24, r22
    4418:	9e 83       	std	Y+6, r25	; 0x06
    441a:	8d 83       	std	Y+5, r24	; 0x05
    441c:	0f c0       	rjmp	.+30     	; 0x443c <LCD_voidSendCommand+0x19c>
    441e:	80 e9       	ldi	r24, 0x90	; 144
    4420:	91 e0       	ldi	r25, 0x01	; 1
    4422:	9c 83       	std	Y+4, r25	; 0x04
    4424:	8b 83       	std	Y+3, r24	; 0x03
    4426:	8b 81       	ldd	r24, Y+3	; 0x03
    4428:	9c 81       	ldd	r25, Y+4	; 0x04
    442a:	01 97       	sbiw	r24, 0x01	; 1
    442c:	f1 f7       	brne	.-4      	; 0x442a <LCD_voidSendCommand+0x18a>
    442e:	9c 83       	std	Y+4, r25	; 0x04
    4430:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4432:	8d 81       	ldd	r24, Y+5	; 0x05
    4434:	9e 81       	ldd	r25, Y+6	; 0x06
    4436:	01 97       	sbiw	r24, 0x01	; 1
    4438:	9e 83       	std	Y+6, r25	; 0x06
    443a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    443c:	8d 81       	ldd	r24, Y+5	; 0x05
    443e:	9e 81       	ldd	r25, Y+6	; 0x06
    4440:	00 97       	sbiw	r24, 0x00	; 0
    4442:	69 f7       	brne	.-38     	; 0x441e <LCD_voidSendCommand+0x17e>
    4444:	14 c0       	rjmp	.+40     	; 0x446e <LCD_voidSendCommand+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4446:	6f 81       	ldd	r22, Y+7	; 0x07
    4448:	78 85       	ldd	r23, Y+8	; 0x08
    444a:	89 85       	ldd	r24, Y+9	; 0x09
    444c:	9a 85       	ldd	r25, Y+10	; 0x0a
    444e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4452:	dc 01       	movw	r26, r24
    4454:	cb 01       	movw	r24, r22
    4456:	9e 83       	std	Y+6, r25	; 0x06
    4458:	8d 83       	std	Y+5, r24	; 0x05
    445a:	8d 81       	ldd	r24, Y+5	; 0x05
    445c:	9e 81       	ldd	r25, Y+6	; 0x06
    445e:	9a 83       	std	Y+2, r25	; 0x02
    4460:	89 83       	std	Y+1, r24	; 0x01
    4462:	89 81       	ldd	r24, Y+1	; 0x01
    4464:	9a 81       	ldd	r25, Y+2	; 0x02
    4466:	01 97       	sbiw	r24, 0x01	; 1
    4468:	f1 f7       	brne	.-4      	; 0x4466 <LCD_voidSendCommand+0x1c6>
    446a:	9a 83       	std	Y+2, r25	; 0x02
    446c:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5);
}
    446e:	2f 96       	adiw	r28, 0x0f	; 15
    4470:	0f b6       	in	r0, 0x3f	; 63
    4472:	f8 94       	cli
    4474:	de bf       	out	0x3e, r29	; 62
    4476:	0f be       	out	0x3f, r0	; 63
    4478:	cd bf       	out	0x3d, r28	; 61
    447a:	cf 91       	pop	r28
    447c:	df 91       	pop	r29
    447e:	08 95       	ret

00004480 <LCD_voidSendInitCommand>:

void LCD_voidSendInitCommand(u8 command){
    4480:	df 93       	push	r29
    4482:	cf 93       	push	r28
    4484:	cd b7       	in	r28, 0x3d	; 61
    4486:	de b7       	in	r29, 0x3e	; 62
    4488:	2f 97       	sbiw	r28, 0x0f	; 15
    448a:	0f b6       	in	r0, 0x3f	; 63
    448c:	f8 94       	cli
    448e:	de bf       	out	0x3e, r29	; 62
    4490:	0f be       	out	0x3f, r0	; 63
    4492:	cd bf       	out	0x3d, r28	; 61
    4494:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS, Low); //RS = 0
    4496:	81 e0       	ldi	r24, 0x01	; 1
    4498:	63 e0       	ldi	r22, 0x03	; 3
    449a:	40 e0       	ldi	r20, 0x00	; 0
    449c:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    44a0:	81 e0       	ldi	r24, 0x01	; 1
    44a2:	62 e0       	ldi	r22, 0x02	; 2
    44a4:	41 e0       	ldi	r20, 0x01	; 1
    44a6:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(command, 4));
    44aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    44ac:	82 95       	swap	r24
    44ae:	8f 70       	andi	r24, 0x0F	; 15
    44b0:	98 2f       	mov	r25, r24
    44b2:	91 70       	andi	r25, 0x01	; 1
    44b4:	82 e0       	ldi	r24, 0x02	; 2
    44b6:	60 e0       	ldi	r22, 0x00	; 0
    44b8:	49 2f       	mov	r20, r25
    44ba:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(command, 5));
    44be:	8f 85       	ldd	r24, Y+15	; 0x0f
    44c0:	82 95       	swap	r24
    44c2:	86 95       	lsr	r24
    44c4:	87 70       	andi	r24, 0x07	; 7
    44c6:	98 2f       	mov	r25, r24
    44c8:	91 70       	andi	r25, 0x01	; 1
    44ca:	82 e0       	ldi	r24, 0x02	; 2
    44cc:	61 e0       	ldi	r22, 0x01	; 1
    44ce:	49 2f       	mov	r20, r25
    44d0:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(command, 6));
    44d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    44d6:	82 95       	swap	r24
    44d8:	86 95       	lsr	r24
    44da:	86 95       	lsr	r24
    44dc:	83 70       	andi	r24, 0x03	; 3
    44de:	98 2f       	mov	r25, r24
    44e0:	91 70       	andi	r25, 0x01	; 1
    44e2:	82 e0       	ldi	r24, 0x02	; 2
    44e4:	62 e0       	ldi	r22, 0x02	; 2
    44e6:	49 2f       	mov	r20, r25
    44e8:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(command, 7));
    44ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    44ee:	98 2f       	mov	r25, r24
    44f0:	99 1f       	adc	r25, r25
    44f2:	99 27       	eor	r25, r25
    44f4:	99 1f       	adc	r25, r25
    44f6:	82 e0       	ldi	r24, 0x02	; 2
    44f8:	64 e0       	ldi	r22, 0x04	; 4
    44fa:	49 2f       	mov	r20, r25
    44fc:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    4500:	81 e0       	ldi	r24, 0x01	; 1
    4502:	62 e0       	ldi	r22, 0x02	; 2
    4504:	40 e0       	ldi	r20, 0x00	; 0
    4506:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
    450a:	80 e0       	ldi	r24, 0x00	; 0
    450c:	90 e0       	ldi	r25, 0x00	; 0
    450e:	a0 ea       	ldi	r26, 0xA0	; 160
    4510:	b0 e4       	ldi	r27, 0x40	; 64
    4512:	8b 87       	std	Y+11, r24	; 0x0b
    4514:	9c 87       	std	Y+12, r25	; 0x0c
    4516:	ad 87       	std	Y+13, r26	; 0x0d
    4518:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    451a:	6b 85       	ldd	r22, Y+11	; 0x0b
    451c:	7c 85       	ldd	r23, Y+12	; 0x0c
    451e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4520:	9e 85       	ldd	r25, Y+14	; 0x0e
    4522:	20 e0       	ldi	r18, 0x00	; 0
    4524:	30 e0       	ldi	r19, 0x00	; 0
    4526:	4a e7       	ldi	r20, 0x7A	; 122
    4528:	55 e4       	ldi	r21, 0x45	; 69
    452a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    452e:	dc 01       	movw	r26, r24
    4530:	cb 01       	movw	r24, r22
    4532:	8f 83       	std	Y+7, r24	; 0x07
    4534:	98 87       	std	Y+8, r25	; 0x08
    4536:	a9 87       	std	Y+9, r26	; 0x09
    4538:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    453a:	6f 81       	ldd	r22, Y+7	; 0x07
    453c:	78 85       	ldd	r23, Y+8	; 0x08
    453e:	89 85       	ldd	r24, Y+9	; 0x09
    4540:	9a 85       	ldd	r25, Y+10	; 0x0a
    4542:	20 e0       	ldi	r18, 0x00	; 0
    4544:	30 e0       	ldi	r19, 0x00	; 0
    4546:	40 e8       	ldi	r20, 0x80	; 128
    4548:	5f e3       	ldi	r21, 0x3F	; 63
    454a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    454e:	88 23       	and	r24, r24
    4550:	2c f4       	brge	.+10     	; 0x455c <LCD_voidSendInitCommand+0xdc>
		__ticks = 1;
    4552:	81 e0       	ldi	r24, 0x01	; 1
    4554:	90 e0       	ldi	r25, 0x00	; 0
    4556:	9e 83       	std	Y+6, r25	; 0x06
    4558:	8d 83       	std	Y+5, r24	; 0x05
    455a:	3f c0       	rjmp	.+126    	; 0x45da <LCD_voidSendInitCommand+0x15a>
	else if (__tmp > 65535)
    455c:	6f 81       	ldd	r22, Y+7	; 0x07
    455e:	78 85       	ldd	r23, Y+8	; 0x08
    4560:	89 85       	ldd	r24, Y+9	; 0x09
    4562:	9a 85       	ldd	r25, Y+10	; 0x0a
    4564:	20 e0       	ldi	r18, 0x00	; 0
    4566:	3f ef       	ldi	r19, 0xFF	; 255
    4568:	4f e7       	ldi	r20, 0x7F	; 127
    456a:	57 e4       	ldi	r21, 0x47	; 71
    456c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4570:	18 16       	cp	r1, r24
    4572:	4c f5       	brge	.+82     	; 0x45c6 <LCD_voidSendInitCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4574:	6b 85       	ldd	r22, Y+11	; 0x0b
    4576:	7c 85       	ldd	r23, Y+12	; 0x0c
    4578:	8d 85       	ldd	r24, Y+13	; 0x0d
    457a:	9e 85       	ldd	r25, Y+14	; 0x0e
    457c:	20 e0       	ldi	r18, 0x00	; 0
    457e:	30 e0       	ldi	r19, 0x00	; 0
    4580:	40 e2       	ldi	r20, 0x20	; 32
    4582:	51 e4       	ldi	r21, 0x41	; 65
    4584:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4588:	dc 01       	movw	r26, r24
    458a:	cb 01       	movw	r24, r22
    458c:	bc 01       	movw	r22, r24
    458e:	cd 01       	movw	r24, r26
    4590:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4594:	dc 01       	movw	r26, r24
    4596:	cb 01       	movw	r24, r22
    4598:	9e 83       	std	Y+6, r25	; 0x06
    459a:	8d 83       	std	Y+5, r24	; 0x05
    459c:	0f c0       	rjmp	.+30     	; 0x45bc <LCD_voidSendInitCommand+0x13c>
    459e:	80 e9       	ldi	r24, 0x90	; 144
    45a0:	91 e0       	ldi	r25, 0x01	; 1
    45a2:	9c 83       	std	Y+4, r25	; 0x04
    45a4:	8b 83       	std	Y+3, r24	; 0x03
    45a6:	8b 81       	ldd	r24, Y+3	; 0x03
    45a8:	9c 81       	ldd	r25, Y+4	; 0x04
    45aa:	01 97       	sbiw	r24, 0x01	; 1
    45ac:	f1 f7       	brne	.-4      	; 0x45aa <LCD_voidSendInitCommand+0x12a>
    45ae:	9c 83       	std	Y+4, r25	; 0x04
    45b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45b2:	8d 81       	ldd	r24, Y+5	; 0x05
    45b4:	9e 81       	ldd	r25, Y+6	; 0x06
    45b6:	01 97       	sbiw	r24, 0x01	; 1
    45b8:	9e 83       	std	Y+6, r25	; 0x06
    45ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45bc:	8d 81       	ldd	r24, Y+5	; 0x05
    45be:	9e 81       	ldd	r25, Y+6	; 0x06
    45c0:	00 97       	sbiw	r24, 0x00	; 0
    45c2:	69 f7       	brne	.-38     	; 0x459e <LCD_voidSendInitCommand+0x11e>
    45c4:	14 c0       	rjmp	.+40     	; 0x45ee <LCD_voidSendInitCommand+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45c6:	6f 81       	ldd	r22, Y+7	; 0x07
    45c8:	78 85       	ldd	r23, Y+8	; 0x08
    45ca:	89 85       	ldd	r24, Y+9	; 0x09
    45cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    45ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45d2:	dc 01       	movw	r26, r24
    45d4:	cb 01       	movw	r24, r22
    45d6:	9e 83       	std	Y+6, r25	; 0x06
    45d8:	8d 83       	std	Y+5, r24	; 0x05
    45da:	8d 81       	ldd	r24, Y+5	; 0x05
    45dc:	9e 81       	ldd	r25, Y+6	; 0x06
    45de:	9a 83       	std	Y+2, r25	; 0x02
    45e0:	89 83       	std	Y+1, r24	; 0x01
    45e2:	89 81       	ldd	r24, Y+1	; 0x01
    45e4:	9a 81       	ldd	r25, Y+2	; 0x02
    45e6:	01 97       	sbiw	r24, 0x01	; 1
    45e8:	f1 f7       	brne	.-4      	; 0x45e6 <LCD_voidSendInitCommand+0x166>
    45ea:	9a 83       	std	Y+2, r25	; 0x02
    45ec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    45ee:	2f 96       	adiw	r28, 0x0f	; 15
    45f0:	0f b6       	in	r0, 0x3f	; 63
    45f2:	f8 94       	cli
    45f4:	de bf       	out	0x3e, r29	; 62
    45f6:	0f be       	out	0x3f, r0	; 63
    45f8:	cd bf       	out	0x3d, r28	; 61
    45fa:	cf 91       	pop	r28
    45fc:	df 91       	pop	r29
    45fe:	08 95       	ret

00004600 <LCD_voidWriteChar>:

void LCD_voidWriteChar(u8 data){
    4600:	df 93       	push	r29
    4602:	cf 93       	push	r28
    4604:	cd b7       	in	r28, 0x3d	; 61
    4606:	de b7       	in	r29, 0x3e	; 62
    4608:	2f 97       	sbiw	r28, 0x0f	; 15
    460a:	0f b6       	in	r0, 0x3f	; 63
    460c:	f8 94       	cli
    460e:	de bf       	out	0x3e, r29	; 62
    4610:	0f be       	out	0x3f, r0	; 63
    4612:	cd bf       	out	0x3d, r28	; 61
    4614:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS, High); //RS = 1
    4616:	81 e0       	ldi	r24, 0x01	; 1
    4618:	63 e0       	ldi	r22, 0x03	; 3
    461a:	41 e0       	ldi	r20, 0x01	; 1
    461c:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    4620:	81 e0       	ldi	r24, 0x01	; 1
    4622:	62 e0       	ldi	r22, 0x02	; 2
    4624:	41 e0       	ldi	r20, 0x01	; 1
    4626:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D0, GET_BIT(data, 0));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D1, GET_BIT(data, 1));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D2, GET_BIT(data, 2));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D3, GET_BIT(data, 3));
#endif
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(data, 4));
    462a:	8f 85       	ldd	r24, Y+15	; 0x0f
    462c:	82 95       	swap	r24
    462e:	8f 70       	andi	r24, 0x0F	; 15
    4630:	98 2f       	mov	r25, r24
    4632:	91 70       	andi	r25, 0x01	; 1
    4634:	82 e0       	ldi	r24, 0x02	; 2
    4636:	60 e0       	ldi	r22, 0x00	; 0
    4638:	49 2f       	mov	r20, r25
    463a:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(data, 5));
    463e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4640:	82 95       	swap	r24
    4642:	86 95       	lsr	r24
    4644:	87 70       	andi	r24, 0x07	; 7
    4646:	98 2f       	mov	r25, r24
    4648:	91 70       	andi	r25, 0x01	; 1
    464a:	82 e0       	ldi	r24, 0x02	; 2
    464c:	61 e0       	ldi	r22, 0x01	; 1
    464e:	49 2f       	mov	r20, r25
    4650:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(data, 6));
    4654:	8f 85       	ldd	r24, Y+15	; 0x0f
    4656:	82 95       	swap	r24
    4658:	86 95       	lsr	r24
    465a:	86 95       	lsr	r24
    465c:	83 70       	andi	r24, 0x03	; 3
    465e:	98 2f       	mov	r25, r24
    4660:	91 70       	andi	r25, 0x01	; 1
    4662:	82 e0       	ldi	r24, 0x02	; 2
    4664:	62 e0       	ldi	r22, 0x02	; 2
    4666:	49 2f       	mov	r20, r25
    4668:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(data, 7));
    466c:	8f 85       	ldd	r24, Y+15	; 0x0f
    466e:	98 2f       	mov	r25, r24
    4670:	99 1f       	adc	r25, r25
    4672:	99 27       	eor	r25, r25
    4674:	99 1f       	adc	r25, r25
    4676:	82 e0       	ldi	r24, 0x02	; 2
    4678:	64 e0       	ldi	r22, 0x04	; 4
    467a:	49 2f       	mov	r20, r25
    467c:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    4680:	81 e0       	ldi	r24, 0x01	; 1
    4682:	62 e0       	ldi	r22, 0x02	; 2
    4684:	40 e0       	ldi	r20, 0x00	; 0
    4686:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>

#if LCD_BITS == LCD_4_BIT_MODE
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    468a:	81 e0       	ldi	r24, 0x01	; 1
    468c:	62 e0       	ldi	r22, 0x02	; 2
    468e:	41 e0       	ldi	r20, 0x01	; 1
    4690:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(data, 0));
    4694:	8f 85       	ldd	r24, Y+15	; 0x0f
    4696:	98 2f       	mov	r25, r24
    4698:	91 70       	andi	r25, 0x01	; 1
    469a:	82 e0       	ldi	r24, 0x02	; 2
    469c:	60 e0       	ldi	r22, 0x00	; 0
    469e:	49 2f       	mov	r20, r25
    46a0:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(data, 1));
    46a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    46a6:	86 95       	lsr	r24
    46a8:	98 2f       	mov	r25, r24
    46aa:	91 70       	andi	r25, 0x01	; 1
    46ac:	82 e0       	ldi	r24, 0x02	; 2
    46ae:	61 e0       	ldi	r22, 0x01	; 1
    46b0:	49 2f       	mov	r20, r25
    46b2:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(data, 2));
    46b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    46b8:	86 95       	lsr	r24
    46ba:	86 95       	lsr	r24
    46bc:	98 2f       	mov	r25, r24
    46be:	91 70       	andi	r25, 0x01	; 1
    46c0:	82 e0       	ldi	r24, 0x02	; 2
    46c2:	62 e0       	ldi	r22, 0x02	; 2
    46c4:	49 2f       	mov	r20, r25
    46c6:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(data, 3));
    46ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    46cc:	86 95       	lsr	r24
    46ce:	86 95       	lsr	r24
    46d0:	86 95       	lsr	r24
    46d2:	98 2f       	mov	r25, r24
    46d4:	91 70       	andi	r25, 0x01	; 1
    46d6:	82 e0       	ldi	r24, 0x02	; 2
    46d8:	64 e0       	ldi	r22, 0x04	; 4
    46da:	49 2f       	mov	r20, r25
    46dc:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    46e0:	81 e0       	ldi	r24, 0x01	; 1
    46e2:	62 e0       	ldi	r22, 0x02	; 2
    46e4:	40 e0       	ldi	r20, 0x00	; 0
    46e6:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
    46ea:	80 e0       	ldi	r24, 0x00	; 0
    46ec:	90 e0       	ldi	r25, 0x00	; 0
    46ee:	a0 ea       	ldi	r26, 0xA0	; 160
    46f0:	b0 e4       	ldi	r27, 0x40	; 64
    46f2:	8b 87       	std	Y+11, r24	; 0x0b
    46f4:	9c 87       	std	Y+12, r25	; 0x0c
    46f6:	ad 87       	std	Y+13, r26	; 0x0d
    46f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    46fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    46fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    4700:	9e 85       	ldd	r25, Y+14	; 0x0e
    4702:	20 e0       	ldi	r18, 0x00	; 0
    4704:	30 e0       	ldi	r19, 0x00	; 0
    4706:	4a e7       	ldi	r20, 0x7A	; 122
    4708:	55 e4       	ldi	r21, 0x45	; 69
    470a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    470e:	dc 01       	movw	r26, r24
    4710:	cb 01       	movw	r24, r22
    4712:	8f 83       	std	Y+7, r24	; 0x07
    4714:	98 87       	std	Y+8, r25	; 0x08
    4716:	a9 87       	std	Y+9, r26	; 0x09
    4718:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    471a:	6f 81       	ldd	r22, Y+7	; 0x07
    471c:	78 85       	ldd	r23, Y+8	; 0x08
    471e:	89 85       	ldd	r24, Y+9	; 0x09
    4720:	9a 85       	ldd	r25, Y+10	; 0x0a
    4722:	20 e0       	ldi	r18, 0x00	; 0
    4724:	30 e0       	ldi	r19, 0x00	; 0
    4726:	40 e8       	ldi	r20, 0x80	; 128
    4728:	5f e3       	ldi	r21, 0x3F	; 63
    472a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    472e:	88 23       	and	r24, r24
    4730:	2c f4       	brge	.+10     	; 0x473c <LCD_voidWriteChar+0x13c>
		__ticks = 1;
    4732:	81 e0       	ldi	r24, 0x01	; 1
    4734:	90 e0       	ldi	r25, 0x00	; 0
    4736:	9e 83       	std	Y+6, r25	; 0x06
    4738:	8d 83       	std	Y+5, r24	; 0x05
    473a:	3f c0       	rjmp	.+126    	; 0x47ba <LCD_voidWriteChar+0x1ba>
	else if (__tmp > 65535)
    473c:	6f 81       	ldd	r22, Y+7	; 0x07
    473e:	78 85       	ldd	r23, Y+8	; 0x08
    4740:	89 85       	ldd	r24, Y+9	; 0x09
    4742:	9a 85       	ldd	r25, Y+10	; 0x0a
    4744:	20 e0       	ldi	r18, 0x00	; 0
    4746:	3f ef       	ldi	r19, 0xFF	; 255
    4748:	4f e7       	ldi	r20, 0x7F	; 127
    474a:	57 e4       	ldi	r21, 0x47	; 71
    474c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4750:	18 16       	cp	r1, r24
    4752:	4c f5       	brge	.+82     	; 0x47a6 <LCD_voidWriteChar+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4754:	6b 85       	ldd	r22, Y+11	; 0x0b
    4756:	7c 85       	ldd	r23, Y+12	; 0x0c
    4758:	8d 85       	ldd	r24, Y+13	; 0x0d
    475a:	9e 85       	ldd	r25, Y+14	; 0x0e
    475c:	20 e0       	ldi	r18, 0x00	; 0
    475e:	30 e0       	ldi	r19, 0x00	; 0
    4760:	40 e2       	ldi	r20, 0x20	; 32
    4762:	51 e4       	ldi	r21, 0x41	; 65
    4764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4768:	dc 01       	movw	r26, r24
    476a:	cb 01       	movw	r24, r22
    476c:	bc 01       	movw	r22, r24
    476e:	cd 01       	movw	r24, r26
    4770:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4774:	dc 01       	movw	r26, r24
    4776:	cb 01       	movw	r24, r22
    4778:	9e 83       	std	Y+6, r25	; 0x06
    477a:	8d 83       	std	Y+5, r24	; 0x05
    477c:	0f c0       	rjmp	.+30     	; 0x479c <LCD_voidWriteChar+0x19c>
    477e:	80 e9       	ldi	r24, 0x90	; 144
    4780:	91 e0       	ldi	r25, 0x01	; 1
    4782:	9c 83       	std	Y+4, r25	; 0x04
    4784:	8b 83       	std	Y+3, r24	; 0x03
    4786:	8b 81       	ldd	r24, Y+3	; 0x03
    4788:	9c 81       	ldd	r25, Y+4	; 0x04
    478a:	01 97       	sbiw	r24, 0x01	; 1
    478c:	f1 f7       	brne	.-4      	; 0x478a <LCD_voidWriteChar+0x18a>
    478e:	9c 83       	std	Y+4, r25	; 0x04
    4790:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4792:	8d 81       	ldd	r24, Y+5	; 0x05
    4794:	9e 81       	ldd	r25, Y+6	; 0x06
    4796:	01 97       	sbiw	r24, 0x01	; 1
    4798:	9e 83       	std	Y+6, r25	; 0x06
    479a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    479c:	8d 81       	ldd	r24, Y+5	; 0x05
    479e:	9e 81       	ldd	r25, Y+6	; 0x06
    47a0:	00 97       	sbiw	r24, 0x00	; 0
    47a2:	69 f7       	brne	.-38     	; 0x477e <LCD_voidWriteChar+0x17e>
    47a4:	14 c0       	rjmp	.+40     	; 0x47ce <LCD_voidWriteChar+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47a6:	6f 81       	ldd	r22, Y+7	; 0x07
    47a8:	78 85       	ldd	r23, Y+8	; 0x08
    47aa:	89 85       	ldd	r24, Y+9	; 0x09
    47ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    47ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47b2:	dc 01       	movw	r26, r24
    47b4:	cb 01       	movw	r24, r22
    47b6:	9e 83       	std	Y+6, r25	; 0x06
    47b8:	8d 83       	std	Y+5, r24	; 0x05
    47ba:	8d 81       	ldd	r24, Y+5	; 0x05
    47bc:	9e 81       	ldd	r25, Y+6	; 0x06
    47be:	9a 83       	std	Y+2, r25	; 0x02
    47c0:	89 83       	std	Y+1, r24	; 0x01
    47c2:	89 81       	ldd	r24, Y+1	; 0x01
    47c4:	9a 81       	ldd	r25, Y+2	; 0x02
    47c6:	01 97       	sbiw	r24, 0x01	; 1
    47c8:	f1 f7       	brne	.-4      	; 0x47c6 <LCD_voidWriteChar+0x1c6>
    47ca:	9a 83       	std	Y+2, r25	; 0x02
    47cc:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5);
}
    47ce:	2f 96       	adiw	r28, 0x0f	; 15
    47d0:	0f b6       	in	r0, 0x3f	; 63
    47d2:	f8 94       	cli
    47d4:	de bf       	out	0x3e, r29	; 62
    47d6:	0f be       	out	0x3f, r0	; 63
    47d8:	cd bf       	out	0x3d, r28	; 61
    47da:	cf 91       	pop	r28
    47dc:	df 91       	pop	r29
    47de:	08 95       	ret

000047e0 <LCD_voidWriteString>:

void LCD_voidWriteString(u8* Local_Data){
    47e0:	df 93       	push	r29
    47e2:	cf 93       	push	r28
    47e4:	00 d0       	rcall	.+0      	; 0x47e6 <LCD_voidWriteString+0x6>
    47e6:	0f 92       	push	r0
    47e8:	cd b7       	in	r28, 0x3d	; 61
    47ea:	de b7       	in	r29, 0x3e	; 62
    47ec:	9b 83       	std	Y+3, r25	; 0x03
    47ee:	8a 83       	std	Y+2, r24	; 0x02
	u8 index = 0;
    47f0:	19 82       	std	Y+1, r1	; 0x01
    47f2:	0e c0       	rjmp	.+28     	; 0x4810 <LCD_voidWriteString+0x30>
	while(Local_Data[index] != '\0'){
		LCD_voidWriteChar(Local_Data[index]);
    47f4:	89 81       	ldd	r24, Y+1	; 0x01
    47f6:	28 2f       	mov	r18, r24
    47f8:	30 e0       	ldi	r19, 0x00	; 0
    47fa:	8a 81       	ldd	r24, Y+2	; 0x02
    47fc:	9b 81       	ldd	r25, Y+3	; 0x03
    47fe:	fc 01       	movw	r30, r24
    4800:	e2 0f       	add	r30, r18
    4802:	f3 1f       	adc	r31, r19
    4804:	80 81       	ld	r24, Z
    4806:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
		index++;
    480a:	89 81       	ldd	r24, Y+1	; 0x01
    480c:	8f 5f       	subi	r24, 0xFF	; 255
    480e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}

void LCD_voidWriteString(u8* Local_Data){
	u8 index = 0;
	while(Local_Data[index] != '\0'){
    4810:	89 81       	ldd	r24, Y+1	; 0x01
    4812:	28 2f       	mov	r18, r24
    4814:	30 e0       	ldi	r19, 0x00	; 0
    4816:	8a 81       	ldd	r24, Y+2	; 0x02
    4818:	9b 81       	ldd	r25, Y+3	; 0x03
    481a:	fc 01       	movw	r30, r24
    481c:	e2 0f       	add	r30, r18
    481e:	f3 1f       	adc	r31, r19
    4820:	80 81       	ld	r24, Z
    4822:	88 23       	and	r24, r24
    4824:	39 f7       	brne	.-50     	; 0x47f4 <LCD_voidWriteString+0x14>
		LCD_voidWriteChar(Local_Data[index]);
		index++;
	}
}
    4826:	0f 90       	pop	r0
    4828:	0f 90       	pop	r0
    482a:	0f 90       	pop	r0
    482c:	cf 91       	pop	r28
    482e:	df 91       	pop	r29
    4830:	08 95       	ret

00004832 <IntToString>:

u8* IntToString(s32 anInteger,u8 *str){
    4832:	0f 93       	push	r16
    4834:	1f 93       	push	r17
    4836:	df 93       	push	r29
    4838:	cf 93       	push	r28
    483a:	cd b7       	in	r28, 0x3d	; 61
    483c:	de b7       	in	r29, 0x3e	; 62
    483e:	2e 97       	sbiw	r28, 0x0e	; 14
    4840:	0f b6       	in	r0, 0x3f	; 63
    4842:	f8 94       	cli
    4844:	de bf       	out	0x3e, r29	; 62
    4846:	0f be       	out	0x3f, r0	; 63
    4848:	cd bf       	out	0x3d, r28	; 61
    484a:	69 87       	std	Y+9, r22	; 0x09
    484c:	7a 87       	std	Y+10, r23	; 0x0a
    484e:	8b 87       	std	Y+11, r24	; 0x0b
    4850:	9c 87       	std	Y+12, r25	; 0x0c
    4852:	5e 87       	std	Y+14, r21	; 0x0e
    4854:	4d 87       	std	Y+13, r20	; 0x0d
	u32 flag = 0;
    4856:	1d 82       	std	Y+5, r1	; 0x05
    4858:	1e 82       	std	Y+6, r1	; 0x06
    485a:	1f 82       	std	Y+7, r1	; 0x07
    485c:	18 86       	std	Y+8, r1	; 0x08
	u32 i = INT_TO_STRING_ARR_SIZE - 1;
    485e:	83 e1       	ldi	r24, 0x13	; 19
    4860:	90 e0       	ldi	r25, 0x00	; 0
    4862:	a0 e0       	ldi	r26, 0x00	; 0
    4864:	b0 e0       	ldi	r27, 0x00	; 0
    4866:	89 83       	std	Y+1, r24	; 0x01
    4868:	9a 83       	std	Y+2, r25	; 0x02
    486a:	ab 83       	std	Y+3, r26	; 0x03
    486c:	bc 83       	std	Y+4, r27	; 0x04
	str[i--] = '\0';
    486e:	29 81       	ldd	r18, Y+1	; 0x01
    4870:	3a 81       	ldd	r19, Y+2	; 0x02
    4872:	8d 85       	ldd	r24, Y+13	; 0x0d
    4874:	9e 85       	ldd	r25, Y+14	; 0x0e
    4876:	fc 01       	movw	r30, r24
    4878:	e2 0f       	add	r30, r18
    487a:	f3 1f       	adc	r31, r19
    487c:	10 82       	st	Z, r1
    487e:	89 81       	ldd	r24, Y+1	; 0x01
    4880:	9a 81       	ldd	r25, Y+2	; 0x02
    4882:	ab 81       	ldd	r26, Y+3	; 0x03
    4884:	bc 81       	ldd	r27, Y+4	; 0x04
    4886:	01 97       	sbiw	r24, 0x01	; 1
    4888:	a1 09       	sbc	r26, r1
    488a:	b1 09       	sbc	r27, r1
    488c:	89 83       	std	Y+1, r24	; 0x01
    488e:	9a 83       	std	Y+2, r25	; 0x02
    4890:	ab 83       	std	Y+3, r26	; 0x03
    4892:	bc 83       	std	Y+4, r27	; 0x04
	if (anInteger < 0) {
    4894:	89 85       	ldd	r24, Y+9	; 0x09
    4896:	9a 85       	ldd	r25, Y+10	; 0x0a
    4898:	ab 85       	ldd	r26, Y+11	; 0x0b
    489a:	bc 85       	ldd	r27, Y+12	; 0x0c
    489c:	bb 23       	and	r27, r27
    489e:	0c f0       	brlt	.+2      	; 0x48a2 <IntToString+0x70>
    48a0:	4d c0       	rjmp	.+154    	; 0x493c <IntToString+0x10a>
		flag = 1;
    48a2:	81 e0       	ldi	r24, 0x01	; 1
    48a4:	90 e0       	ldi	r25, 0x00	; 0
    48a6:	a0 e0       	ldi	r26, 0x00	; 0
    48a8:	b0 e0       	ldi	r27, 0x00	; 0
    48aa:	8d 83       	std	Y+5, r24	; 0x05
    48ac:	9e 83       	std	Y+6, r25	; 0x06
    48ae:	af 83       	std	Y+7, r26	; 0x07
    48b0:	b8 87       	std	Y+8, r27	; 0x08
		anInteger = -anInteger;
    48b2:	89 85       	ldd	r24, Y+9	; 0x09
    48b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    48b6:	ab 85       	ldd	r26, Y+11	; 0x0b
    48b8:	bc 85       	ldd	r27, Y+12	; 0x0c
    48ba:	b0 95       	com	r27
    48bc:	a0 95       	com	r26
    48be:	90 95       	com	r25
    48c0:	81 95       	neg	r24
    48c2:	9f 4f       	sbci	r25, 0xFF	; 255
    48c4:	af 4f       	sbci	r26, 0xFF	; 255
    48c6:	bf 4f       	sbci	r27, 0xFF	; 255
    48c8:	89 87       	std	Y+9, r24	; 0x09
    48ca:	9a 87       	std	Y+10, r25	; 0x0a
    48cc:	ab 87       	std	Y+11, r26	; 0x0b
    48ce:	bc 87       	std	Y+12, r27	; 0x0c
    48d0:	35 c0       	rjmp	.+106    	; 0x493c <IntToString+0x10a>
	}
	while (anInteger != 0) {
		str[i--] = (anInteger % 10) + '0';
    48d2:	29 81       	ldd	r18, Y+1	; 0x01
    48d4:	3a 81       	ldd	r19, Y+2	; 0x02
    48d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    48d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    48da:	8c 01       	movw	r16, r24
    48dc:	02 0f       	add	r16, r18
    48de:	13 1f       	adc	r17, r19
    48e0:	89 85       	ldd	r24, Y+9	; 0x09
    48e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    48e4:	ab 85       	ldd	r26, Y+11	; 0x0b
    48e6:	bc 85       	ldd	r27, Y+12	; 0x0c
    48e8:	2a e0       	ldi	r18, 0x0A	; 10
    48ea:	30 e0       	ldi	r19, 0x00	; 0
    48ec:	40 e0       	ldi	r20, 0x00	; 0
    48ee:	50 e0       	ldi	r21, 0x00	; 0
    48f0:	bc 01       	movw	r22, r24
    48f2:	cd 01       	movw	r24, r26
    48f4:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <__divmodsi4>
    48f8:	dc 01       	movw	r26, r24
    48fa:	cb 01       	movw	r24, r22
    48fc:	80 5d       	subi	r24, 0xD0	; 208
    48fe:	f8 01       	movw	r30, r16
    4900:	80 83       	st	Z, r24
    4902:	89 81       	ldd	r24, Y+1	; 0x01
    4904:	9a 81       	ldd	r25, Y+2	; 0x02
    4906:	ab 81       	ldd	r26, Y+3	; 0x03
    4908:	bc 81       	ldd	r27, Y+4	; 0x04
    490a:	01 97       	sbiw	r24, 0x01	; 1
    490c:	a1 09       	sbc	r26, r1
    490e:	b1 09       	sbc	r27, r1
    4910:	89 83       	std	Y+1, r24	; 0x01
    4912:	9a 83       	std	Y+2, r25	; 0x02
    4914:	ab 83       	std	Y+3, r26	; 0x03
    4916:	bc 83       	std	Y+4, r27	; 0x04
		anInteger /= 10;
    4918:	89 85       	ldd	r24, Y+9	; 0x09
    491a:	9a 85       	ldd	r25, Y+10	; 0x0a
    491c:	ab 85       	ldd	r26, Y+11	; 0x0b
    491e:	bc 85       	ldd	r27, Y+12	; 0x0c
    4920:	2a e0       	ldi	r18, 0x0A	; 10
    4922:	30 e0       	ldi	r19, 0x00	; 0
    4924:	40 e0       	ldi	r20, 0x00	; 0
    4926:	50 e0       	ldi	r21, 0x00	; 0
    4928:	bc 01       	movw	r22, r24
    492a:	cd 01       	movw	r24, r26
    492c:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <__divmodsi4>
    4930:	da 01       	movw	r26, r20
    4932:	c9 01       	movw	r24, r18
    4934:	89 87       	std	Y+9, r24	; 0x09
    4936:	9a 87       	std	Y+10, r25	; 0x0a
    4938:	ab 87       	std	Y+11, r26	; 0x0b
    493a:	bc 87       	std	Y+12, r27	; 0x0c
	str[i--] = '\0';
	if (anInteger < 0) {
		flag = 1;
		anInteger = -anInteger;
	}
	while (anInteger != 0) {
    493c:	89 85       	ldd	r24, Y+9	; 0x09
    493e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4940:	ab 85       	ldd	r26, Y+11	; 0x0b
    4942:	bc 85       	ldd	r27, Y+12	; 0x0c
    4944:	00 97       	sbiw	r24, 0x00	; 0
    4946:	a1 05       	cpc	r26, r1
    4948:	b1 05       	cpc	r27, r1
    494a:	19 f6       	brne	.-122    	; 0x48d2 <IntToString+0xa0>
		str[i--] = (anInteger % 10) + '0';
		anInteger /= 10;
	}
	if (flag){
    494c:	8d 81       	ldd	r24, Y+5	; 0x05
    494e:	9e 81       	ldd	r25, Y+6	; 0x06
    4950:	af 81       	ldd	r26, Y+7	; 0x07
    4952:	b8 85       	ldd	r27, Y+8	; 0x08
    4954:	00 97       	sbiw	r24, 0x00	; 0
    4956:	a1 05       	cpc	r26, r1
    4958:	b1 05       	cpc	r27, r1
    495a:	a1 f0       	breq	.+40     	; 0x4984 <IntToString+0x152>
		str[i--] = '-';
    495c:	29 81       	ldd	r18, Y+1	; 0x01
    495e:	3a 81       	ldd	r19, Y+2	; 0x02
    4960:	8d 85       	ldd	r24, Y+13	; 0x0d
    4962:	9e 85       	ldd	r25, Y+14	; 0x0e
    4964:	fc 01       	movw	r30, r24
    4966:	e2 0f       	add	r30, r18
    4968:	f3 1f       	adc	r31, r19
    496a:	8d e2       	ldi	r24, 0x2D	; 45
    496c:	80 83       	st	Z, r24
    496e:	89 81       	ldd	r24, Y+1	; 0x01
    4970:	9a 81       	ldd	r25, Y+2	; 0x02
    4972:	ab 81       	ldd	r26, Y+3	; 0x03
    4974:	bc 81       	ldd	r27, Y+4	; 0x04
    4976:	01 97       	sbiw	r24, 0x01	; 1
    4978:	a1 09       	sbc	r26, r1
    497a:	b1 09       	sbc	r27, r1
    497c:	89 83       	std	Y+1, r24	; 0x01
    497e:	9a 83       	std	Y+2, r25	; 0x02
    4980:	ab 83       	std	Y+3, r26	; 0x03
    4982:	bc 83       	std	Y+4, r27	; 0x04
	}
	i++;
    4984:	89 81       	ldd	r24, Y+1	; 0x01
    4986:	9a 81       	ldd	r25, Y+2	; 0x02
    4988:	ab 81       	ldd	r26, Y+3	; 0x03
    498a:	bc 81       	ldd	r27, Y+4	; 0x04
    498c:	01 96       	adiw	r24, 0x01	; 1
    498e:	a1 1d       	adc	r26, r1
    4990:	b1 1d       	adc	r27, r1
    4992:	89 83       	std	Y+1, r24	; 0x01
    4994:	9a 83       	std	Y+2, r25	; 0x02
    4996:	ab 83       	std	Y+3, r26	; 0x03
    4998:	bc 83       	std	Y+4, r27	; 0x04
	return str + i;
    499a:	29 81       	ldd	r18, Y+1	; 0x01
    499c:	3a 81       	ldd	r19, Y+2	; 0x02
    499e:	8d 85       	ldd	r24, Y+13	; 0x0d
    49a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    49a2:	82 0f       	add	r24, r18
    49a4:	93 1f       	adc	r25, r19

}
    49a6:	2e 96       	adiw	r28, 0x0e	; 14
    49a8:	0f b6       	in	r0, 0x3f	; 63
    49aa:	f8 94       	cli
    49ac:	de bf       	out	0x3e, r29	; 62
    49ae:	0f be       	out	0x3f, r0	; 63
    49b0:	cd bf       	out	0x3d, r28	; 61
    49b2:	cf 91       	pop	r28
    49b4:	df 91       	pop	r29
    49b6:	1f 91       	pop	r17
    49b8:	0f 91       	pop	r16
    49ba:	08 95       	ret

000049bc <LCD_voidWriteIntData>:

void LCD_voidWriteIntData(s32 Data){
    49bc:	df 93       	push	r29
    49be:	cf 93       	push	r28
    49c0:	cd b7       	in	r28, 0x3d	; 61
    49c2:	de b7       	in	r29, 0x3e	; 62
    49c4:	6a 97       	sbiw	r28, 0x1a	; 26
    49c6:	0f b6       	in	r0, 0x3f	; 63
    49c8:	f8 94       	cli
    49ca:	de bf       	out	0x3e, r29	; 62
    49cc:	0f be       	out	0x3f, r0	; 63
    49ce:	cd bf       	out	0x3d, r28	; 61
    49d0:	6f 8b       	std	Y+23, r22	; 0x17
    49d2:	78 8f       	std	Y+24, r23	; 0x18
    49d4:	89 8f       	std	Y+25, r24	; 0x19
    49d6:	9a 8f       	std	Y+26, r25	; 0x1a
	if(Data){
    49d8:	8f 89       	ldd	r24, Y+23	; 0x17
    49da:	98 8d       	ldd	r25, Y+24	; 0x18
    49dc:	a9 8d       	ldd	r26, Y+25	; 0x19
    49de:	ba 8d       	ldd	r27, Y+26	; 0x1a
    49e0:	00 97       	sbiw	r24, 0x00	; 0
    49e2:	a1 05       	cpc	r26, r1
    49e4:	b1 05       	cpc	r27, r1
    49e6:	99 f0       	breq	.+38     	; 0x4a0e <LCD_voidWriteIntData+0x52>
		u8 arr[INT_TO_STRING_ARR_SIZE];
		u8 *str = IntToString(Data,arr);
    49e8:	8f 89       	ldd	r24, Y+23	; 0x17
    49ea:	98 8d       	ldd	r25, Y+24	; 0x18
    49ec:	a9 8d       	ldd	r26, Y+25	; 0x19
    49ee:	ba 8d       	ldd	r27, Y+26	; 0x1a
    49f0:	9e 01       	movw	r18, r28
    49f2:	2d 5f       	subi	r18, 0xFD	; 253
    49f4:	3f 4f       	sbci	r19, 0xFF	; 255
    49f6:	bc 01       	movw	r22, r24
    49f8:	cd 01       	movw	r24, r26
    49fa:	a9 01       	movw	r20, r18
    49fc:	0e 94 19 24 	call	0x4832	; 0x4832 <IntToString>
    4a00:	9a 83       	std	Y+2, r25	; 0x02
    4a02:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidWriteString(str);
    4a04:	89 81       	ldd	r24, Y+1	; 0x01
    4a06:	9a 81       	ldd	r25, Y+2	; 0x02
    4a08:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <LCD_voidWriteString>
    4a0c:	03 c0       	rjmp	.+6      	; 0x4a14 <LCD_voidWriteIntData+0x58>
	}
	else{
		LCD_voidWriteChar('0');
    4a0e:	80 e3       	ldi	r24, 0x30	; 48
    4a10:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
	}
}
    4a14:	6a 96       	adiw	r28, 0x1a	; 26
    4a16:	0f b6       	in	r0, 0x3f	; 63
    4a18:	f8 94       	cli
    4a1a:	de bf       	out	0x3e, r29	; 62
    4a1c:	0f be       	out	0x3f, r0	; 63
    4a1e:	cd bf       	out	0x3d, r28	; 61
    4a20:	cf 91       	pop	r28
    4a22:	df 91       	pop	r29
    4a24:	08 95       	ret

00004a26 <LCD_voidWriteFloatData>:

void LCD_voidWriteFloatData(f32 Data){
    4a26:	df 93       	push	r29
    4a28:	cf 93       	push	r28
    4a2a:	cd b7       	in	r28, 0x3d	; 61
    4a2c:	de b7       	in	r29, 0x3e	; 62
    4a2e:	a6 97       	sbiw	r28, 0x26	; 38
    4a30:	0f b6       	in	r0, 0x3f	; 63
    4a32:	f8 94       	cli
    4a34:	de bf       	out	0x3e, r29	; 62
    4a36:	0f be       	out	0x3f, r0	; 63
    4a38:	cd bf       	out	0x3d, r28	; 61
    4a3a:	6b a3       	std	Y+35, r22	; 0x23
    4a3c:	7c a3       	std	Y+36, r23	; 0x24
    4a3e:	8d a3       	std	Y+37, r24	; 0x25
    4a40:	9e a3       	std	Y+38, r25	; 0x26
	u8 arr[INT_TO_STRING_ARR_SIZE];
	s32 number = (s32) (Data * 100);
    4a42:	6b a1       	ldd	r22, Y+35	; 0x23
    4a44:	7c a1       	ldd	r23, Y+36	; 0x24
    4a46:	8d a1       	ldd	r24, Y+37	; 0x25
    4a48:	9e a1       	ldd	r25, Y+38	; 0x26
    4a4a:	20 e0       	ldi	r18, 0x00	; 0
    4a4c:	30 e0       	ldi	r19, 0x00	; 0
    4a4e:	48 ec       	ldi	r20, 0xC8	; 200
    4a50:	52 e4       	ldi	r21, 0x42	; 66
    4a52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a56:	dc 01       	movw	r26, r24
    4a58:	cb 01       	movw	r24, r22
    4a5a:	bc 01       	movw	r22, r24
    4a5c:	cd 01       	movw	r24, r26
    4a5e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    4a62:	dc 01       	movw	r26, r24
    4a64:	cb 01       	movw	r24, r22
    4a66:	8b 87       	std	Y+11, r24	; 0x0b
    4a68:	9c 87       	std	Y+12, r25	; 0x0c
    4a6a:	ad 87       	std	Y+13, r26	; 0x0d
    4a6c:	be 87       	std	Y+14, r27	; 0x0e
	u8 *str = IntToString(number,arr);
    4a6e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4a70:	9c 85       	ldd	r25, Y+12	; 0x0c
    4a72:	ad 85       	ldd	r26, Y+13	; 0x0d
    4a74:	be 85       	ldd	r27, Y+14	; 0x0e
    4a76:	9e 01       	movw	r18, r28
    4a78:	21 5f       	subi	r18, 0xF1	; 241
    4a7a:	3f 4f       	sbci	r19, 0xFF	; 255
    4a7c:	bc 01       	movw	r22, r24
    4a7e:	cd 01       	movw	r24, r26
    4a80:	a9 01       	movw	r20, r18
    4a82:	0e 94 19 24 	call	0x4832	; 0x4832 <IntToString>
    4a86:	9a 87       	std	Y+10, r25	; 0x0a
    4a88:	89 87       	std	Y+9, r24	; 0x09
	u32 counter=0;
    4a8a:	1d 82       	std	Y+5, r1	; 0x05
    4a8c:	1e 82       	std	Y+6, r1	; 0x06
    4a8e:	1f 82       	std	Y+7, r1	; 0x07
    4a90:	18 86       	std	Y+8, r1	; 0x08
	u32 counter2=0;
    4a92:	19 82       	std	Y+1, r1	; 0x01
    4a94:	1a 82       	std	Y+2, r1	; 0x02
    4a96:	1b 82       	std	Y+3, r1	; 0x03
    4a98:	1c 82       	std	Y+4, r1	; 0x04
    4a9a:	0b c0       	rjmp	.+22     	; 0x4ab2 <LCD_voidWriteFloatData+0x8c>
	while(str[counter] != '\0'){
		counter++;
    4a9c:	8d 81       	ldd	r24, Y+5	; 0x05
    4a9e:	9e 81       	ldd	r25, Y+6	; 0x06
    4aa0:	af 81       	ldd	r26, Y+7	; 0x07
    4aa2:	b8 85       	ldd	r27, Y+8	; 0x08
    4aa4:	01 96       	adiw	r24, 0x01	; 1
    4aa6:	a1 1d       	adc	r26, r1
    4aa8:	b1 1d       	adc	r27, r1
    4aaa:	8d 83       	std	Y+5, r24	; 0x05
    4aac:	9e 83       	std	Y+6, r25	; 0x06
    4aae:	af 83       	std	Y+7, r26	; 0x07
    4ab0:	b8 87       	std	Y+8, r27	; 0x08
	u8 arr[INT_TO_STRING_ARR_SIZE];
	s32 number = (s32) (Data * 100);
	u8 *str = IntToString(number,arr);
	u32 counter=0;
	u32 counter2=0;
	while(str[counter] != '\0'){
    4ab2:	2d 81       	ldd	r18, Y+5	; 0x05
    4ab4:	3e 81       	ldd	r19, Y+6	; 0x06
    4ab6:	89 85       	ldd	r24, Y+9	; 0x09
    4ab8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4aba:	fc 01       	movw	r30, r24
    4abc:	e2 0f       	add	r30, r18
    4abe:	f3 1f       	adc	r31, r19
    4ac0:	80 81       	ld	r24, Z
    4ac2:	88 23       	and	r24, r24
    4ac4:	59 f7       	brne	.-42     	; 0x4a9c <LCD_voidWriteFloatData+0x76>
		counter++;
	}
	counter -= 2;
    4ac6:	8d 81       	ldd	r24, Y+5	; 0x05
    4ac8:	9e 81       	ldd	r25, Y+6	; 0x06
    4aca:	af 81       	ldd	r26, Y+7	; 0x07
    4acc:	b8 85       	ldd	r27, Y+8	; 0x08
    4ace:	02 97       	sbiw	r24, 0x02	; 2
    4ad0:	a1 09       	sbc	r26, r1
    4ad2:	b1 09       	sbc	r27, r1
    4ad4:	8d 83       	std	Y+5, r24	; 0x05
    4ad6:	9e 83       	std	Y+6, r25	; 0x06
    4ad8:	af 83       	std	Y+7, r26	; 0x07
    4ada:	b8 87       	std	Y+8, r27	; 0x08
	if(!counter){
    4adc:	8d 81       	ldd	r24, Y+5	; 0x05
    4ade:	9e 81       	ldd	r25, Y+6	; 0x06
    4ae0:	af 81       	ldd	r26, Y+7	; 0x07
    4ae2:	b8 85       	ldd	r27, Y+8	; 0x08
    4ae4:	00 97       	sbiw	r24, 0x00	; 0
    4ae6:	a1 05       	cpc	r26, r1
    4ae8:	b1 05       	cpc	r27, r1
    4aea:	49 f5       	brne	.+82     	; 0x4b3e <LCD_voidWriteFloatData+0x118>
		LCD_voidWriteChar('0');
    4aec:	80 e3       	ldi	r24, 0x30	; 48
    4aee:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
    4af2:	25 c0       	rjmp	.+74     	; 0x4b3e <LCD_voidWriteFloatData+0x118>
	}
	while(str[counter2] != '\0'){
		if(counter2 == counter){
    4af4:	29 81       	ldd	r18, Y+1	; 0x01
    4af6:	3a 81       	ldd	r19, Y+2	; 0x02
    4af8:	4b 81       	ldd	r20, Y+3	; 0x03
    4afa:	5c 81       	ldd	r21, Y+4	; 0x04
    4afc:	8d 81       	ldd	r24, Y+5	; 0x05
    4afe:	9e 81       	ldd	r25, Y+6	; 0x06
    4b00:	af 81       	ldd	r26, Y+7	; 0x07
    4b02:	b8 85       	ldd	r27, Y+8	; 0x08
    4b04:	28 17       	cp	r18, r24
    4b06:	39 07       	cpc	r19, r25
    4b08:	4a 07       	cpc	r20, r26
    4b0a:	5b 07       	cpc	r21, r27
    4b0c:	19 f4       	brne	.+6      	; 0x4b14 <LCD_voidWriteFloatData+0xee>
			LCD_voidWriteChar('.');
    4b0e:	8e e2       	ldi	r24, 0x2E	; 46
    4b10:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
		}
		LCD_voidWriteChar(str[counter2]);
    4b14:	29 81       	ldd	r18, Y+1	; 0x01
    4b16:	3a 81       	ldd	r19, Y+2	; 0x02
    4b18:	89 85       	ldd	r24, Y+9	; 0x09
    4b1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b1c:	fc 01       	movw	r30, r24
    4b1e:	e2 0f       	add	r30, r18
    4b20:	f3 1f       	adc	r31, r19
    4b22:	80 81       	ld	r24, Z
    4b24:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
		counter2++;
    4b28:	89 81       	ldd	r24, Y+1	; 0x01
    4b2a:	9a 81       	ldd	r25, Y+2	; 0x02
    4b2c:	ab 81       	ldd	r26, Y+3	; 0x03
    4b2e:	bc 81       	ldd	r27, Y+4	; 0x04
    4b30:	01 96       	adiw	r24, 0x01	; 1
    4b32:	a1 1d       	adc	r26, r1
    4b34:	b1 1d       	adc	r27, r1
    4b36:	89 83       	std	Y+1, r24	; 0x01
    4b38:	9a 83       	std	Y+2, r25	; 0x02
    4b3a:	ab 83       	std	Y+3, r26	; 0x03
    4b3c:	bc 83       	std	Y+4, r27	; 0x04
	}
	counter -= 2;
	if(!counter){
		LCD_voidWriteChar('0');
	}
	while(str[counter2] != '\0'){
    4b3e:	29 81       	ldd	r18, Y+1	; 0x01
    4b40:	3a 81       	ldd	r19, Y+2	; 0x02
    4b42:	89 85       	ldd	r24, Y+9	; 0x09
    4b44:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b46:	fc 01       	movw	r30, r24
    4b48:	e2 0f       	add	r30, r18
    4b4a:	f3 1f       	adc	r31, r19
    4b4c:	80 81       	ld	r24, Z
    4b4e:	88 23       	and	r24, r24
    4b50:	89 f6       	brne	.-94     	; 0x4af4 <LCD_voidWriteFloatData+0xce>
			LCD_voidWriteChar('.');
		}
		LCD_voidWriteChar(str[counter2]);
		counter2++;
	}
}
    4b52:	a6 96       	adiw	r28, 0x26	; 38
    4b54:	0f b6       	in	r0, 0x3f	; 63
    4b56:	f8 94       	cli
    4b58:	de bf       	out	0x3e, r29	; 62
    4b5a:	0f be       	out	0x3f, r0	; 63
    4b5c:	cd bf       	out	0x3d, r28	; 61
    4b5e:	cf 91       	pop	r28
    4b60:	df 91       	pop	r29
    4b62:	08 95       	ret

00004b64 <LCD_voidGoToPosition>:

void LCD_voidGoToPosition(u8 X_Position, u8 Y_Position){
    4b64:	df 93       	push	r29
    4b66:	cf 93       	push	r28
    4b68:	00 d0       	rcall	.+0      	; 0x4b6a <LCD_voidGoToPosition+0x6>
    4b6a:	0f 92       	push	r0
    4b6c:	cd b7       	in	r28, 0x3d	; 61
    4b6e:	de b7       	in	r29, 0x3e	; 62
    4b70:	8a 83       	std	Y+2, r24	; 0x02
    4b72:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Address = FIRST_LINE_ADDRESS;
    4b74:	80 e8       	ldi	r24, 0x80	; 128
    4b76:	89 83       	std	Y+1, r24	; 0x01

	if(X_Position == 0){
    4b78:	8a 81       	ldd	r24, Y+2	; 0x02
    4b7a:	88 23       	and	r24, r24
    4b7c:	21 f4       	brne	.+8      	; 0x4b86 <LCD_voidGoToPosition+0x22>
		Local_Address = FIRST_LINE_ADDRESS + Y_Position;
    4b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    4b80:	80 58       	subi	r24, 0x80	; 128
    4b82:	89 83       	std	Y+1, r24	; 0x01
    4b84:	14 c0       	rjmp	.+40     	; 0x4bae <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 1){
    4b86:	8a 81       	ldd	r24, Y+2	; 0x02
    4b88:	81 30       	cpi	r24, 0x01	; 1
    4b8a:	21 f4       	brne	.+8      	; 0x4b94 <LCD_voidGoToPosition+0x30>
		Local_Address = SECOND_LINE_ADDRESS + Y_Position;
    4b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    4b8e:	80 54       	subi	r24, 0x40	; 64
    4b90:	89 83       	std	Y+1, r24	; 0x01
    4b92:	0d c0       	rjmp	.+26     	; 0x4bae <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 2){
    4b94:	8a 81       	ldd	r24, Y+2	; 0x02
    4b96:	82 30       	cpi	r24, 0x02	; 2
    4b98:	21 f4       	brne	.+8      	; 0x4ba2 <LCD_voidGoToPosition+0x3e>
		Local_Address = THIRD_LINE_ADDRESS + Y_Position;
    4b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    4b9c:	8c 56       	subi	r24, 0x6C	; 108
    4b9e:	89 83       	std	Y+1, r24	; 0x01
    4ba0:	06 c0       	rjmp	.+12     	; 0x4bae <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 3){
    4ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    4ba4:	83 30       	cpi	r24, 0x03	; 3
    4ba6:	19 f4       	brne	.+6      	; 0x4bae <LCD_voidGoToPosition+0x4a>
		Local_Address = FOURTH_LINE_ADDRESS + Y_Position;
    4ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    4baa:	8c 52       	subi	r24, 0x2C	; 44
    4bac:	89 83       	std	Y+1, r24	; 0x01
	}

	SET_BIT(Local_Address,7); /*You can also just OR / add with 0x80 (128) to set the the MSB*/
    4bae:	89 81       	ldd	r24, Y+1	; 0x01
    4bb0:	80 68       	ori	r24, 0x80	; 128
    4bb2:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendCommand(Local_Address);
    4bb4:	89 81       	ldd	r24, Y+1	; 0x01
    4bb6:	0e 94 50 21 	call	0x42a0	; 0x42a0 <LCD_voidSendCommand>
}
    4bba:	0f 90       	pop	r0
    4bbc:	0f 90       	pop	r0
    4bbe:	0f 90       	pop	r0
    4bc0:	cf 91       	pop	r28
    4bc2:	df 91       	pop	r29
    4bc4:	08 95       	ret

00004bc6 <LCD_voidClearPosition>:

void LCD_voidClearPosition(u8 X_Position, u8 Y_Position){
    4bc6:	df 93       	push	r29
    4bc8:	cf 93       	push	r28
    4bca:	00 d0       	rcall	.+0      	; 0x4bcc <LCD_voidClearPosition+0x6>
    4bcc:	cd b7       	in	r28, 0x3d	; 61
    4bce:	de b7       	in	r29, 0x3e	; 62
    4bd0:	89 83       	std	Y+1, r24	; 0x01
    4bd2:	6a 83       	std	Y+2, r22	; 0x02
	LCD_voidGoToPosition(X_Position, Y_Position);
    4bd4:	89 81       	ldd	r24, Y+1	; 0x01
    4bd6:	6a 81       	ldd	r22, Y+2	; 0x02
    4bd8:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(' ');
    4bdc:	80 e2       	ldi	r24, 0x20	; 32
    4bde:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
}
    4be2:	0f 90       	pop	r0
    4be4:	0f 90       	pop	r0
    4be6:	cf 91       	pop	r28
    4be8:	df 91       	pop	r29
    4bea:	08 95       	ret

00004bec <LCD_voidClearLine>:

void LCD_voidClearLine(u8 X_Position){
    4bec:	df 93       	push	r29
    4bee:	cf 93       	push	r28
    4bf0:	00 d0       	rcall	.+0      	; 0x4bf2 <LCD_voidClearLine+0x6>
    4bf2:	cd b7       	in	r28, 0x3d	; 61
    4bf4:	de b7       	in	r29, 0x3e	; 62
    4bf6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Y_Position = 0;
    4bf8:	19 82       	std	Y+1, r1	; 0x01
    4bfa:	07 c0       	rjmp	.+14     	; 0x4c0a <LCD_voidClearLine+0x1e>
	while(Y_Position <20){
		LCD_voidClearPosition(X_Position,Y_Position);
    4bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    4bfe:	69 81       	ldd	r22, Y+1	; 0x01
    4c00:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <LCD_voidClearPosition>
		Y_Position++;
    4c04:	89 81       	ldd	r24, Y+1	; 0x01
    4c06:	8f 5f       	subi	r24, 0xFF	; 255
    4c08:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidWriteChar(' ');
}

void LCD_voidClearLine(u8 X_Position){
	u8 Y_Position = 0;
	while(Y_Position <20){
    4c0a:	89 81       	ldd	r24, Y+1	; 0x01
    4c0c:	84 31       	cpi	r24, 0x14	; 20
    4c0e:	b0 f3       	brcs	.-20     	; 0x4bfc <LCD_voidClearLine+0x10>
		LCD_voidClearPosition(X_Position,Y_Position);
		Y_Position++;
	}
}
    4c10:	0f 90       	pop	r0
    4c12:	0f 90       	pop	r0
    4c14:	cf 91       	pop	r28
    4c16:	df 91       	pop	r29
    4c18:	08 95       	ret

00004c1a <LCD_voidDisplaySpecialChar>:

void LCD_voidDisplaySpecialChar(u8 *char_ptr,u8 CGRam_index,u8 row,u8 column){
    4c1a:	df 93       	push	r29
    4c1c:	cf 93       	push	r28
    4c1e:	cd b7       	in	r28, 0x3d	; 61
    4c20:	de b7       	in	r29, 0x3e	; 62
    4c22:	27 97       	sbiw	r28, 0x07	; 7
    4c24:	0f b6       	in	r0, 0x3f	; 63
    4c26:	f8 94       	cli
    4c28:	de bf       	out	0x3e, r29	; 62
    4c2a:	0f be       	out	0x3f, r0	; 63
    4c2c:	cd bf       	out	0x3d, r28	; 61
    4c2e:	9c 83       	std	Y+4, r25	; 0x04
    4c30:	8b 83       	std	Y+3, r24	; 0x03
    4c32:	6d 83       	std	Y+5, r22	; 0x05
    4c34:	4e 83       	std	Y+6, r20	; 0x06
    4c36:	2f 83       	std	Y+7, r18	; 0x07
	LCD_voidGoToPosition(row,column);
    4c38:	8e 81       	ldd	r24, Y+6	; 0x06
    4c3a:	6f 81       	ldd	r22, Y+7	; 0x07
    4c3c:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(CGRam_index);
    4c40:	8d 81       	ldd	r24, Y+5	; 0x05
    4c42:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
	u8 address = 0;
    4c46:	1a 82       	std	Y+2, r1	; 0x02
	u8 index = 0;
    4c48:	19 82       	std	Y+1, r1	; 0x01
	if(CGRam_index < 8){
    4c4a:	8d 81       	ldd	r24, Y+5	; 0x05
    4c4c:	88 30       	cpi	r24, 0x08	; 8
    4c4e:	30 f5       	brcc	.+76     	; 0x4c9c <LCD_voidDisplaySpecialChar+0x82>
		address = CGRam_index * 8;
    4c50:	8d 81       	ldd	r24, Y+5	; 0x05
    4c52:	88 2f       	mov	r24, r24
    4c54:	90 e0       	ldi	r25, 0x00	; 0
    4c56:	88 0f       	add	r24, r24
    4c58:	99 1f       	adc	r25, r25
    4c5a:	88 0f       	add	r24, r24
    4c5c:	99 1f       	adc	r25, r25
    4c5e:	88 0f       	add	r24, r24
    4c60:	99 1f       	adc	r25, r25
    4c62:	8a 83       	std	Y+2, r24	; 0x02
		SET_BIT(address,6);
    4c64:	8a 81       	ldd	r24, Y+2	; 0x02
    4c66:	80 64       	ori	r24, 0x40	; 64
    4c68:	8a 83       	std	Y+2, r24	; 0x02
		CLR_BIT(address,7);
    4c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    4c6c:	8f 77       	andi	r24, 0x7F	; 127
    4c6e:	8a 83       	std	Y+2, r24	; 0x02
		LCD_voidSendCommand(address);
    4c70:	8a 81       	ldd	r24, Y+2	; 0x02
    4c72:	0e 94 50 21 	call	0x42a0	; 0x42a0 <LCD_voidSendCommand>
		for(index = 0; index < 8; index++){
    4c76:	19 82       	std	Y+1, r1	; 0x01
    4c78:	0e c0       	rjmp	.+28     	; 0x4c96 <LCD_voidDisplaySpecialChar+0x7c>
			LCD_voidWriteChar(char_ptr[index]);
    4c7a:	89 81       	ldd	r24, Y+1	; 0x01
    4c7c:	28 2f       	mov	r18, r24
    4c7e:	30 e0       	ldi	r19, 0x00	; 0
    4c80:	8b 81       	ldd	r24, Y+3	; 0x03
    4c82:	9c 81       	ldd	r25, Y+4	; 0x04
    4c84:	fc 01       	movw	r30, r24
    4c86:	e2 0f       	add	r30, r18
    4c88:	f3 1f       	adc	r31, r19
    4c8a:	80 81       	ld	r24, Z
    4c8c:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
	if(CGRam_index < 8){
		address = CGRam_index * 8;
		SET_BIT(address,6);
		CLR_BIT(address,7);
		LCD_voidSendCommand(address);
		for(index = 0; index < 8; index++){
    4c90:	89 81       	ldd	r24, Y+1	; 0x01
    4c92:	8f 5f       	subi	r24, 0xFF	; 255
    4c94:	89 83       	std	Y+1, r24	; 0x01
    4c96:	89 81       	ldd	r24, Y+1	; 0x01
    4c98:	88 30       	cpi	r24, 0x08	; 8
    4c9a:	78 f3       	brcs	.-34     	; 0x4c7a <LCD_voidDisplaySpecialChar+0x60>
			LCD_voidWriteChar(char_ptr[index]);
		}
	}
	LCD_voidSendCommand(LCD_ReturnHome);
    4c9c:	82 e0       	ldi	r24, 0x02	; 2
    4c9e:	0e 94 50 21 	call	0x42a0	; 0x42a0 <LCD_voidSendCommand>
}
    4ca2:	27 96       	adiw	r28, 0x07	; 7
    4ca4:	0f b6       	in	r0, 0x3f	; 63
    4ca6:	f8 94       	cli
    4ca8:	de bf       	out	0x3e, r29	; 62
    4caa:	0f be       	out	0x3f, r0	; 63
    4cac:	cd bf       	out	0x3d, r28	; 61
    4cae:	cf 91       	pop	r28
    4cb0:	df 91       	pop	r29
    4cb2:	08 95       	ret

00004cb4 <KPD_u8GetPressedKey>:
 */
#include "../../../Library/STD_types.h"
#include "../../../MCAL/DIO/Header/DIO_Interface.h"
#include "../Header/Keypad_Interface.h"

u8 KPD_u8GetPressedKey(){
    4cb4:	df 93       	push	r29
    4cb6:	cf 93       	push	r28
    4cb8:	cd b7       	in	r28, 0x3d	; 61
    4cba:	de b7       	in	r29, 0x3e	; 62
    4cbc:	a1 97       	sbiw	r28, 0x21	; 33
    4cbe:	0f b6       	in	r0, 0x3f	; 63
    4cc0:	f8 94       	cli
    4cc2:	de bf       	out	0x3e, r29	; 62
    4cc4:	0f be       	out	0x3f, r0	; 63
    4cc6:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PressedKey = NO_PRESSED_KEY;
    4cc8:	8f ef       	ldi	r24, 0xFF	; 255
    4cca:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ColIndex;
	u8 Local_u8RowIndex;
	u8 Local_u8KPDArr[ROW_NUMBER][COL_NUMBER] = {KPD_ARR_VAL};
    4ccc:	ce 01       	movw	r24, r28
    4cce:	04 96       	adiw	r24, 0x04	; 4
    4cd0:	9e 8f       	std	Y+30, r25	; 0x1e
    4cd2:	8d 8f       	std	Y+29, r24	; 0x1d
    4cd4:	eb e8       	ldi	r30, 0x8B	; 139
    4cd6:	f2 e0       	ldi	r31, 0x02	; 2
    4cd8:	f8 a3       	std	Y+32, r31	; 0x20
    4cda:	ef 8f       	std	Y+31, r30	; 0x1f
    4cdc:	f0 e1       	ldi	r31, 0x10	; 16
    4cde:	f9 a3       	std	Y+33, r31	; 0x21
    4ce0:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4ce2:	f8 a1       	ldd	r31, Y+32	; 0x20
    4ce4:	00 80       	ld	r0, Z
    4ce6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4ce8:	98 a1       	ldd	r25, Y+32	; 0x20
    4cea:	01 96       	adiw	r24, 0x01	; 1
    4cec:	98 a3       	std	Y+32, r25	; 0x20
    4cee:	8f 8f       	std	Y+31, r24	; 0x1f
    4cf0:	ed 8d       	ldd	r30, Y+29	; 0x1d
    4cf2:	fe 8d       	ldd	r31, Y+30	; 0x1e
    4cf4:	00 82       	st	Z, r0
    4cf6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4cf8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4cfa:	01 96       	adiw	r24, 0x01	; 1
    4cfc:	9e 8f       	std	Y+30, r25	; 0x1e
    4cfe:	8d 8f       	std	Y+29, r24	; 0x1d
    4d00:	99 a1       	ldd	r25, Y+33	; 0x21
    4d02:	91 50       	subi	r25, 0x01	; 1
    4d04:	99 a3       	std	Y+33, r25	; 0x21
    4d06:	e9 a1       	ldd	r30, Y+33	; 0x21
    4d08:	ee 23       	and	r30, r30
    4d0a:	51 f7       	brne	.-44     	; 0x4ce0 <KPD_u8GetPressedKey+0x2c>
	u8 Local_u8ColArr[COL_NUMBER] = {KPD_COL0_PIN, KPD_COL1_PIN, KPD_COL2_PIN, KPD_COL3_PIN};
    4d0c:	87 e0       	ldi	r24, 0x07	; 7
    4d0e:	8c 8b       	std	Y+20, r24	; 0x14
    4d10:	86 e0       	ldi	r24, 0x06	; 6
    4d12:	8d 8b       	std	Y+21, r24	; 0x15
    4d14:	85 e0       	ldi	r24, 0x05	; 5
    4d16:	8e 8b       	std	Y+22, r24	; 0x16
    4d18:	83 e0       	ldi	r24, 0x03	; 3
    4d1a:	8f 8b       	std	Y+23, r24	; 0x17
	u8 Local_u8RowArr[ROW_NUMBER] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
    4d1c:	85 e0       	ldi	r24, 0x05	; 5
    4d1e:	88 8f       	std	Y+24, r24	; 0x18
    4d20:	84 e0       	ldi	r24, 0x04	; 4
    4d22:	89 8f       	std	Y+25, r24	; 0x19
    4d24:	83 e0       	ldi	r24, 0x03	; 3
    4d26:	8a 8f       	std	Y+26, r24	; 0x1a
    4d28:	82 e0       	ldi	r24, 0x02	; 2
    4d2a:	8b 8f       	std	Y+27, r24	; 0x1b
	for(Local_u8ColIndex = 0; Local_u8ColIndex < COL_NUMBER; Local_u8ColIndex++){
    4d2c:	1a 82       	std	Y+2, r1	; 0x02
    4d2e:	6b c0       	rjmp	.+214    	; 0x4e06 <KPD_u8GetPressedKey+0x152>
		/*Activate current column by clearing it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],Low);
    4d30:	8a 81       	ldd	r24, Y+2	; 0x02
    4d32:	28 2f       	mov	r18, r24
    4d34:	30 e0       	ldi	r19, 0x00	; 0
    4d36:	ce 01       	movw	r24, r28
    4d38:	44 96       	adiw	r24, 0x14	; 20
    4d3a:	fc 01       	movw	r30, r24
    4d3c:	e2 0f       	add	r30, r18
    4d3e:	f3 1f       	adc	r31, r19
    4d40:	90 81       	ld	r25, Z
    4d42:	84 e0       	ldi	r24, 0x04	; 4
    4d44:	69 2f       	mov	r22, r25
    4d46:	40 e0       	ldi	r20, 0x00	; 0
    4d48:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>

		for(Local_u8RowIndex = 0; Local_u8RowIndex < ROW_NUMBER; Local_u8RowIndex++){
    4d4c:	19 82       	std	Y+1, r1	; 0x01
    4d4e:	46 c0       	rjmp	.+140    	; 0x4ddc <KPD_u8GetPressedKey+0x128>
			if(DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowArr[Local_u8RowIndex]) == Low){
    4d50:	89 81       	ldd	r24, Y+1	; 0x01
    4d52:	28 2f       	mov	r18, r24
    4d54:	30 e0       	ldi	r19, 0x00	; 0
    4d56:	ce 01       	movw	r24, r28
    4d58:	48 96       	adiw	r24, 0x18	; 24
    4d5a:	fc 01       	movw	r30, r24
    4d5c:	e2 0f       	add	r30, r18
    4d5e:	f3 1f       	adc	r31, r19
    4d60:	90 81       	ld	r25, Z
    4d62:	83 e0       	ldi	r24, 0x03	; 3
    4d64:	69 2f       	mov	r22, r25
    4d66:	0e 94 bb 0b 	call	0x1776	; 0x1776 <DIO_u8GetPinValue>
    4d6a:	88 23       	and	r24, r24
    4d6c:	a1 f5       	brne	.+104    	; 0x4dd6 <KPD_u8GetPressedKey+0x122>
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIndex][Local_u8ColIndex];
    4d6e:	89 81       	ldd	r24, Y+1	; 0x01
    4d70:	28 2f       	mov	r18, r24
    4d72:	30 e0       	ldi	r19, 0x00	; 0
    4d74:	8a 81       	ldd	r24, Y+2	; 0x02
    4d76:	48 2f       	mov	r20, r24
    4d78:	50 e0       	ldi	r21, 0x00	; 0
    4d7a:	22 0f       	add	r18, r18
    4d7c:	33 1f       	adc	r19, r19
    4d7e:	22 0f       	add	r18, r18
    4d80:	33 1f       	adc	r19, r19
    4d82:	ce 01       	movw	r24, r28
    4d84:	01 96       	adiw	r24, 0x01	; 1
    4d86:	82 0f       	add	r24, r18
    4d88:	93 1f       	adc	r25, r19
    4d8a:	84 0f       	add	r24, r20
    4d8c:	95 1f       	adc	r25, r21
    4d8e:	fc 01       	movw	r30, r24
    4d90:	33 96       	adiw	r30, 0x03	; 3
    4d92:	80 81       	ld	r24, Z
    4d94:	8b 83       	std	Y+3, r24	; 0x03
				while(DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowArr[Local_u8RowIndex]) == Low){
    4d96:	89 81       	ldd	r24, Y+1	; 0x01
    4d98:	28 2f       	mov	r18, r24
    4d9a:	30 e0       	ldi	r19, 0x00	; 0
    4d9c:	ce 01       	movw	r24, r28
    4d9e:	48 96       	adiw	r24, 0x18	; 24
    4da0:	fc 01       	movw	r30, r24
    4da2:	e2 0f       	add	r30, r18
    4da4:	f3 1f       	adc	r31, r19
    4da6:	90 81       	ld	r25, Z
    4da8:	83 e0       	ldi	r24, 0x03	; 3
    4daa:	69 2f       	mov	r22, r25
    4dac:	0e 94 bb 0b 	call	0x1776	; 0x1776 <DIO_u8GetPinValue>
    4db0:	88 23       	and	r24, r24
    4db2:	89 f3       	breq	.-30     	; 0x4d96 <KPD_u8GetPressedKey+0xe2>

				}
				DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],High);
    4db4:	8a 81       	ldd	r24, Y+2	; 0x02
    4db6:	28 2f       	mov	r18, r24
    4db8:	30 e0       	ldi	r19, 0x00	; 0
    4dba:	ce 01       	movw	r24, r28
    4dbc:	44 96       	adiw	r24, 0x14	; 20
    4dbe:	fc 01       	movw	r30, r24
    4dc0:	e2 0f       	add	r30, r18
    4dc2:	f3 1f       	adc	r31, r19
    4dc4:	90 81       	ld	r25, Z
    4dc6:	84 e0       	ldi	r24, 0x04	; 4
    4dc8:	69 2f       	mov	r22, r25
    4dca:	41 e0       	ldi	r20, 0x01	; 1
    4dcc:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
				return Local_u8PressedKey;
    4dd0:	fb 81       	ldd	r31, Y+3	; 0x03
    4dd2:	fc 8f       	std	Y+28, r31	; 0x1c
    4dd4:	1e c0       	rjmp	.+60     	; 0x4e12 <KPD_u8GetPressedKey+0x15e>
	u8 Local_u8RowArr[ROW_NUMBER] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
	for(Local_u8ColIndex = 0; Local_u8ColIndex < COL_NUMBER; Local_u8ColIndex++){
		/*Activate current column by clearing it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],Low);

		for(Local_u8RowIndex = 0; Local_u8RowIndex < ROW_NUMBER; Local_u8RowIndex++){
    4dd6:	89 81       	ldd	r24, Y+1	; 0x01
    4dd8:	8f 5f       	subi	r24, 0xFF	; 255
    4dda:	89 83       	std	Y+1, r24	; 0x01
    4ddc:	89 81       	ldd	r24, Y+1	; 0x01
    4dde:	84 30       	cpi	r24, 0x04	; 4
    4de0:	08 f4       	brcc	.+2      	; 0x4de4 <KPD_u8GetPressedKey+0x130>
    4de2:	b6 cf       	rjmp	.-148    	; 0x4d50 <KPD_u8GetPressedKey+0x9c>
				return Local_u8PressedKey;
			}
		}

		/*Deactivate current column by setting it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],High);
    4de4:	8a 81       	ldd	r24, Y+2	; 0x02
    4de6:	28 2f       	mov	r18, r24
    4de8:	30 e0       	ldi	r19, 0x00	; 0
    4dea:	ce 01       	movw	r24, r28
    4dec:	44 96       	adiw	r24, 0x14	; 20
    4dee:	fc 01       	movw	r30, r24
    4df0:	e2 0f       	add	r30, r18
    4df2:	f3 1f       	adc	r31, r19
    4df4:	90 81       	ld	r25, Z
    4df6:	84 e0       	ldi	r24, 0x04	; 4
    4df8:	69 2f       	mov	r22, r25
    4dfa:	41 e0       	ldi	r20, 0x01	; 1
    4dfc:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	u8 Local_u8ColIndex;
	u8 Local_u8RowIndex;
	u8 Local_u8KPDArr[ROW_NUMBER][COL_NUMBER] = {KPD_ARR_VAL};
	u8 Local_u8ColArr[COL_NUMBER] = {KPD_COL0_PIN, KPD_COL1_PIN, KPD_COL2_PIN, KPD_COL3_PIN};
	u8 Local_u8RowArr[ROW_NUMBER] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
	for(Local_u8ColIndex = 0; Local_u8ColIndex < COL_NUMBER; Local_u8ColIndex++){
    4e00:	8a 81       	ldd	r24, Y+2	; 0x02
    4e02:	8f 5f       	subi	r24, 0xFF	; 255
    4e04:	8a 83       	std	Y+2, r24	; 0x02
    4e06:	8a 81       	ldd	r24, Y+2	; 0x02
    4e08:	84 30       	cpi	r24, 0x04	; 4
    4e0a:	08 f4       	brcc	.+2      	; 0x4e0e <KPD_u8GetPressedKey+0x15a>
    4e0c:	91 cf       	rjmp	.-222    	; 0x4d30 <KPD_u8GetPressedKey+0x7c>

		/*Deactivate current column by setting it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],High);

	}
	return Local_u8PressedKey;
    4e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    4e10:	8c 8f       	std	Y+28, r24	; 0x1c
    4e12:	8c 8d       	ldd	r24, Y+28	; 0x1c
}
    4e14:	a1 96       	adiw	r28, 0x21	; 33
    4e16:	0f b6       	in	r0, 0x3f	; 63
    4e18:	f8 94       	cli
    4e1a:	de bf       	out	0x3e, r29	; 62
    4e1c:	0f be       	out	0x3f, r0	; 63
    4e1e:	cd bf       	out	0x3d, r28	; 61
    4e20:	cf 91       	pop	r28
    4e22:	df 91       	pop	r29
    4e24:	08 95       	ret

00004e26 <main>:
		}
};

u8 playerY = 10;

int main(){
    4e26:	df 93       	push	r29
    4e28:	cf 93       	push	r28
    4e2a:	cd b7       	in	r28, 0x3d	; 61
    4e2c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInit();
    4e2e:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_voidInit>
	LCD_voidInit();
    4e32:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <LCD_voidInit>
	LoadSpecialChars();
    4e36:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <LoadSpecialChars>

	while(1){
		PlayerTrains();
    4e3a:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <PlayerTrains>
		Player1v1();
    4e3e:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <Player1v1>
		PlayerShoots();
    4e42:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <PlayerShoots>
		PlayerScores();
    4e46:	0e 94 20 32 	call	0x6440	; 0x6440 <PlayerScores>
		PlayerCelebrates();
    4e4a:	0e 94 cf 32 	call	0x659e	; 0x659e <PlayerCelebrates>
		PlayerCeremony();
    4e4e:	0e 94 98 34 	call	0x6930	; 0x6930 <PlayerCeremony>
    4e52:	f3 cf       	rjmp	.-26     	; 0x4e3a <main+0x14>

00004e54 <LoadSpecialChars>:
	}
	return 0;
}

void LoadSpecialChars(){
    4e54:	df 93       	push	r29
    4e56:	cf 93       	push	r28
    4e58:	0f 92       	push	r0
    4e5a:	cd b7       	in	r28, 0x3d	; 61
    4e5c:	de b7       	in	r29, 0x3e	; 62
	u8 index = 0;
    4e5e:	19 82       	std	Y+1, r1	; 0x01
	for(index = 0; index < 8; index++){
    4e60:	19 82       	std	Y+1, r1	; 0x01
    4e62:	15 c0       	rjmp	.+42     	; 0x4e8e <LoadSpecialChars+0x3a>
		LCD_voidDisplaySpecialChar(SpecialChars[index], index, 0, 0);
    4e64:	28 e1       	ldi	r18, 0x18	; 24
    4e66:	32 e0       	ldi	r19, 0x02	; 2
    4e68:	89 81       	ldd	r24, Y+1	; 0x01
    4e6a:	88 2f       	mov	r24, r24
    4e6c:	90 e0       	ldi	r25, 0x00	; 0
    4e6e:	88 0f       	add	r24, r24
    4e70:	99 1f       	adc	r25, r25
    4e72:	88 0f       	add	r24, r24
    4e74:	99 1f       	adc	r25, r25
    4e76:	88 0f       	add	r24, r24
    4e78:	99 1f       	adc	r25, r25
    4e7a:	82 0f       	add	r24, r18
    4e7c:	93 1f       	adc	r25, r19
    4e7e:	69 81       	ldd	r22, Y+1	; 0x01
    4e80:	40 e0       	ldi	r20, 0x00	; 0
    4e82:	20 e0       	ldi	r18, 0x00	; 0
    4e84:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <LCD_voidDisplaySpecialChar>
	return 0;
}

void LoadSpecialChars(){
	u8 index = 0;
	for(index = 0; index < 8; index++){
    4e88:	89 81       	ldd	r24, Y+1	; 0x01
    4e8a:	8f 5f       	subi	r24, 0xFF	; 255
    4e8c:	89 83       	std	Y+1, r24	; 0x01
    4e8e:	89 81       	ldd	r24, Y+1	; 0x01
    4e90:	88 30       	cpi	r24, 0x08	; 8
    4e92:	40 f3       	brcs	.-48     	; 0x4e64 <LoadSpecialChars+0x10>
		LCD_voidDisplaySpecialChar(SpecialChars[index], index, 0, 0);
	}
	LCD_voidSendCommand(LCD_ClearDisplay);
    4e94:	81 e0       	ldi	r24, 0x01	; 1
    4e96:	0e 94 50 21 	call	0x42a0	; 0x42a0 <LCD_voidSendCommand>
}
    4e9a:	0f 90       	pop	r0
    4e9c:	cf 91       	pop	r28
    4e9e:	df 91       	pop	r29
    4ea0:	08 95       	ret

00004ea2 <PlayerTrains>:

void PlayerTrains(){
    4ea2:	df 93       	push	r29
    4ea4:	cf 93       	push	r28
    4ea6:	cd b7       	in	r28, 0x3d	; 61
    4ea8:	de b7       	in	r29, 0x3e	; 62
    4eaa:	aa 97       	sbiw	r28, 0x2a	; 42
    4eac:	0f b6       	in	r0, 0x3f	; 63
    4eae:	f8 94       	cli
    4eb0:	de bf       	out	0x3e, r29	; 62
    4eb2:	0f be       	out	0x3f, r0	; 63
    4eb4:	cd bf       	out	0x3d, r28	; 61
	LCD_voidGoToPosition(3,4);
    4eb6:	83 e0       	ldi	r24, 0x03	; 3
    4eb8:	64 e0       	ldi	r22, 0x04	; 4
    4eba:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*) "Match Warm-up");
    4ebe:	80 e6       	ldi	r24, 0x60	; 96
    4ec0:	90 e0       	ldi	r25, 0x00	; 0
    4ec2:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <LCD_voidWriteString>
    4ec6:	88 c1       	rjmp	.+784    	; 0x51d8 <PlayerTrains+0x336>
	while(playerY < 20){
		LCD_voidGoToPosition(1,playerY);
    4ec8:	90 91 58 02 	lds	r25, 0x0258
    4ecc:	81 e0       	ldi	r24, 0x01	; 1
    4ece:	69 2f       	mov	r22, r25
    4ed0:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
		LCD_voidWriteChar(PLAYER_RUN_1);
    4ed4:	80 e0       	ldi	r24, 0x00	; 0
    4ed6:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
    4eda:	80 e0       	ldi	r24, 0x00	; 0
    4edc:	90 e0       	ldi	r25, 0x00	; 0
    4ede:	a8 ec       	ldi	r26, 0xC8	; 200
    4ee0:	b2 e4       	ldi	r27, 0x42	; 66
    4ee2:	8f a3       	std	Y+39, r24	; 0x27
    4ee4:	98 a7       	std	Y+40, r25	; 0x28
    4ee6:	a9 a7       	std	Y+41, r26	; 0x29
    4ee8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4eea:	6f a1       	ldd	r22, Y+39	; 0x27
    4eec:	78 a5       	ldd	r23, Y+40	; 0x28
    4eee:	89 a5       	ldd	r24, Y+41	; 0x29
    4ef0:	9a a5       	ldd	r25, Y+42	; 0x2a
    4ef2:	20 e0       	ldi	r18, 0x00	; 0
    4ef4:	30 e0       	ldi	r19, 0x00	; 0
    4ef6:	4a e7       	ldi	r20, 0x7A	; 122
    4ef8:	55 e4       	ldi	r21, 0x45	; 69
    4efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4efe:	dc 01       	movw	r26, r24
    4f00:	cb 01       	movw	r24, r22
    4f02:	8b a3       	std	Y+35, r24	; 0x23
    4f04:	9c a3       	std	Y+36, r25	; 0x24
    4f06:	ad a3       	std	Y+37, r26	; 0x25
    4f08:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4f0a:	6b a1       	ldd	r22, Y+35	; 0x23
    4f0c:	7c a1       	ldd	r23, Y+36	; 0x24
    4f0e:	8d a1       	ldd	r24, Y+37	; 0x25
    4f10:	9e a1       	ldd	r25, Y+38	; 0x26
    4f12:	20 e0       	ldi	r18, 0x00	; 0
    4f14:	30 e0       	ldi	r19, 0x00	; 0
    4f16:	40 e8       	ldi	r20, 0x80	; 128
    4f18:	5f e3       	ldi	r21, 0x3F	; 63
    4f1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f1e:	88 23       	and	r24, r24
    4f20:	2c f4       	brge	.+10     	; 0x4f2c <PlayerTrains+0x8a>
		__ticks = 1;
    4f22:	81 e0       	ldi	r24, 0x01	; 1
    4f24:	90 e0       	ldi	r25, 0x00	; 0
    4f26:	9a a3       	std	Y+34, r25	; 0x22
    4f28:	89 a3       	std	Y+33, r24	; 0x21
    4f2a:	3f c0       	rjmp	.+126    	; 0x4faa <PlayerTrains+0x108>
	else if (__tmp > 65535)
    4f2c:	6b a1       	ldd	r22, Y+35	; 0x23
    4f2e:	7c a1       	ldd	r23, Y+36	; 0x24
    4f30:	8d a1       	ldd	r24, Y+37	; 0x25
    4f32:	9e a1       	ldd	r25, Y+38	; 0x26
    4f34:	20 e0       	ldi	r18, 0x00	; 0
    4f36:	3f ef       	ldi	r19, 0xFF	; 255
    4f38:	4f e7       	ldi	r20, 0x7F	; 127
    4f3a:	57 e4       	ldi	r21, 0x47	; 71
    4f3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4f40:	18 16       	cp	r1, r24
    4f42:	4c f5       	brge	.+82     	; 0x4f96 <PlayerTrains+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f44:	6f a1       	ldd	r22, Y+39	; 0x27
    4f46:	78 a5       	ldd	r23, Y+40	; 0x28
    4f48:	89 a5       	ldd	r24, Y+41	; 0x29
    4f4a:	9a a5       	ldd	r25, Y+42	; 0x2a
    4f4c:	20 e0       	ldi	r18, 0x00	; 0
    4f4e:	30 e0       	ldi	r19, 0x00	; 0
    4f50:	40 e2       	ldi	r20, 0x20	; 32
    4f52:	51 e4       	ldi	r21, 0x41	; 65
    4f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f58:	dc 01       	movw	r26, r24
    4f5a:	cb 01       	movw	r24, r22
    4f5c:	bc 01       	movw	r22, r24
    4f5e:	cd 01       	movw	r24, r26
    4f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f64:	dc 01       	movw	r26, r24
    4f66:	cb 01       	movw	r24, r22
    4f68:	9a a3       	std	Y+34, r25	; 0x22
    4f6a:	89 a3       	std	Y+33, r24	; 0x21
    4f6c:	0f c0       	rjmp	.+30     	; 0x4f8c <PlayerTrains+0xea>
    4f6e:	80 e9       	ldi	r24, 0x90	; 144
    4f70:	91 e0       	ldi	r25, 0x01	; 1
    4f72:	98 a3       	std	Y+32, r25	; 0x20
    4f74:	8f 8f       	std	Y+31, r24	; 0x1f
    4f76:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4f78:	98 a1       	ldd	r25, Y+32	; 0x20
    4f7a:	01 97       	sbiw	r24, 0x01	; 1
    4f7c:	f1 f7       	brne	.-4      	; 0x4f7a <PlayerTrains+0xd8>
    4f7e:	98 a3       	std	Y+32, r25	; 0x20
    4f80:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f82:	89 a1       	ldd	r24, Y+33	; 0x21
    4f84:	9a a1       	ldd	r25, Y+34	; 0x22
    4f86:	01 97       	sbiw	r24, 0x01	; 1
    4f88:	9a a3       	std	Y+34, r25	; 0x22
    4f8a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f8c:	89 a1       	ldd	r24, Y+33	; 0x21
    4f8e:	9a a1       	ldd	r25, Y+34	; 0x22
    4f90:	00 97       	sbiw	r24, 0x00	; 0
    4f92:	69 f7       	brne	.-38     	; 0x4f6e <PlayerTrains+0xcc>
    4f94:	14 c0       	rjmp	.+40     	; 0x4fbe <PlayerTrains+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f96:	6b a1       	ldd	r22, Y+35	; 0x23
    4f98:	7c a1       	ldd	r23, Y+36	; 0x24
    4f9a:	8d a1       	ldd	r24, Y+37	; 0x25
    4f9c:	9e a1       	ldd	r25, Y+38	; 0x26
    4f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fa2:	dc 01       	movw	r26, r24
    4fa4:	cb 01       	movw	r24, r22
    4fa6:	9a a3       	std	Y+34, r25	; 0x22
    4fa8:	89 a3       	std	Y+33, r24	; 0x21
    4faa:	89 a1       	ldd	r24, Y+33	; 0x21
    4fac:	9a a1       	ldd	r25, Y+34	; 0x22
    4fae:	9e 8f       	std	Y+30, r25	; 0x1e
    4fb0:	8d 8f       	std	Y+29, r24	; 0x1d
    4fb2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4fb4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4fb6:	01 97       	sbiw	r24, 0x01	; 1
    4fb8:	f1 f7       	brne	.-4      	; 0x4fb6 <PlayerTrains+0x114>
    4fba:	9e 8f       	std	Y+30, r25	; 0x1e
    4fbc:	8d 8f       	std	Y+29, r24	; 0x1d

		_delay_ms(FRAME_DELAY_MS-50);
		LCD_voidClearPosition(1,playerY);
    4fbe:	90 91 58 02 	lds	r25, 0x0258
    4fc2:	81 e0       	ldi	r24, 0x01	; 1
    4fc4:	69 2f       	mov	r22, r25
    4fc6:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <LCD_voidClearPosition>
		LCD_voidGoToPosition(1,playerY);
    4fca:	90 91 58 02 	lds	r25, 0x0258
    4fce:	81 e0       	ldi	r24, 0x01	; 1
    4fd0:	69 2f       	mov	r22, r25
    4fd2:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
		LCD_voidWriteChar(PLAYER_RUN_2);
    4fd6:	81 e0       	ldi	r24, 0x01	; 1
    4fd8:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
    4fdc:	80 e0       	ldi	r24, 0x00	; 0
    4fde:	90 e0       	ldi	r25, 0x00	; 0
    4fe0:	a8 ec       	ldi	r26, 0xC8	; 200
    4fe2:	b2 e4       	ldi	r27, 0x42	; 66
    4fe4:	89 8f       	std	Y+25, r24	; 0x19
    4fe6:	9a 8f       	std	Y+26, r25	; 0x1a
    4fe8:	ab 8f       	std	Y+27, r26	; 0x1b
    4fea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fec:	69 8d       	ldd	r22, Y+25	; 0x19
    4fee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4ff0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ff2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ff4:	20 e0       	ldi	r18, 0x00	; 0
    4ff6:	30 e0       	ldi	r19, 0x00	; 0
    4ff8:	4a e7       	ldi	r20, 0x7A	; 122
    4ffa:	55 e4       	ldi	r21, 0x45	; 69
    4ffc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5000:	dc 01       	movw	r26, r24
    5002:	cb 01       	movw	r24, r22
    5004:	8d 8b       	std	Y+21, r24	; 0x15
    5006:	9e 8b       	std	Y+22, r25	; 0x16
    5008:	af 8b       	std	Y+23, r26	; 0x17
    500a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    500c:	6d 89       	ldd	r22, Y+21	; 0x15
    500e:	7e 89       	ldd	r23, Y+22	; 0x16
    5010:	8f 89       	ldd	r24, Y+23	; 0x17
    5012:	98 8d       	ldd	r25, Y+24	; 0x18
    5014:	20 e0       	ldi	r18, 0x00	; 0
    5016:	30 e0       	ldi	r19, 0x00	; 0
    5018:	40 e8       	ldi	r20, 0x80	; 128
    501a:	5f e3       	ldi	r21, 0x3F	; 63
    501c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5020:	88 23       	and	r24, r24
    5022:	2c f4       	brge	.+10     	; 0x502e <PlayerTrains+0x18c>
		__ticks = 1;
    5024:	81 e0       	ldi	r24, 0x01	; 1
    5026:	90 e0       	ldi	r25, 0x00	; 0
    5028:	9c 8b       	std	Y+20, r25	; 0x14
    502a:	8b 8b       	std	Y+19, r24	; 0x13
    502c:	3f c0       	rjmp	.+126    	; 0x50ac <PlayerTrains+0x20a>
	else if (__tmp > 65535)
    502e:	6d 89       	ldd	r22, Y+21	; 0x15
    5030:	7e 89       	ldd	r23, Y+22	; 0x16
    5032:	8f 89       	ldd	r24, Y+23	; 0x17
    5034:	98 8d       	ldd	r25, Y+24	; 0x18
    5036:	20 e0       	ldi	r18, 0x00	; 0
    5038:	3f ef       	ldi	r19, 0xFF	; 255
    503a:	4f e7       	ldi	r20, 0x7F	; 127
    503c:	57 e4       	ldi	r21, 0x47	; 71
    503e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5042:	18 16       	cp	r1, r24
    5044:	4c f5       	brge	.+82     	; 0x5098 <PlayerTrains+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5046:	69 8d       	ldd	r22, Y+25	; 0x19
    5048:	7a 8d       	ldd	r23, Y+26	; 0x1a
    504a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    504c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    504e:	20 e0       	ldi	r18, 0x00	; 0
    5050:	30 e0       	ldi	r19, 0x00	; 0
    5052:	40 e2       	ldi	r20, 0x20	; 32
    5054:	51 e4       	ldi	r21, 0x41	; 65
    5056:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    505a:	dc 01       	movw	r26, r24
    505c:	cb 01       	movw	r24, r22
    505e:	bc 01       	movw	r22, r24
    5060:	cd 01       	movw	r24, r26
    5062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5066:	dc 01       	movw	r26, r24
    5068:	cb 01       	movw	r24, r22
    506a:	9c 8b       	std	Y+20, r25	; 0x14
    506c:	8b 8b       	std	Y+19, r24	; 0x13
    506e:	0f c0       	rjmp	.+30     	; 0x508e <PlayerTrains+0x1ec>
    5070:	80 e9       	ldi	r24, 0x90	; 144
    5072:	91 e0       	ldi	r25, 0x01	; 1
    5074:	9a 8b       	std	Y+18, r25	; 0x12
    5076:	89 8b       	std	Y+17, r24	; 0x11
    5078:	89 89       	ldd	r24, Y+17	; 0x11
    507a:	9a 89       	ldd	r25, Y+18	; 0x12
    507c:	01 97       	sbiw	r24, 0x01	; 1
    507e:	f1 f7       	brne	.-4      	; 0x507c <PlayerTrains+0x1da>
    5080:	9a 8b       	std	Y+18, r25	; 0x12
    5082:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5084:	8b 89       	ldd	r24, Y+19	; 0x13
    5086:	9c 89       	ldd	r25, Y+20	; 0x14
    5088:	01 97       	sbiw	r24, 0x01	; 1
    508a:	9c 8b       	std	Y+20, r25	; 0x14
    508c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    508e:	8b 89       	ldd	r24, Y+19	; 0x13
    5090:	9c 89       	ldd	r25, Y+20	; 0x14
    5092:	00 97       	sbiw	r24, 0x00	; 0
    5094:	69 f7       	brne	.-38     	; 0x5070 <PlayerTrains+0x1ce>
    5096:	14 c0       	rjmp	.+40     	; 0x50c0 <PlayerTrains+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5098:	6d 89       	ldd	r22, Y+21	; 0x15
    509a:	7e 89       	ldd	r23, Y+22	; 0x16
    509c:	8f 89       	ldd	r24, Y+23	; 0x17
    509e:	98 8d       	ldd	r25, Y+24	; 0x18
    50a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50a4:	dc 01       	movw	r26, r24
    50a6:	cb 01       	movw	r24, r22
    50a8:	9c 8b       	std	Y+20, r25	; 0x14
    50aa:	8b 8b       	std	Y+19, r24	; 0x13
    50ac:	8b 89       	ldd	r24, Y+19	; 0x13
    50ae:	9c 89       	ldd	r25, Y+20	; 0x14
    50b0:	98 8b       	std	Y+16, r25	; 0x10
    50b2:	8f 87       	std	Y+15, r24	; 0x0f
    50b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    50b6:	98 89       	ldd	r25, Y+16	; 0x10
    50b8:	01 97       	sbiw	r24, 0x01	; 1
    50ba:	f1 f7       	brne	.-4      	; 0x50b8 <PlayerTrains+0x216>
    50bc:	98 8b       	std	Y+16, r25	; 0x10
    50be:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(FRAME_DELAY_MS-50);
		LCD_voidClearPosition(1,playerY);
    50c0:	90 91 58 02 	lds	r25, 0x0258
    50c4:	81 e0       	ldi	r24, 0x01	; 1
    50c6:	69 2f       	mov	r22, r25
    50c8:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <LCD_voidClearPosition>
		LCD_voidGoToPosition(1,playerY);
    50cc:	90 91 58 02 	lds	r25, 0x0258
    50d0:	81 e0       	ldi	r24, 0x01	; 1
    50d2:	69 2f       	mov	r22, r25
    50d4:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
		LCD_voidWriteChar(PLAYER_RUN_3);
    50d8:	82 e0       	ldi	r24, 0x02	; 2
    50da:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
    50de:	80 e0       	ldi	r24, 0x00	; 0
    50e0:	90 e0       	ldi	r25, 0x00	; 0
    50e2:	a8 ec       	ldi	r26, 0xC8	; 200
    50e4:	b2 e4       	ldi	r27, 0x42	; 66
    50e6:	8b 87       	std	Y+11, r24	; 0x0b
    50e8:	9c 87       	std	Y+12, r25	; 0x0c
    50ea:	ad 87       	std	Y+13, r26	; 0x0d
    50ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    50f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    50f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    50f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    50f6:	20 e0       	ldi	r18, 0x00	; 0
    50f8:	30 e0       	ldi	r19, 0x00	; 0
    50fa:	4a e7       	ldi	r20, 0x7A	; 122
    50fc:	55 e4       	ldi	r21, 0x45	; 69
    50fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5102:	dc 01       	movw	r26, r24
    5104:	cb 01       	movw	r24, r22
    5106:	8f 83       	std	Y+7, r24	; 0x07
    5108:	98 87       	std	Y+8, r25	; 0x08
    510a:	a9 87       	std	Y+9, r26	; 0x09
    510c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    510e:	6f 81       	ldd	r22, Y+7	; 0x07
    5110:	78 85       	ldd	r23, Y+8	; 0x08
    5112:	89 85       	ldd	r24, Y+9	; 0x09
    5114:	9a 85       	ldd	r25, Y+10	; 0x0a
    5116:	20 e0       	ldi	r18, 0x00	; 0
    5118:	30 e0       	ldi	r19, 0x00	; 0
    511a:	40 e8       	ldi	r20, 0x80	; 128
    511c:	5f e3       	ldi	r21, 0x3F	; 63
    511e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5122:	88 23       	and	r24, r24
    5124:	2c f4       	brge	.+10     	; 0x5130 <PlayerTrains+0x28e>
		__ticks = 1;
    5126:	81 e0       	ldi	r24, 0x01	; 1
    5128:	90 e0       	ldi	r25, 0x00	; 0
    512a:	9e 83       	std	Y+6, r25	; 0x06
    512c:	8d 83       	std	Y+5, r24	; 0x05
    512e:	3f c0       	rjmp	.+126    	; 0x51ae <PlayerTrains+0x30c>
	else if (__tmp > 65535)
    5130:	6f 81       	ldd	r22, Y+7	; 0x07
    5132:	78 85       	ldd	r23, Y+8	; 0x08
    5134:	89 85       	ldd	r24, Y+9	; 0x09
    5136:	9a 85       	ldd	r25, Y+10	; 0x0a
    5138:	20 e0       	ldi	r18, 0x00	; 0
    513a:	3f ef       	ldi	r19, 0xFF	; 255
    513c:	4f e7       	ldi	r20, 0x7F	; 127
    513e:	57 e4       	ldi	r21, 0x47	; 71
    5140:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5144:	18 16       	cp	r1, r24
    5146:	4c f5       	brge	.+82     	; 0x519a <PlayerTrains+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5148:	6b 85       	ldd	r22, Y+11	; 0x0b
    514a:	7c 85       	ldd	r23, Y+12	; 0x0c
    514c:	8d 85       	ldd	r24, Y+13	; 0x0d
    514e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5150:	20 e0       	ldi	r18, 0x00	; 0
    5152:	30 e0       	ldi	r19, 0x00	; 0
    5154:	40 e2       	ldi	r20, 0x20	; 32
    5156:	51 e4       	ldi	r21, 0x41	; 65
    5158:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    515c:	dc 01       	movw	r26, r24
    515e:	cb 01       	movw	r24, r22
    5160:	bc 01       	movw	r22, r24
    5162:	cd 01       	movw	r24, r26
    5164:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5168:	dc 01       	movw	r26, r24
    516a:	cb 01       	movw	r24, r22
    516c:	9e 83       	std	Y+6, r25	; 0x06
    516e:	8d 83       	std	Y+5, r24	; 0x05
    5170:	0f c0       	rjmp	.+30     	; 0x5190 <PlayerTrains+0x2ee>
    5172:	80 e9       	ldi	r24, 0x90	; 144
    5174:	91 e0       	ldi	r25, 0x01	; 1
    5176:	9c 83       	std	Y+4, r25	; 0x04
    5178:	8b 83       	std	Y+3, r24	; 0x03
    517a:	8b 81       	ldd	r24, Y+3	; 0x03
    517c:	9c 81       	ldd	r25, Y+4	; 0x04
    517e:	01 97       	sbiw	r24, 0x01	; 1
    5180:	f1 f7       	brne	.-4      	; 0x517e <PlayerTrains+0x2dc>
    5182:	9c 83       	std	Y+4, r25	; 0x04
    5184:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5186:	8d 81       	ldd	r24, Y+5	; 0x05
    5188:	9e 81       	ldd	r25, Y+6	; 0x06
    518a:	01 97       	sbiw	r24, 0x01	; 1
    518c:	9e 83       	std	Y+6, r25	; 0x06
    518e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5190:	8d 81       	ldd	r24, Y+5	; 0x05
    5192:	9e 81       	ldd	r25, Y+6	; 0x06
    5194:	00 97       	sbiw	r24, 0x00	; 0
    5196:	69 f7       	brne	.-38     	; 0x5172 <PlayerTrains+0x2d0>
    5198:	14 c0       	rjmp	.+40     	; 0x51c2 <PlayerTrains+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    519a:	6f 81       	ldd	r22, Y+7	; 0x07
    519c:	78 85       	ldd	r23, Y+8	; 0x08
    519e:	89 85       	ldd	r24, Y+9	; 0x09
    51a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    51a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51a6:	dc 01       	movw	r26, r24
    51a8:	cb 01       	movw	r24, r22
    51aa:	9e 83       	std	Y+6, r25	; 0x06
    51ac:	8d 83       	std	Y+5, r24	; 0x05
    51ae:	8d 81       	ldd	r24, Y+5	; 0x05
    51b0:	9e 81       	ldd	r25, Y+6	; 0x06
    51b2:	9a 83       	std	Y+2, r25	; 0x02
    51b4:	89 83       	std	Y+1, r24	; 0x01
    51b6:	89 81       	ldd	r24, Y+1	; 0x01
    51b8:	9a 81       	ldd	r25, Y+2	; 0x02
    51ba:	01 97       	sbiw	r24, 0x01	; 1
    51bc:	f1 f7       	brne	.-4      	; 0x51ba <PlayerTrains+0x318>
    51be:	9a 83       	std	Y+2, r25	; 0x02
    51c0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(FRAME_DELAY_MS-50);
		LCD_voidClearPosition(1,playerY);
    51c2:	90 91 58 02 	lds	r25, 0x0258
    51c6:	81 e0       	ldi	r24, 0x01	; 1
    51c8:	69 2f       	mov	r22, r25
    51ca:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <LCD_voidClearPosition>
		playerY++;
    51ce:	80 91 58 02 	lds	r24, 0x0258
    51d2:	8f 5f       	subi	r24, 0xFF	; 255
    51d4:	80 93 58 02 	sts	0x0258, r24
}

void PlayerTrains(){
	LCD_voidGoToPosition(3,4);
	LCD_voidWriteString((u8*) "Match Warm-up");
	while(playerY < 20){
    51d8:	80 91 58 02 	lds	r24, 0x0258
    51dc:	84 31       	cpi	r24, 0x14	; 20
    51de:	08 f4       	brcc	.+2      	; 0x51e2 <PlayerTrains+0x340>
    51e0:	73 ce       	rjmp	.-794    	; 0x4ec8 <PlayerTrains+0x26>
		LCD_voidWriteChar(PLAYER_RUN_3);
		_delay_ms(FRAME_DELAY_MS-50);
		LCD_voidClearPosition(1,playerY);
		playerY++;
	}
}
    51e2:	aa 96       	adiw	r28, 0x2a	; 42
    51e4:	0f b6       	in	r0, 0x3f	; 63
    51e6:	f8 94       	cli
    51e8:	de bf       	out	0x3e, r29	; 62
    51ea:	0f be       	out	0x3f, r0	; 63
    51ec:	cd bf       	out	0x3d, r28	; 61
    51ee:	cf 91       	pop	r28
    51f0:	df 91       	pop	r29
    51f2:	08 95       	ret

000051f4 <Player1v1>:

void Player1v1(){
    51f4:	df 93       	push	r29
    51f6:	cf 93       	push	r28
    51f8:	cd b7       	in	r28, 0x3d	; 61
    51fa:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCommand(LCD_ClearDisplay);
    51fc:	81 e0       	ldi	r24, 0x01	; 1
    51fe:	0e 94 50 21 	call	0x42a0	; 0x42a0 <LCD_voidSendCommand>
	playerY = 10;
    5202:	8a e0       	ldi	r24, 0x0A	; 10
    5204:	80 93 58 02 	sts	0x0258, r24
	LCD_voidGoToPosition(3,0);
    5208:	83 e0       	ldi	r24, 0x03	; 3
    520a:	60 e0       	ldi	r22, 0x00	; 0
    520c:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*) "Salah gets the ball!");
    5210:	8e e6       	ldi	r24, 0x6E	; 110
    5212:	90 e0       	ldi	r25, 0x00	; 0
    5214:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <LCD_voidWriteString>
    5218:	02 c0       	rjmp	.+4      	; 0x521e <Player1v1+0x2a>
	while(playerY < 19){
		PlayerMove();
    521a:	0e 94 1e 29 	call	0x523c	; 0x523c <PlayerMove>
void Player1v1(){
	LCD_voidSendCommand(LCD_ClearDisplay);
	playerY = 10;
	LCD_voidGoToPosition(3,0);
	LCD_voidWriteString((u8*) "Salah gets the ball!");
	while(playerY < 19){
    521e:	80 91 58 02 	lds	r24, 0x0258
    5222:	83 31       	cpi	r24, 0x13	; 19
    5224:	d0 f3       	brcs	.-12     	; 0x521a <Player1v1+0x26>
		PlayerMove();
	}
	LCD_voidSendCommand(LCD_ClearDisplay);
    5226:	81 e0       	ldi	r24, 0x01	; 1
    5228:	0e 94 50 21 	call	0x42a0	; 0x42a0 <LCD_voidSendCommand>
	playerY = 6;
    522c:	86 e0       	ldi	r24, 0x06	; 6
    522e:	80 93 58 02 	sts	0x0258, r24
	DribbleEnemy();
    5232:	0e 94 c2 2a 	call	0x5584	; 0x5584 <DribbleEnemy>
}
    5236:	cf 91       	pop	r28
    5238:	df 91       	pop	r29
    523a:	08 95       	ret

0000523c <PlayerMove>:

void PlayerMove(){
    523c:	df 93       	push	r29
    523e:	cf 93       	push	r28
    5240:	cd b7       	in	r28, 0x3d	; 61
    5242:	de b7       	in	r29, 0x3e	; 62
    5244:	aa 97       	sbiw	r28, 0x2a	; 42
    5246:	0f b6       	in	r0, 0x3f	; 63
    5248:	f8 94       	cli
    524a:	de bf       	out	0x3e, r29	; 62
    524c:	0f be       	out	0x3f, r0	; 63
    524e:	cd bf       	out	0x3d, r28	; 61
	LCD_voidGoToPosition(1,playerY);
    5250:	90 91 58 02 	lds	r25, 0x0258
    5254:	81 e0       	ldi	r24, 0x01	; 1
    5256:	69 2f       	mov	r22, r25
    5258:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(PLAYER_RUN_1);
    525c:	80 e0       	ldi	r24, 0x00	; 0
    525e:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
	LCD_voidWriteChar(BALL_GROUND);
    5262:	8e e2       	ldi	r24, 0x2E	; 46
    5264:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
    5268:	80 e0       	ldi	r24, 0x00	; 0
    526a:	90 e0       	ldi	r25, 0x00	; 0
    526c:	a8 e4       	ldi	r26, 0x48	; 72
    526e:	b2 e4       	ldi	r27, 0x42	; 66
    5270:	8f a3       	std	Y+39, r24	; 0x27
    5272:	98 a7       	std	Y+40, r25	; 0x28
    5274:	a9 a7       	std	Y+41, r26	; 0x29
    5276:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5278:	6f a1       	ldd	r22, Y+39	; 0x27
    527a:	78 a5       	ldd	r23, Y+40	; 0x28
    527c:	89 a5       	ldd	r24, Y+41	; 0x29
    527e:	9a a5       	ldd	r25, Y+42	; 0x2a
    5280:	20 e0       	ldi	r18, 0x00	; 0
    5282:	30 e0       	ldi	r19, 0x00	; 0
    5284:	4a e7       	ldi	r20, 0x7A	; 122
    5286:	55 e4       	ldi	r21, 0x45	; 69
    5288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    528c:	dc 01       	movw	r26, r24
    528e:	cb 01       	movw	r24, r22
    5290:	8b a3       	std	Y+35, r24	; 0x23
    5292:	9c a3       	std	Y+36, r25	; 0x24
    5294:	ad a3       	std	Y+37, r26	; 0x25
    5296:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5298:	6b a1       	ldd	r22, Y+35	; 0x23
    529a:	7c a1       	ldd	r23, Y+36	; 0x24
    529c:	8d a1       	ldd	r24, Y+37	; 0x25
    529e:	9e a1       	ldd	r25, Y+38	; 0x26
    52a0:	20 e0       	ldi	r18, 0x00	; 0
    52a2:	30 e0       	ldi	r19, 0x00	; 0
    52a4:	40 e8       	ldi	r20, 0x80	; 128
    52a6:	5f e3       	ldi	r21, 0x3F	; 63
    52a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    52ac:	88 23       	and	r24, r24
    52ae:	2c f4       	brge	.+10     	; 0x52ba <PlayerMove+0x7e>
		__ticks = 1;
    52b0:	81 e0       	ldi	r24, 0x01	; 1
    52b2:	90 e0       	ldi	r25, 0x00	; 0
    52b4:	9a a3       	std	Y+34, r25	; 0x22
    52b6:	89 a3       	std	Y+33, r24	; 0x21
    52b8:	3f c0       	rjmp	.+126    	; 0x5338 <PlayerMove+0xfc>
	else if (__tmp > 65535)
    52ba:	6b a1       	ldd	r22, Y+35	; 0x23
    52bc:	7c a1       	ldd	r23, Y+36	; 0x24
    52be:	8d a1       	ldd	r24, Y+37	; 0x25
    52c0:	9e a1       	ldd	r25, Y+38	; 0x26
    52c2:	20 e0       	ldi	r18, 0x00	; 0
    52c4:	3f ef       	ldi	r19, 0xFF	; 255
    52c6:	4f e7       	ldi	r20, 0x7F	; 127
    52c8:	57 e4       	ldi	r21, 0x47	; 71
    52ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    52ce:	18 16       	cp	r1, r24
    52d0:	4c f5       	brge	.+82     	; 0x5324 <PlayerMove+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52d2:	6f a1       	ldd	r22, Y+39	; 0x27
    52d4:	78 a5       	ldd	r23, Y+40	; 0x28
    52d6:	89 a5       	ldd	r24, Y+41	; 0x29
    52d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    52da:	20 e0       	ldi	r18, 0x00	; 0
    52dc:	30 e0       	ldi	r19, 0x00	; 0
    52de:	40 e2       	ldi	r20, 0x20	; 32
    52e0:	51 e4       	ldi	r21, 0x41	; 65
    52e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52e6:	dc 01       	movw	r26, r24
    52e8:	cb 01       	movw	r24, r22
    52ea:	bc 01       	movw	r22, r24
    52ec:	cd 01       	movw	r24, r26
    52ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52f2:	dc 01       	movw	r26, r24
    52f4:	cb 01       	movw	r24, r22
    52f6:	9a a3       	std	Y+34, r25	; 0x22
    52f8:	89 a3       	std	Y+33, r24	; 0x21
    52fa:	0f c0       	rjmp	.+30     	; 0x531a <PlayerMove+0xde>
    52fc:	80 e9       	ldi	r24, 0x90	; 144
    52fe:	91 e0       	ldi	r25, 0x01	; 1
    5300:	98 a3       	std	Y+32, r25	; 0x20
    5302:	8f 8f       	std	Y+31, r24	; 0x1f
    5304:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5306:	98 a1       	ldd	r25, Y+32	; 0x20
    5308:	01 97       	sbiw	r24, 0x01	; 1
    530a:	f1 f7       	brne	.-4      	; 0x5308 <PlayerMove+0xcc>
    530c:	98 a3       	std	Y+32, r25	; 0x20
    530e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5310:	89 a1       	ldd	r24, Y+33	; 0x21
    5312:	9a a1       	ldd	r25, Y+34	; 0x22
    5314:	01 97       	sbiw	r24, 0x01	; 1
    5316:	9a a3       	std	Y+34, r25	; 0x22
    5318:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    531a:	89 a1       	ldd	r24, Y+33	; 0x21
    531c:	9a a1       	ldd	r25, Y+34	; 0x22
    531e:	00 97       	sbiw	r24, 0x00	; 0
    5320:	69 f7       	brne	.-38     	; 0x52fc <PlayerMove+0xc0>
    5322:	14 c0       	rjmp	.+40     	; 0x534c <PlayerMove+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5324:	6b a1       	ldd	r22, Y+35	; 0x23
    5326:	7c a1       	ldd	r23, Y+36	; 0x24
    5328:	8d a1       	ldd	r24, Y+37	; 0x25
    532a:	9e a1       	ldd	r25, Y+38	; 0x26
    532c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5330:	dc 01       	movw	r26, r24
    5332:	cb 01       	movw	r24, r22
    5334:	9a a3       	std	Y+34, r25	; 0x22
    5336:	89 a3       	std	Y+33, r24	; 0x21
    5338:	89 a1       	ldd	r24, Y+33	; 0x21
    533a:	9a a1       	ldd	r25, Y+34	; 0x22
    533c:	9e 8f       	std	Y+30, r25	; 0x1e
    533e:	8d 8f       	std	Y+29, r24	; 0x1d
    5340:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5342:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5344:	01 97       	sbiw	r24, 0x01	; 1
    5346:	f1 f7       	brne	.-4      	; 0x5344 <PlayerMove+0x108>
    5348:	9e 8f       	std	Y+30, r25	; 0x1e
    534a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(FRAME_DELAY_MS - 100);
	LCD_voidClearPosition(1,playerY);
    534c:	90 91 58 02 	lds	r25, 0x0258
    5350:	81 e0       	ldi	r24, 0x01	; 1
    5352:	69 2f       	mov	r22, r25
    5354:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <LCD_voidClearPosition>
	LCD_voidGoToPosition(1,playerY);
    5358:	90 91 58 02 	lds	r25, 0x0258
    535c:	81 e0       	ldi	r24, 0x01	; 1
    535e:	69 2f       	mov	r22, r25
    5360:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(PLAYER_RUN_2);
    5364:	81 e0       	ldi	r24, 0x01	; 1
    5366:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
	LCD_voidWriteChar(BALL_AIR);
    536a:	85 ea       	ldi	r24, 0xA5	; 165
    536c:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
    5370:	80 e0       	ldi	r24, 0x00	; 0
    5372:	90 e0       	ldi	r25, 0x00	; 0
    5374:	a8 e4       	ldi	r26, 0x48	; 72
    5376:	b2 e4       	ldi	r27, 0x42	; 66
    5378:	89 8f       	std	Y+25, r24	; 0x19
    537a:	9a 8f       	std	Y+26, r25	; 0x1a
    537c:	ab 8f       	std	Y+27, r26	; 0x1b
    537e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5380:	69 8d       	ldd	r22, Y+25	; 0x19
    5382:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5384:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5386:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5388:	20 e0       	ldi	r18, 0x00	; 0
    538a:	30 e0       	ldi	r19, 0x00	; 0
    538c:	4a e7       	ldi	r20, 0x7A	; 122
    538e:	55 e4       	ldi	r21, 0x45	; 69
    5390:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5394:	dc 01       	movw	r26, r24
    5396:	cb 01       	movw	r24, r22
    5398:	8d 8b       	std	Y+21, r24	; 0x15
    539a:	9e 8b       	std	Y+22, r25	; 0x16
    539c:	af 8b       	std	Y+23, r26	; 0x17
    539e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    53a0:	6d 89       	ldd	r22, Y+21	; 0x15
    53a2:	7e 89       	ldd	r23, Y+22	; 0x16
    53a4:	8f 89       	ldd	r24, Y+23	; 0x17
    53a6:	98 8d       	ldd	r25, Y+24	; 0x18
    53a8:	20 e0       	ldi	r18, 0x00	; 0
    53aa:	30 e0       	ldi	r19, 0x00	; 0
    53ac:	40 e8       	ldi	r20, 0x80	; 128
    53ae:	5f e3       	ldi	r21, 0x3F	; 63
    53b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    53b4:	88 23       	and	r24, r24
    53b6:	2c f4       	brge	.+10     	; 0x53c2 <PlayerMove+0x186>
		__ticks = 1;
    53b8:	81 e0       	ldi	r24, 0x01	; 1
    53ba:	90 e0       	ldi	r25, 0x00	; 0
    53bc:	9c 8b       	std	Y+20, r25	; 0x14
    53be:	8b 8b       	std	Y+19, r24	; 0x13
    53c0:	3f c0       	rjmp	.+126    	; 0x5440 <PlayerMove+0x204>
	else if (__tmp > 65535)
    53c2:	6d 89       	ldd	r22, Y+21	; 0x15
    53c4:	7e 89       	ldd	r23, Y+22	; 0x16
    53c6:	8f 89       	ldd	r24, Y+23	; 0x17
    53c8:	98 8d       	ldd	r25, Y+24	; 0x18
    53ca:	20 e0       	ldi	r18, 0x00	; 0
    53cc:	3f ef       	ldi	r19, 0xFF	; 255
    53ce:	4f e7       	ldi	r20, 0x7F	; 127
    53d0:	57 e4       	ldi	r21, 0x47	; 71
    53d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    53d6:	18 16       	cp	r1, r24
    53d8:	4c f5       	brge	.+82     	; 0x542c <PlayerMove+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53da:	69 8d       	ldd	r22, Y+25	; 0x19
    53dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    53de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    53e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    53e2:	20 e0       	ldi	r18, 0x00	; 0
    53e4:	30 e0       	ldi	r19, 0x00	; 0
    53e6:	40 e2       	ldi	r20, 0x20	; 32
    53e8:	51 e4       	ldi	r21, 0x41	; 65
    53ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53ee:	dc 01       	movw	r26, r24
    53f0:	cb 01       	movw	r24, r22
    53f2:	bc 01       	movw	r22, r24
    53f4:	cd 01       	movw	r24, r26
    53f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53fa:	dc 01       	movw	r26, r24
    53fc:	cb 01       	movw	r24, r22
    53fe:	9c 8b       	std	Y+20, r25	; 0x14
    5400:	8b 8b       	std	Y+19, r24	; 0x13
    5402:	0f c0       	rjmp	.+30     	; 0x5422 <PlayerMove+0x1e6>
    5404:	80 e9       	ldi	r24, 0x90	; 144
    5406:	91 e0       	ldi	r25, 0x01	; 1
    5408:	9a 8b       	std	Y+18, r25	; 0x12
    540a:	89 8b       	std	Y+17, r24	; 0x11
    540c:	89 89       	ldd	r24, Y+17	; 0x11
    540e:	9a 89       	ldd	r25, Y+18	; 0x12
    5410:	01 97       	sbiw	r24, 0x01	; 1
    5412:	f1 f7       	brne	.-4      	; 0x5410 <PlayerMove+0x1d4>
    5414:	9a 8b       	std	Y+18, r25	; 0x12
    5416:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5418:	8b 89       	ldd	r24, Y+19	; 0x13
    541a:	9c 89       	ldd	r25, Y+20	; 0x14
    541c:	01 97       	sbiw	r24, 0x01	; 1
    541e:	9c 8b       	std	Y+20, r25	; 0x14
    5420:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5422:	8b 89       	ldd	r24, Y+19	; 0x13
    5424:	9c 89       	ldd	r25, Y+20	; 0x14
    5426:	00 97       	sbiw	r24, 0x00	; 0
    5428:	69 f7       	brne	.-38     	; 0x5404 <PlayerMove+0x1c8>
    542a:	14 c0       	rjmp	.+40     	; 0x5454 <PlayerMove+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    542c:	6d 89       	ldd	r22, Y+21	; 0x15
    542e:	7e 89       	ldd	r23, Y+22	; 0x16
    5430:	8f 89       	ldd	r24, Y+23	; 0x17
    5432:	98 8d       	ldd	r25, Y+24	; 0x18
    5434:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5438:	dc 01       	movw	r26, r24
    543a:	cb 01       	movw	r24, r22
    543c:	9c 8b       	std	Y+20, r25	; 0x14
    543e:	8b 8b       	std	Y+19, r24	; 0x13
    5440:	8b 89       	ldd	r24, Y+19	; 0x13
    5442:	9c 89       	ldd	r25, Y+20	; 0x14
    5444:	98 8b       	std	Y+16, r25	; 0x10
    5446:	8f 87       	std	Y+15, r24	; 0x0f
    5448:	8f 85       	ldd	r24, Y+15	; 0x0f
    544a:	98 89       	ldd	r25, Y+16	; 0x10
    544c:	01 97       	sbiw	r24, 0x01	; 1
    544e:	f1 f7       	brne	.-4      	; 0x544c <PlayerMove+0x210>
    5450:	98 8b       	std	Y+16, r25	; 0x10
    5452:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(FRAME_DELAY_MS - 100);
	LCD_voidClearPosition(1,playerY);
    5454:	90 91 58 02 	lds	r25, 0x0258
    5458:	81 e0       	ldi	r24, 0x01	; 1
    545a:	69 2f       	mov	r22, r25
    545c:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <LCD_voidClearPosition>
	LCD_voidGoToPosition(1,playerY);
    5460:	90 91 58 02 	lds	r25, 0x0258
    5464:	81 e0       	ldi	r24, 0x01	; 1
    5466:	69 2f       	mov	r22, r25
    5468:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(PLAYER_RUN_3);
    546c:	82 e0       	ldi	r24, 0x02	; 2
    546e:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
	LCD_voidWriteChar(BALL_GROUND);
    5472:	8e e2       	ldi	r24, 0x2E	; 46
    5474:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
    5478:	80 e0       	ldi	r24, 0x00	; 0
    547a:	90 e0       	ldi	r25, 0x00	; 0
    547c:	a8 e4       	ldi	r26, 0x48	; 72
    547e:	b2 e4       	ldi	r27, 0x42	; 66
    5480:	8b 87       	std	Y+11, r24	; 0x0b
    5482:	9c 87       	std	Y+12, r25	; 0x0c
    5484:	ad 87       	std	Y+13, r26	; 0x0d
    5486:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5488:	6b 85       	ldd	r22, Y+11	; 0x0b
    548a:	7c 85       	ldd	r23, Y+12	; 0x0c
    548c:	8d 85       	ldd	r24, Y+13	; 0x0d
    548e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5490:	20 e0       	ldi	r18, 0x00	; 0
    5492:	30 e0       	ldi	r19, 0x00	; 0
    5494:	4a e7       	ldi	r20, 0x7A	; 122
    5496:	55 e4       	ldi	r21, 0x45	; 69
    5498:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    549c:	dc 01       	movw	r26, r24
    549e:	cb 01       	movw	r24, r22
    54a0:	8f 83       	std	Y+7, r24	; 0x07
    54a2:	98 87       	std	Y+8, r25	; 0x08
    54a4:	a9 87       	std	Y+9, r26	; 0x09
    54a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    54a8:	6f 81       	ldd	r22, Y+7	; 0x07
    54aa:	78 85       	ldd	r23, Y+8	; 0x08
    54ac:	89 85       	ldd	r24, Y+9	; 0x09
    54ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    54b0:	20 e0       	ldi	r18, 0x00	; 0
    54b2:	30 e0       	ldi	r19, 0x00	; 0
    54b4:	40 e8       	ldi	r20, 0x80	; 128
    54b6:	5f e3       	ldi	r21, 0x3F	; 63
    54b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    54bc:	88 23       	and	r24, r24
    54be:	2c f4       	brge	.+10     	; 0x54ca <PlayerMove+0x28e>
		__ticks = 1;
    54c0:	81 e0       	ldi	r24, 0x01	; 1
    54c2:	90 e0       	ldi	r25, 0x00	; 0
    54c4:	9e 83       	std	Y+6, r25	; 0x06
    54c6:	8d 83       	std	Y+5, r24	; 0x05
    54c8:	3f c0       	rjmp	.+126    	; 0x5548 <PlayerMove+0x30c>
	else if (__tmp > 65535)
    54ca:	6f 81       	ldd	r22, Y+7	; 0x07
    54cc:	78 85       	ldd	r23, Y+8	; 0x08
    54ce:	89 85       	ldd	r24, Y+9	; 0x09
    54d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    54d2:	20 e0       	ldi	r18, 0x00	; 0
    54d4:	3f ef       	ldi	r19, 0xFF	; 255
    54d6:	4f e7       	ldi	r20, 0x7F	; 127
    54d8:	57 e4       	ldi	r21, 0x47	; 71
    54da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    54de:	18 16       	cp	r1, r24
    54e0:	4c f5       	brge	.+82     	; 0x5534 <PlayerMove+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    54e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    54e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    54e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    54ea:	20 e0       	ldi	r18, 0x00	; 0
    54ec:	30 e0       	ldi	r19, 0x00	; 0
    54ee:	40 e2       	ldi	r20, 0x20	; 32
    54f0:	51 e4       	ldi	r21, 0x41	; 65
    54f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54f6:	dc 01       	movw	r26, r24
    54f8:	cb 01       	movw	r24, r22
    54fa:	bc 01       	movw	r22, r24
    54fc:	cd 01       	movw	r24, r26
    54fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5502:	dc 01       	movw	r26, r24
    5504:	cb 01       	movw	r24, r22
    5506:	9e 83       	std	Y+6, r25	; 0x06
    5508:	8d 83       	std	Y+5, r24	; 0x05
    550a:	0f c0       	rjmp	.+30     	; 0x552a <PlayerMove+0x2ee>
    550c:	80 e9       	ldi	r24, 0x90	; 144
    550e:	91 e0       	ldi	r25, 0x01	; 1
    5510:	9c 83       	std	Y+4, r25	; 0x04
    5512:	8b 83       	std	Y+3, r24	; 0x03
    5514:	8b 81       	ldd	r24, Y+3	; 0x03
    5516:	9c 81       	ldd	r25, Y+4	; 0x04
    5518:	01 97       	sbiw	r24, 0x01	; 1
    551a:	f1 f7       	brne	.-4      	; 0x5518 <PlayerMove+0x2dc>
    551c:	9c 83       	std	Y+4, r25	; 0x04
    551e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5520:	8d 81       	ldd	r24, Y+5	; 0x05
    5522:	9e 81       	ldd	r25, Y+6	; 0x06
    5524:	01 97       	sbiw	r24, 0x01	; 1
    5526:	9e 83       	std	Y+6, r25	; 0x06
    5528:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    552a:	8d 81       	ldd	r24, Y+5	; 0x05
    552c:	9e 81       	ldd	r25, Y+6	; 0x06
    552e:	00 97       	sbiw	r24, 0x00	; 0
    5530:	69 f7       	brne	.-38     	; 0x550c <PlayerMove+0x2d0>
    5532:	14 c0       	rjmp	.+40     	; 0x555c <PlayerMove+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5534:	6f 81       	ldd	r22, Y+7	; 0x07
    5536:	78 85       	ldd	r23, Y+8	; 0x08
    5538:	89 85       	ldd	r24, Y+9	; 0x09
    553a:	9a 85       	ldd	r25, Y+10	; 0x0a
    553c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5540:	dc 01       	movw	r26, r24
    5542:	cb 01       	movw	r24, r22
    5544:	9e 83       	std	Y+6, r25	; 0x06
    5546:	8d 83       	std	Y+5, r24	; 0x05
    5548:	8d 81       	ldd	r24, Y+5	; 0x05
    554a:	9e 81       	ldd	r25, Y+6	; 0x06
    554c:	9a 83       	std	Y+2, r25	; 0x02
    554e:	89 83       	std	Y+1, r24	; 0x01
    5550:	89 81       	ldd	r24, Y+1	; 0x01
    5552:	9a 81       	ldd	r25, Y+2	; 0x02
    5554:	01 97       	sbiw	r24, 0x01	; 1
    5556:	f1 f7       	brne	.-4      	; 0x5554 <PlayerMove+0x318>
    5558:	9a 83       	std	Y+2, r25	; 0x02
    555a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(FRAME_DELAY_MS - 100);
	LCD_voidClearPosition(1,playerY);
    555c:	90 91 58 02 	lds	r25, 0x0258
    5560:	81 e0       	ldi	r24, 0x01	; 1
    5562:	69 2f       	mov	r22, r25
    5564:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <LCD_voidClearPosition>
	playerY++;
    5568:	80 91 58 02 	lds	r24, 0x0258
    556c:	8f 5f       	subi	r24, 0xFF	; 255
    556e:	80 93 58 02 	sts	0x0258, r24
}
    5572:	aa 96       	adiw	r28, 0x2a	; 42
    5574:	0f b6       	in	r0, 0x3f	; 63
    5576:	f8 94       	cli
    5578:	de bf       	out	0x3e, r29	; 62
    557a:	0f be       	out	0x3f, r0	; 63
    557c:	cd bf       	out	0x3d, r28	; 61
    557e:	cf 91       	pop	r28
    5580:	df 91       	pop	r29
    5582:	08 95       	ret

00005584 <DribbleEnemy>:

void DribbleEnemy(){
    5584:	0f 93       	push	r16
    5586:	1f 93       	push	r17
    5588:	df 93       	push	r29
    558a:	cf 93       	push	r28
    558c:	cd b7       	in	r28, 0x3d	; 61
    558e:	de b7       	in	r29, 0x3e	; 62
    5590:	c6 54       	subi	r28, 0x46	; 70
    5592:	d0 40       	sbci	r29, 0x00	; 0
    5594:	0f b6       	in	r0, 0x3f	; 63
    5596:	f8 94       	cli
    5598:	de bf       	out	0x3e, r29	; 62
    559a:	0f be       	out	0x3f, r0	; 63
    559c:	cd bf       	out	0x3d, r28	; 61
	LCD_voidClearLine(3);
    559e:	83 e0       	ldi	r24, 0x03	; 3
    55a0:	0e 94 f6 25 	call	0x4bec	; 0x4bec <LCD_voidClearLine>
	LCD_voidGoToPosition(3,2);
    55a4:	83 e0       	ldi	r24, 0x03	; 3
    55a6:	62 e0       	ldi	r22, 0x02	; 2
    55a8:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*) "Salah vs Keeper!");
    55ac:	83 e8       	ldi	r24, 0x83	; 131
    55ae:	90 e0       	ldi	r25, 0x00	; 0
    55b0:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <LCD_voidWriteString>
    55b4:	ce c1       	rjmp	.+924    	; 0x5952 <DribbleEnemy+0x3ce>
	while(playerY < 9){
		LCD_voidGoToPosition(1,playerY);
    55b6:	90 91 58 02 	lds	r25, 0x0258
    55ba:	81 e0       	ldi	r24, 0x01	; 1
    55bc:	69 2f       	mov	r22, r25
    55be:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
		LCD_voidWriteChar(PLAYER_RUN_1);
    55c2:	80 e0       	ldi	r24, 0x00	; 0
    55c4:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
		LCD_voidWriteChar(BALL_GROUND);
    55c8:	8e e2       	ldi	r24, 0x2E	; 46
    55ca:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
		LCD_voidGoToPosition(1,10);
    55ce:	81 e0       	ldi	r24, 0x01	; 1
    55d0:	6a e0       	ldi	r22, 0x0A	; 10
    55d2:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
		LCD_voidWriteChar(GOALKEEPER);
    55d6:	84 e0       	ldi	r24, 0x04	; 4
    55d8:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
		LCD_voidGoToPosition(1,15);
    55dc:	81 e0       	ldi	r24, 0x01	; 1
    55de:	6f e0       	ldi	r22, 0x0F	; 15
    55e0:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
		LCD_voidWriteChar(GOAL_POST);
    55e4:	8a eb       	ldi	r24, 0xBA	; 186
    55e6:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
    55ea:	fe 01       	movw	r30, r28
    55ec:	ed 5b       	subi	r30, 0xBD	; 189
    55ee:	ff 4f       	sbci	r31, 0xFF	; 255
    55f0:	80 e0       	ldi	r24, 0x00	; 0
    55f2:	90 e0       	ldi	r25, 0x00	; 0
    55f4:	a6 e1       	ldi	r26, 0x16	; 22
    55f6:	b3 e4       	ldi	r27, 0x43	; 67
    55f8:	80 83       	st	Z, r24
    55fa:	91 83       	std	Z+1, r25	; 0x01
    55fc:	a2 83       	std	Z+2, r26	; 0x02
    55fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5600:	8e 01       	movw	r16, r28
    5602:	01 5c       	subi	r16, 0xC1	; 193
    5604:	1f 4f       	sbci	r17, 0xFF	; 255
    5606:	fe 01       	movw	r30, r28
    5608:	ed 5b       	subi	r30, 0xBD	; 189
    560a:	ff 4f       	sbci	r31, 0xFF	; 255
    560c:	60 81       	ld	r22, Z
    560e:	71 81       	ldd	r23, Z+1	; 0x01
    5610:	82 81       	ldd	r24, Z+2	; 0x02
    5612:	93 81       	ldd	r25, Z+3	; 0x03
    5614:	20 e0       	ldi	r18, 0x00	; 0
    5616:	30 e0       	ldi	r19, 0x00	; 0
    5618:	4a e7       	ldi	r20, 0x7A	; 122
    561a:	55 e4       	ldi	r21, 0x45	; 69
    561c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5620:	dc 01       	movw	r26, r24
    5622:	cb 01       	movw	r24, r22
    5624:	f8 01       	movw	r30, r16
    5626:	80 83       	st	Z, r24
    5628:	91 83       	std	Z+1, r25	; 0x01
    562a:	a2 83       	std	Z+2, r26	; 0x02
    562c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    562e:	fe 01       	movw	r30, r28
    5630:	ff 96       	adiw	r30, 0x3f	; 63
    5632:	60 81       	ld	r22, Z
    5634:	71 81       	ldd	r23, Z+1	; 0x01
    5636:	82 81       	ldd	r24, Z+2	; 0x02
    5638:	93 81       	ldd	r25, Z+3	; 0x03
    563a:	20 e0       	ldi	r18, 0x00	; 0
    563c:	30 e0       	ldi	r19, 0x00	; 0
    563e:	40 e8       	ldi	r20, 0x80	; 128
    5640:	5f e3       	ldi	r21, 0x3F	; 63
    5642:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5646:	88 23       	and	r24, r24
    5648:	2c f4       	brge	.+10     	; 0x5654 <DribbleEnemy+0xd0>
		__ticks = 1;
    564a:	81 e0       	ldi	r24, 0x01	; 1
    564c:	90 e0       	ldi	r25, 0x00	; 0
    564e:	9e af       	std	Y+62, r25	; 0x3e
    5650:	8d af       	std	Y+61, r24	; 0x3d
    5652:	46 c0       	rjmp	.+140    	; 0x56e0 <DribbleEnemy+0x15c>
	else if (__tmp > 65535)
    5654:	fe 01       	movw	r30, r28
    5656:	ff 96       	adiw	r30, 0x3f	; 63
    5658:	60 81       	ld	r22, Z
    565a:	71 81       	ldd	r23, Z+1	; 0x01
    565c:	82 81       	ldd	r24, Z+2	; 0x02
    565e:	93 81       	ldd	r25, Z+3	; 0x03
    5660:	20 e0       	ldi	r18, 0x00	; 0
    5662:	3f ef       	ldi	r19, 0xFF	; 255
    5664:	4f e7       	ldi	r20, 0x7F	; 127
    5666:	57 e4       	ldi	r21, 0x47	; 71
    5668:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    566c:	18 16       	cp	r1, r24
    566e:	64 f5       	brge	.+88     	; 0x56c8 <DribbleEnemy+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5670:	fe 01       	movw	r30, r28
    5672:	ed 5b       	subi	r30, 0xBD	; 189
    5674:	ff 4f       	sbci	r31, 0xFF	; 255
    5676:	60 81       	ld	r22, Z
    5678:	71 81       	ldd	r23, Z+1	; 0x01
    567a:	82 81       	ldd	r24, Z+2	; 0x02
    567c:	93 81       	ldd	r25, Z+3	; 0x03
    567e:	20 e0       	ldi	r18, 0x00	; 0
    5680:	30 e0       	ldi	r19, 0x00	; 0
    5682:	40 e2       	ldi	r20, 0x20	; 32
    5684:	51 e4       	ldi	r21, 0x41	; 65
    5686:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    568a:	dc 01       	movw	r26, r24
    568c:	cb 01       	movw	r24, r22
    568e:	bc 01       	movw	r22, r24
    5690:	cd 01       	movw	r24, r26
    5692:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5696:	dc 01       	movw	r26, r24
    5698:	cb 01       	movw	r24, r22
    569a:	9e af       	std	Y+62, r25	; 0x3e
    569c:	8d af       	std	Y+61, r24	; 0x3d
    569e:	0f c0       	rjmp	.+30     	; 0x56be <DribbleEnemy+0x13a>
    56a0:	80 e9       	ldi	r24, 0x90	; 144
    56a2:	91 e0       	ldi	r25, 0x01	; 1
    56a4:	9c af       	std	Y+60, r25	; 0x3c
    56a6:	8b af       	std	Y+59, r24	; 0x3b
    56a8:	8b ad       	ldd	r24, Y+59	; 0x3b
    56aa:	9c ad       	ldd	r25, Y+60	; 0x3c
    56ac:	01 97       	sbiw	r24, 0x01	; 1
    56ae:	f1 f7       	brne	.-4      	; 0x56ac <DribbleEnemy+0x128>
    56b0:	9c af       	std	Y+60, r25	; 0x3c
    56b2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56b4:	8d ad       	ldd	r24, Y+61	; 0x3d
    56b6:	9e ad       	ldd	r25, Y+62	; 0x3e
    56b8:	01 97       	sbiw	r24, 0x01	; 1
    56ba:	9e af       	std	Y+62, r25	; 0x3e
    56bc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56be:	8d ad       	ldd	r24, Y+61	; 0x3d
    56c0:	9e ad       	ldd	r25, Y+62	; 0x3e
    56c2:	00 97       	sbiw	r24, 0x00	; 0
    56c4:	69 f7       	brne	.-38     	; 0x56a0 <DribbleEnemy+0x11c>
    56c6:	16 c0       	rjmp	.+44     	; 0x56f4 <DribbleEnemy+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56c8:	fe 01       	movw	r30, r28
    56ca:	ff 96       	adiw	r30, 0x3f	; 63
    56cc:	60 81       	ld	r22, Z
    56ce:	71 81       	ldd	r23, Z+1	; 0x01
    56d0:	82 81       	ldd	r24, Z+2	; 0x02
    56d2:	93 81       	ldd	r25, Z+3	; 0x03
    56d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56d8:	dc 01       	movw	r26, r24
    56da:	cb 01       	movw	r24, r22
    56dc:	9e af       	std	Y+62, r25	; 0x3e
    56de:	8d af       	std	Y+61, r24	; 0x3d
    56e0:	8d ad       	ldd	r24, Y+61	; 0x3d
    56e2:	9e ad       	ldd	r25, Y+62	; 0x3e
    56e4:	9a af       	std	Y+58, r25	; 0x3a
    56e6:	89 af       	std	Y+57, r24	; 0x39
    56e8:	89 ad       	ldd	r24, Y+57	; 0x39
    56ea:	9a ad       	ldd	r25, Y+58	; 0x3a
    56ec:	01 97       	sbiw	r24, 0x01	; 1
    56ee:	f1 f7       	brne	.-4      	; 0x56ec <DribbleEnemy+0x168>
    56f0:	9a af       	std	Y+58, r25	; 0x3a
    56f2:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(FRAME_DELAY_MS);
		LCD_voidClearPosition(1,playerY);
    56f4:	90 91 58 02 	lds	r25, 0x0258
    56f8:	81 e0       	ldi	r24, 0x01	; 1
    56fa:	69 2f       	mov	r22, r25
    56fc:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <LCD_voidClearPosition>
		LCD_voidGoToPosition(1,playerY);
    5700:	90 91 58 02 	lds	r25, 0x0258
    5704:	81 e0       	ldi	r24, 0x01	; 1
    5706:	69 2f       	mov	r22, r25
    5708:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
		LCD_voidWriteChar(PLAYER_RUN_2);
    570c:	81 e0       	ldi	r24, 0x01	; 1
    570e:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
		LCD_voidWriteChar(BALL_AIR);
    5712:	85 ea       	ldi	r24, 0xA5	; 165
    5714:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
		LCD_voidGoToPosition(1,10);
    5718:	81 e0       	ldi	r24, 0x01	; 1
    571a:	6a e0       	ldi	r22, 0x0A	; 10
    571c:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
		LCD_voidWriteChar(GOALKEEPER);
    5720:	84 e0       	ldi	r24, 0x04	; 4
    5722:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
		LCD_voidGoToPosition(1,15);
    5726:	81 e0       	ldi	r24, 0x01	; 1
    5728:	6f e0       	ldi	r22, 0x0F	; 15
    572a:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
		LCD_voidWriteChar(GOAL_POST);
    572e:	8a eb       	ldi	r24, 0xBA	; 186
    5730:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
    5734:	80 e0       	ldi	r24, 0x00	; 0
    5736:	90 e0       	ldi	r25, 0x00	; 0
    5738:	a6 e1       	ldi	r26, 0x16	; 22
    573a:	b3 e4       	ldi	r27, 0x43	; 67
    573c:	8d ab       	std	Y+53, r24	; 0x35
    573e:	9e ab       	std	Y+54, r25	; 0x36
    5740:	af ab       	std	Y+55, r26	; 0x37
    5742:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5744:	6d a9       	ldd	r22, Y+53	; 0x35
    5746:	7e a9       	ldd	r23, Y+54	; 0x36
    5748:	8f a9       	ldd	r24, Y+55	; 0x37
    574a:	98 ad       	ldd	r25, Y+56	; 0x38
    574c:	20 e0       	ldi	r18, 0x00	; 0
    574e:	30 e0       	ldi	r19, 0x00	; 0
    5750:	4a e7       	ldi	r20, 0x7A	; 122
    5752:	55 e4       	ldi	r21, 0x45	; 69
    5754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5758:	dc 01       	movw	r26, r24
    575a:	cb 01       	movw	r24, r22
    575c:	89 ab       	std	Y+49, r24	; 0x31
    575e:	9a ab       	std	Y+50, r25	; 0x32
    5760:	ab ab       	std	Y+51, r26	; 0x33
    5762:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5764:	69 a9       	ldd	r22, Y+49	; 0x31
    5766:	7a a9       	ldd	r23, Y+50	; 0x32
    5768:	8b a9       	ldd	r24, Y+51	; 0x33
    576a:	9c a9       	ldd	r25, Y+52	; 0x34
    576c:	20 e0       	ldi	r18, 0x00	; 0
    576e:	30 e0       	ldi	r19, 0x00	; 0
    5770:	40 e8       	ldi	r20, 0x80	; 128
    5772:	5f e3       	ldi	r21, 0x3F	; 63
    5774:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5778:	88 23       	and	r24, r24
    577a:	2c f4       	brge	.+10     	; 0x5786 <DribbleEnemy+0x202>
		__ticks = 1;
    577c:	81 e0       	ldi	r24, 0x01	; 1
    577e:	90 e0       	ldi	r25, 0x00	; 0
    5780:	98 ab       	std	Y+48, r25	; 0x30
    5782:	8f a7       	std	Y+47, r24	; 0x2f
    5784:	3f c0       	rjmp	.+126    	; 0x5804 <DribbleEnemy+0x280>
	else if (__tmp > 65535)
    5786:	69 a9       	ldd	r22, Y+49	; 0x31
    5788:	7a a9       	ldd	r23, Y+50	; 0x32
    578a:	8b a9       	ldd	r24, Y+51	; 0x33
    578c:	9c a9       	ldd	r25, Y+52	; 0x34
    578e:	20 e0       	ldi	r18, 0x00	; 0
    5790:	3f ef       	ldi	r19, 0xFF	; 255
    5792:	4f e7       	ldi	r20, 0x7F	; 127
    5794:	57 e4       	ldi	r21, 0x47	; 71
    5796:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    579a:	18 16       	cp	r1, r24
    579c:	4c f5       	brge	.+82     	; 0x57f0 <DribbleEnemy+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    579e:	6d a9       	ldd	r22, Y+53	; 0x35
    57a0:	7e a9       	ldd	r23, Y+54	; 0x36
    57a2:	8f a9       	ldd	r24, Y+55	; 0x37
    57a4:	98 ad       	ldd	r25, Y+56	; 0x38
    57a6:	20 e0       	ldi	r18, 0x00	; 0
    57a8:	30 e0       	ldi	r19, 0x00	; 0
    57aa:	40 e2       	ldi	r20, 0x20	; 32
    57ac:	51 e4       	ldi	r21, 0x41	; 65
    57ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57b2:	dc 01       	movw	r26, r24
    57b4:	cb 01       	movw	r24, r22
    57b6:	bc 01       	movw	r22, r24
    57b8:	cd 01       	movw	r24, r26
    57ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57be:	dc 01       	movw	r26, r24
    57c0:	cb 01       	movw	r24, r22
    57c2:	98 ab       	std	Y+48, r25	; 0x30
    57c4:	8f a7       	std	Y+47, r24	; 0x2f
    57c6:	0f c0       	rjmp	.+30     	; 0x57e6 <DribbleEnemy+0x262>
    57c8:	80 e9       	ldi	r24, 0x90	; 144
    57ca:	91 e0       	ldi	r25, 0x01	; 1
    57cc:	9e a7       	std	Y+46, r25	; 0x2e
    57ce:	8d a7       	std	Y+45, r24	; 0x2d
    57d0:	8d a5       	ldd	r24, Y+45	; 0x2d
    57d2:	9e a5       	ldd	r25, Y+46	; 0x2e
    57d4:	01 97       	sbiw	r24, 0x01	; 1
    57d6:	f1 f7       	brne	.-4      	; 0x57d4 <DribbleEnemy+0x250>
    57d8:	9e a7       	std	Y+46, r25	; 0x2e
    57da:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    57de:	98 a9       	ldd	r25, Y+48	; 0x30
    57e0:	01 97       	sbiw	r24, 0x01	; 1
    57e2:	98 ab       	std	Y+48, r25	; 0x30
    57e4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    57e8:	98 a9       	ldd	r25, Y+48	; 0x30
    57ea:	00 97       	sbiw	r24, 0x00	; 0
    57ec:	69 f7       	brne	.-38     	; 0x57c8 <DribbleEnemy+0x244>
    57ee:	14 c0       	rjmp	.+40     	; 0x5818 <DribbleEnemy+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57f0:	69 a9       	ldd	r22, Y+49	; 0x31
    57f2:	7a a9       	ldd	r23, Y+50	; 0x32
    57f4:	8b a9       	ldd	r24, Y+51	; 0x33
    57f6:	9c a9       	ldd	r25, Y+52	; 0x34
    57f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57fc:	dc 01       	movw	r26, r24
    57fe:	cb 01       	movw	r24, r22
    5800:	98 ab       	std	Y+48, r25	; 0x30
    5802:	8f a7       	std	Y+47, r24	; 0x2f
    5804:	8f a5       	ldd	r24, Y+47	; 0x2f
    5806:	98 a9       	ldd	r25, Y+48	; 0x30
    5808:	9c a7       	std	Y+44, r25	; 0x2c
    580a:	8b a7       	std	Y+43, r24	; 0x2b
    580c:	8b a5       	ldd	r24, Y+43	; 0x2b
    580e:	9c a5       	ldd	r25, Y+44	; 0x2c
    5810:	01 97       	sbiw	r24, 0x01	; 1
    5812:	f1 f7       	brne	.-4      	; 0x5810 <DribbleEnemy+0x28c>
    5814:	9c a7       	std	Y+44, r25	; 0x2c
    5816:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(FRAME_DELAY_MS);
		LCD_voidClearPosition(1,playerY);
    5818:	90 91 58 02 	lds	r25, 0x0258
    581c:	81 e0       	ldi	r24, 0x01	; 1
    581e:	69 2f       	mov	r22, r25
    5820:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <LCD_voidClearPosition>
		LCD_voidGoToPosition(1,playerY);
    5824:	90 91 58 02 	lds	r25, 0x0258
    5828:	81 e0       	ldi	r24, 0x01	; 1
    582a:	69 2f       	mov	r22, r25
    582c:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
		LCD_voidWriteChar(PLAYER_RUN_3);
    5830:	82 e0       	ldi	r24, 0x02	; 2
    5832:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
		LCD_voidWriteChar(BALL_GROUND);
    5836:	8e e2       	ldi	r24, 0x2E	; 46
    5838:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
		LCD_voidGoToPosition(1,10);
    583c:	81 e0       	ldi	r24, 0x01	; 1
    583e:	6a e0       	ldi	r22, 0x0A	; 10
    5840:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
		LCD_voidWriteChar(GOALKEEPER);
    5844:	84 e0       	ldi	r24, 0x04	; 4
    5846:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
		LCD_voidGoToPosition(1,15);
    584a:	81 e0       	ldi	r24, 0x01	; 1
    584c:	6f e0       	ldi	r22, 0x0F	; 15
    584e:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
		LCD_voidWriteChar(GOAL_POST);
    5852:	8a eb       	ldi	r24, 0xBA	; 186
    5854:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
    5858:	80 e0       	ldi	r24, 0x00	; 0
    585a:	90 e0       	ldi	r25, 0x00	; 0
    585c:	a6 e1       	ldi	r26, 0x16	; 22
    585e:	b3 e4       	ldi	r27, 0x43	; 67
    5860:	8f a3       	std	Y+39, r24	; 0x27
    5862:	98 a7       	std	Y+40, r25	; 0x28
    5864:	a9 a7       	std	Y+41, r26	; 0x29
    5866:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5868:	6f a1       	ldd	r22, Y+39	; 0x27
    586a:	78 a5       	ldd	r23, Y+40	; 0x28
    586c:	89 a5       	ldd	r24, Y+41	; 0x29
    586e:	9a a5       	ldd	r25, Y+42	; 0x2a
    5870:	20 e0       	ldi	r18, 0x00	; 0
    5872:	30 e0       	ldi	r19, 0x00	; 0
    5874:	4a e7       	ldi	r20, 0x7A	; 122
    5876:	55 e4       	ldi	r21, 0x45	; 69
    5878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    587c:	dc 01       	movw	r26, r24
    587e:	cb 01       	movw	r24, r22
    5880:	8b a3       	std	Y+35, r24	; 0x23
    5882:	9c a3       	std	Y+36, r25	; 0x24
    5884:	ad a3       	std	Y+37, r26	; 0x25
    5886:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5888:	6b a1       	ldd	r22, Y+35	; 0x23
    588a:	7c a1       	ldd	r23, Y+36	; 0x24
    588c:	8d a1       	ldd	r24, Y+37	; 0x25
    588e:	9e a1       	ldd	r25, Y+38	; 0x26
    5890:	20 e0       	ldi	r18, 0x00	; 0
    5892:	30 e0       	ldi	r19, 0x00	; 0
    5894:	40 e8       	ldi	r20, 0x80	; 128
    5896:	5f e3       	ldi	r21, 0x3F	; 63
    5898:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    589c:	88 23       	and	r24, r24
    589e:	2c f4       	brge	.+10     	; 0x58aa <DribbleEnemy+0x326>
		__ticks = 1;
    58a0:	81 e0       	ldi	r24, 0x01	; 1
    58a2:	90 e0       	ldi	r25, 0x00	; 0
    58a4:	9a a3       	std	Y+34, r25	; 0x22
    58a6:	89 a3       	std	Y+33, r24	; 0x21
    58a8:	3f c0       	rjmp	.+126    	; 0x5928 <DribbleEnemy+0x3a4>
	else if (__tmp > 65535)
    58aa:	6b a1       	ldd	r22, Y+35	; 0x23
    58ac:	7c a1       	ldd	r23, Y+36	; 0x24
    58ae:	8d a1       	ldd	r24, Y+37	; 0x25
    58b0:	9e a1       	ldd	r25, Y+38	; 0x26
    58b2:	20 e0       	ldi	r18, 0x00	; 0
    58b4:	3f ef       	ldi	r19, 0xFF	; 255
    58b6:	4f e7       	ldi	r20, 0x7F	; 127
    58b8:	57 e4       	ldi	r21, 0x47	; 71
    58ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    58be:	18 16       	cp	r1, r24
    58c0:	4c f5       	brge	.+82     	; 0x5914 <DribbleEnemy+0x390>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    58c2:	6f a1       	ldd	r22, Y+39	; 0x27
    58c4:	78 a5       	ldd	r23, Y+40	; 0x28
    58c6:	89 a5       	ldd	r24, Y+41	; 0x29
    58c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    58ca:	20 e0       	ldi	r18, 0x00	; 0
    58cc:	30 e0       	ldi	r19, 0x00	; 0
    58ce:	40 e2       	ldi	r20, 0x20	; 32
    58d0:	51 e4       	ldi	r21, 0x41	; 65
    58d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58d6:	dc 01       	movw	r26, r24
    58d8:	cb 01       	movw	r24, r22
    58da:	bc 01       	movw	r22, r24
    58dc:	cd 01       	movw	r24, r26
    58de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58e2:	dc 01       	movw	r26, r24
    58e4:	cb 01       	movw	r24, r22
    58e6:	9a a3       	std	Y+34, r25	; 0x22
    58e8:	89 a3       	std	Y+33, r24	; 0x21
    58ea:	0f c0       	rjmp	.+30     	; 0x590a <DribbleEnemy+0x386>
    58ec:	80 e9       	ldi	r24, 0x90	; 144
    58ee:	91 e0       	ldi	r25, 0x01	; 1
    58f0:	98 a3       	std	Y+32, r25	; 0x20
    58f2:	8f 8f       	std	Y+31, r24	; 0x1f
    58f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    58f6:	98 a1       	ldd	r25, Y+32	; 0x20
    58f8:	01 97       	sbiw	r24, 0x01	; 1
    58fa:	f1 f7       	brne	.-4      	; 0x58f8 <DribbleEnemy+0x374>
    58fc:	98 a3       	std	Y+32, r25	; 0x20
    58fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5900:	89 a1       	ldd	r24, Y+33	; 0x21
    5902:	9a a1       	ldd	r25, Y+34	; 0x22
    5904:	01 97       	sbiw	r24, 0x01	; 1
    5906:	9a a3       	std	Y+34, r25	; 0x22
    5908:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    590a:	89 a1       	ldd	r24, Y+33	; 0x21
    590c:	9a a1       	ldd	r25, Y+34	; 0x22
    590e:	00 97       	sbiw	r24, 0x00	; 0
    5910:	69 f7       	brne	.-38     	; 0x58ec <DribbleEnemy+0x368>
    5912:	14 c0       	rjmp	.+40     	; 0x593c <DribbleEnemy+0x3b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5914:	6b a1       	ldd	r22, Y+35	; 0x23
    5916:	7c a1       	ldd	r23, Y+36	; 0x24
    5918:	8d a1       	ldd	r24, Y+37	; 0x25
    591a:	9e a1       	ldd	r25, Y+38	; 0x26
    591c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5920:	dc 01       	movw	r26, r24
    5922:	cb 01       	movw	r24, r22
    5924:	9a a3       	std	Y+34, r25	; 0x22
    5926:	89 a3       	std	Y+33, r24	; 0x21
    5928:	89 a1       	ldd	r24, Y+33	; 0x21
    592a:	9a a1       	ldd	r25, Y+34	; 0x22
    592c:	9e 8f       	std	Y+30, r25	; 0x1e
    592e:	8d 8f       	std	Y+29, r24	; 0x1d
    5930:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5932:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5934:	01 97       	sbiw	r24, 0x01	; 1
    5936:	f1 f7       	brne	.-4      	; 0x5934 <DribbleEnemy+0x3b0>
    5938:	9e 8f       	std	Y+30, r25	; 0x1e
    593a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(FRAME_DELAY_MS);
		LCD_voidClearPosition(1,playerY);
    593c:	90 91 58 02 	lds	r25, 0x0258
    5940:	81 e0       	ldi	r24, 0x01	; 1
    5942:	69 2f       	mov	r22, r25
    5944:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <LCD_voidClearPosition>
		playerY++;
    5948:	80 91 58 02 	lds	r24, 0x0258
    594c:	8f 5f       	subi	r24, 0xFF	; 255
    594e:	80 93 58 02 	sts	0x0258, r24

void DribbleEnemy(){
	LCD_voidClearLine(3);
	LCD_voidGoToPosition(3,2);
	LCD_voidWriteString((u8*) "Salah vs Keeper!");
	while(playerY < 9){
    5952:	80 91 58 02 	lds	r24, 0x0258
    5956:	89 30       	cpi	r24, 0x09	; 9
    5958:	08 f4       	brcc	.+2      	; 0x595c <DribbleEnemy+0x3d8>
    595a:	2d ce       	rjmp	.-934    	; 0x55b6 <DribbleEnemy+0x32>
		LCD_voidWriteChar(GOAL_POST);
		_delay_ms(FRAME_DELAY_MS);
		LCD_voidClearPosition(1,playerY);
		playerY++;
	}
	LCD_voidClearLine(3);
    595c:	83 e0       	ldi	r24, 0x03	; 3
    595e:	0e 94 f6 25 	call	0x4bec	; 0x4bec <LCD_voidClearLine>
	LCD_voidGoToPosition(3,5);
    5962:	83 e0       	ldi	r24, 0x03	; 3
    5964:	65 e0       	ldi	r22, 0x05	; 5
    5966:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*) "Keeper slides!");
    596a:	84 e9       	ldi	r24, 0x94	; 148
    596c:	90 e0       	ldi	r25, 0x00	; 0
    596e:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <LCD_voidWriteString>
	LCD_voidGoToPosition(1,playerY);
    5972:	90 91 58 02 	lds	r25, 0x0258
    5976:	81 e0       	ldi	r24, 0x01	; 1
    5978:	69 2f       	mov	r22, r25
    597a:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(PLAYER_RUN_3);
    597e:	82 e0       	ldi	r24, 0x02	; 2
    5980:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
	LCD_voidGoToPosition(0, playerY+1);
    5984:	80 91 58 02 	lds	r24, 0x0258
    5988:	98 2f       	mov	r25, r24
    598a:	9f 5f       	subi	r25, 0xFF	; 255
    598c:	80 e0       	ldi	r24, 0x00	; 0
    598e:	69 2f       	mov	r22, r25
    5990:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(BALL_AIR);
    5994:	85 ea       	ldi	r24, 0xA5	; 165
    5996:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
	LCD_voidGoToPosition(1,10);
    599a:	81 e0       	ldi	r24, 0x01	; 1
    599c:	6a e0       	ldi	r22, 0x0A	; 10
    599e:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(KEEPER_SLIDE);
    59a2:	85 e0       	ldi	r24, 0x05	; 5
    59a4:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
	LCD_voidGoToPosition(1,15);
    59a8:	81 e0       	ldi	r24, 0x01	; 1
    59aa:	6f e0       	ldi	r22, 0x0F	; 15
    59ac:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(GOAL_POST);
    59b0:	8a eb       	ldi	r24, 0xBA	; 186
    59b2:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
    59b6:	80 e0       	ldi	r24, 0x00	; 0
    59b8:	90 e0       	ldi	r25, 0x00	; 0
    59ba:	a6 e1       	ldi	r26, 0x16	; 22
    59bc:	b3 e4       	ldi	r27, 0x43	; 67
    59be:	89 8f       	std	Y+25, r24	; 0x19
    59c0:	9a 8f       	std	Y+26, r25	; 0x1a
    59c2:	ab 8f       	std	Y+27, r26	; 0x1b
    59c4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    59c6:	69 8d       	ldd	r22, Y+25	; 0x19
    59c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    59ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    59cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    59ce:	20 e0       	ldi	r18, 0x00	; 0
    59d0:	30 e0       	ldi	r19, 0x00	; 0
    59d2:	4a e7       	ldi	r20, 0x7A	; 122
    59d4:	55 e4       	ldi	r21, 0x45	; 69
    59d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59da:	dc 01       	movw	r26, r24
    59dc:	cb 01       	movw	r24, r22
    59de:	8d 8b       	std	Y+21, r24	; 0x15
    59e0:	9e 8b       	std	Y+22, r25	; 0x16
    59e2:	af 8b       	std	Y+23, r26	; 0x17
    59e4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    59e6:	6d 89       	ldd	r22, Y+21	; 0x15
    59e8:	7e 89       	ldd	r23, Y+22	; 0x16
    59ea:	8f 89       	ldd	r24, Y+23	; 0x17
    59ec:	98 8d       	ldd	r25, Y+24	; 0x18
    59ee:	20 e0       	ldi	r18, 0x00	; 0
    59f0:	30 e0       	ldi	r19, 0x00	; 0
    59f2:	40 e8       	ldi	r20, 0x80	; 128
    59f4:	5f e3       	ldi	r21, 0x3F	; 63
    59f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    59fa:	88 23       	and	r24, r24
    59fc:	2c f4       	brge	.+10     	; 0x5a08 <DribbleEnemy+0x484>
		__ticks = 1;
    59fe:	81 e0       	ldi	r24, 0x01	; 1
    5a00:	90 e0       	ldi	r25, 0x00	; 0
    5a02:	9c 8b       	std	Y+20, r25	; 0x14
    5a04:	8b 8b       	std	Y+19, r24	; 0x13
    5a06:	3f c0       	rjmp	.+126    	; 0x5a86 <DribbleEnemy+0x502>
	else if (__tmp > 65535)
    5a08:	6d 89       	ldd	r22, Y+21	; 0x15
    5a0a:	7e 89       	ldd	r23, Y+22	; 0x16
    5a0c:	8f 89       	ldd	r24, Y+23	; 0x17
    5a0e:	98 8d       	ldd	r25, Y+24	; 0x18
    5a10:	20 e0       	ldi	r18, 0x00	; 0
    5a12:	3f ef       	ldi	r19, 0xFF	; 255
    5a14:	4f e7       	ldi	r20, 0x7F	; 127
    5a16:	57 e4       	ldi	r21, 0x47	; 71
    5a18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5a1c:	18 16       	cp	r1, r24
    5a1e:	4c f5       	brge	.+82     	; 0x5a72 <DribbleEnemy+0x4ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a20:	69 8d       	ldd	r22, Y+25	; 0x19
    5a22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5a24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5a26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5a28:	20 e0       	ldi	r18, 0x00	; 0
    5a2a:	30 e0       	ldi	r19, 0x00	; 0
    5a2c:	40 e2       	ldi	r20, 0x20	; 32
    5a2e:	51 e4       	ldi	r21, 0x41	; 65
    5a30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a34:	dc 01       	movw	r26, r24
    5a36:	cb 01       	movw	r24, r22
    5a38:	bc 01       	movw	r22, r24
    5a3a:	cd 01       	movw	r24, r26
    5a3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a40:	dc 01       	movw	r26, r24
    5a42:	cb 01       	movw	r24, r22
    5a44:	9c 8b       	std	Y+20, r25	; 0x14
    5a46:	8b 8b       	std	Y+19, r24	; 0x13
    5a48:	0f c0       	rjmp	.+30     	; 0x5a68 <DribbleEnemy+0x4e4>
    5a4a:	80 e9       	ldi	r24, 0x90	; 144
    5a4c:	91 e0       	ldi	r25, 0x01	; 1
    5a4e:	9a 8b       	std	Y+18, r25	; 0x12
    5a50:	89 8b       	std	Y+17, r24	; 0x11
    5a52:	89 89       	ldd	r24, Y+17	; 0x11
    5a54:	9a 89       	ldd	r25, Y+18	; 0x12
    5a56:	01 97       	sbiw	r24, 0x01	; 1
    5a58:	f1 f7       	brne	.-4      	; 0x5a56 <DribbleEnemy+0x4d2>
    5a5a:	9a 8b       	std	Y+18, r25	; 0x12
    5a5c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a5e:	8b 89       	ldd	r24, Y+19	; 0x13
    5a60:	9c 89       	ldd	r25, Y+20	; 0x14
    5a62:	01 97       	sbiw	r24, 0x01	; 1
    5a64:	9c 8b       	std	Y+20, r25	; 0x14
    5a66:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a68:	8b 89       	ldd	r24, Y+19	; 0x13
    5a6a:	9c 89       	ldd	r25, Y+20	; 0x14
    5a6c:	00 97       	sbiw	r24, 0x00	; 0
    5a6e:	69 f7       	brne	.-38     	; 0x5a4a <DribbleEnemy+0x4c6>
    5a70:	14 c0       	rjmp	.+40     	; 0x5a9a <DribbleEnemy+0x516>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a72:	6d 89       	ldd	r22, Y+21	; 0x15
    5a74:	7e 89       	ldd	r23, Y+22	; 0x16
    5a76:	8f 89       	ldd	r24, Y+23	; 0x17
    5a78:	98 8d       	ldd	r25, Y+24	; 0x18
    5a7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a7e:	dc 01       	movw	r26, r24
    5a80:	cb 01       	movw	r24, r22
    5a82:	9c 8b       	std	Y+20, r25	; 0x14
    5a84:	8b 8b       	std	Y+19, r24	; 0x13
    5a86:	8b 89       	ldd	r24, Y+19	; 0x13
    5a88:	9c 89       	ldd	r25, Y+20	; 0x14
    5a8a:	98 8b       	std	Y+16, r25	; 0x10
    5a8c:	8f 87       	std	Y+15, r24	; 0x0f
    5a8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5a90:	98 89       	ldd	r25, Y+16	; 0x10
    5a92:	01 97       	sbiw	r24, 0x01	; 1
    5a94:	f1 f7       	brne	.-4      	; 0x5a92 <DribbleEnemy+0x50e>
    5a96:	98 8b       	std	Y+16, r25	; 0x10
    5a98:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(FRAME_DELAY_MS);
	LCD_voidClearPosition(1,playerY);
    5a9a:	90 91 58 02 	lds	r25, 0x0258
    5a9e:	81 e0       	ldi	r24, 0x01	; 1
    5aa0:	69 2f       	mov	r22, r25
    5aa2:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <LCD_voidClearPosition>
	playerY++;
    5aa6:	80 91 58 02 	lds	r24, 0x0258
    5aaa:	8f 5f       	subi	r24, 0xFF	; 255
    5aac:	80 93 58 02 	sts	0x0258, r24
	LCD_voidClearLine(3);
    5ab0:	83 e0       	ldi	r24, 0x03	; 3
    5ab2:	0e 94 f6 25 	call	0x4bec	; 0x4bec <LCD_voidClearLine>
	LCD_voidGoToPosition(3,5);
    5ab6:	83 e0       	ldi	r24, 0x03	; 3
    5ab8:	65 e0       	ldi	r22, 0x05	; 5
    5aba:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*) "Salah jumps!");
    5abe:	83 ea       	ldi	r24, 0xA3	; 163
    5ac0:	90 e0       	ldi	r25, 0x00	; 0
    5ac2:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <LCD_voidWriteString>
    5ac6:	9f c0       	rjmp	.+318    	; 0x5c06 <DribbleEnemy+0x682>
	while(playerY < 12){
		LCD_voidGoToPosition(0,playerY);
    5ac8:	90 91 58 02 	lds	r25, 0x0258
    5acc:	80 e0       	ldi	r24, 0x00	; 0
    5ace:	69 2f       	mov	r22, r25
    5ad0:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
		LCD_voidWriteChar(PLAYER_JUMP);
    5ad4:	83 e0       	ldi	r24, 0x03	; 3
    5ad6:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
		LCD_voidWriteChar(BALL_AIR);
    5ada:	85 ea       	ldi	r24, 0xA5	; 165
    5adc:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
		LCD_voidGoToPosition(1,10);
    5ae0:	81 e0       	ldi	r24, 0x01	; 1
    5ae2:	6a e0       	ldi	r22, 0x0A	; 10
    5ae4:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
		LCD_voidWriteChar(KEEPER_SLIDE);
    5ae8:	85 e0       	ldi	r24, 0x05	; 5
    5aea:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
		LCD_voidGoToPosition(1,15);
    5aee:	81 e0       	ldi	r24, 0x01	; 1
    5af0:	6f e0       	ldi	r22, 0x0F	; 15
    5af2:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
		LCD_voidWriteChar(GOAL_POST);
    5af6:	8a eb       	ldi	r24, 0xBA	; 186
    5af8:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
    5afc:	80 e0       	ldi	r24, 0x00	; 0
    5afe:	90 e0       	ldi	r25, 0x00	; 0
    5b00:	af ea       	ldi	r26, 0xAF	; 175
    5b02:	b3 e4       	ldi	r27, 0x43	; 67
    5b04:	8b 87       	std	Y+11, r24	; 0x0b
    5b06:	9c 87       	std	Y+12, r25	; 0x0c
    5b08:	ad 87       	std	Y+13, r26	; 0x0d
    5b0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    5b0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5b10:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b12:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b14:	20 e0       	ldi	r18, 0x00	; 0
    5b16:	30 e0       	ldi	r19, 0x00	; 0
    5b18:	4a e7       	ldi	r20, 0x7A	; 122
    5b1a:	55 e4       	ldi	r21, 0x45	; 69
    5b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b20:	dc 01       	movw	r26, r24
    5b22:	cb 01       	movw	r24, r22
    5b24:	8f 83       	std	Y+7, r24	; 0x07
    5b26:	98 87       	std	Y+8, r25	; 0x08
    5b28:	a9 87       	std	Y+9, r26	; 0x09
    5b2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5b2c:	6f 81       	ldd	r22, Y+7	; 0x07
    5b2e:	78 85       	ldd	r23, Y+8	; 0x08
    5b30:	89 85       	ldd	r24, Y+9	; 0x09
    5b32:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b34:	20 e0       	ldi	r18, 0x00	; 0
    5b36:	30 e0       	ldi	r19, 0x00	; 0
    5b38:	40 e8       	ldi	r20, 0x80	; 128
    5b3a:	5f e3       	ldi	r21, 0x3F	; 63
    5b3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5b40:	88 23       	and	r24, r24
    5b42:	2c f4       	brge	.+10     	; 0x5b4e <DribbleEnemy+0x5ca>
		__ticks = 1;
    5b44:	81 e0       	ldi	r24, 0x01	; 1
    5b46:	90 e0       	ldi	r25, 0x00	; 0
    5b48:	9e 83       	std	Y+6, r25	; 0x06
    5b4a:	8d 83       	std	Y+5, r24	; 0x05
    5b4c:	3f c0       	rjmp	.+126    	; 0x5bcc <DribbleEnemy+0x648>
	else if (__tmp > 65535)
    5b4e:	6f 81       	ldd	r22, Y+7	; 0x07
    5b50:	78 85       	ldd	r23, Y+8	; 0x08
    5b52:	89 85       	ldd	r24, Y+9	; 0x09
    5b54:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b56:	20 e0       	ldi	r18, 0x00	; 0
    5b58:	3f ef       	ldi	r19, 0xFF	; 255
    5b5a:	4f e7       	ldi	r20, 0x7F	; 127
    5b5c:	57 e4       	ldi	r21, 0x47	; 71
    5b5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5b62:	18 16       	cp	r1, r24
    5b64:	4c f5       	brge	.+82     	; 0x5bb8 <DribbleEnemy+0x634>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b66:	6b 85       	ldd	r22, Y+11	; 0x0b
    5b68:	7c 85       	ldd	r23, Y+12	; 0x0c
    5b6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b6e:	20 e0       	ldi	r18, 0x00	; 0
    5b70:	30 e0       	ldi	r19, 0x00	; 0
    5b72:	40 e2       	ldi	r20, 0x20	; 32
    5b74:	51 e4       	ldi	r21, 0x41	; 65
    5b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b7a:	dc 01       	movw	r26, r24
    5b7c:	cb 01       	movw	r24, r22
    5b7e:	bc 01       	movw	r22, r24
    5b80:	cd 01       	movw	r24, r26
    5b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b86:	dc 01       	movw	r26, r24
    5b88:	cb 01       	movw	r24, r22
    5b8a:	9e 83       	std	Y+6, r25	; 0x06
    5b8c:	8d 83       	std	Y+5, r24	; 0x05
    5b8e:	0f c0       	rjmp	.+30     	; 0x5bae <DribbleEnemy+0x62a>
    5b90:	80 e9       	ldi	r24, 0x90	; 144
    5b92:	91 e0       	ldi	r25, 0x01	; 1
    5b94:	9c 83       	std	Y+4, r25	; 0x04
    5b96:	8b 83       	std	Y+3, r24	; 0x03
    5b98:	8b 81       	ldd	r24, Y+3	; 0x03
    5b9a:	9c 81       	ldd	r25, Y+4	; 0x04
    5b9c:	01 97       	sbiw	r24, 0x01	; 1
    5b9e:	f1 f7       	brne	.-4      	; 0x5b9c <DribbleEnemy+0x618>
    5ba0:	9c 83       	std	Y+4, r25	; 0x04
    5ba2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ba4:	8d 81       	ldd	r24, Y+5	; 0x05
    5ba6:	9e 81       	ldd	r25, Y+6	; 0x06
    5ba8:	01 97       	sbiw	r24, 0x01	; 1
    5baa:	9e 83       	std	Y+6, r25	; 0x06
    5bac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5bae:	8d 81       	ldd	r24, Y+5	; 0x05
    5bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    5bb2:	00 97       	sbiw	r24, 0x00	; 0
    5bb4:	69 f7       	brne	.-38     	; 0x5b90 <DribbleEnemy+0x60c>
    5bb6:	14 c0       	rjmp	.+40     	; 0x5be0 <DribbleEnemy+0x65c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5bb8:	6f 81       	ldd	r22, Y+7	; 0x07
    5bba:	78 85       	ldd	r23, Y+8	; 0x08
    5bbc:	89 85       	ldd	r24, Y+9	; 0x09
    5bbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    5bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bc4:	dc 01       	movw	r26, r24
    5bc6:	cb 01       	movw	r24, r22
    5bc8:	9e 83       	std	Y+6, r25	; 0x06
    5bca:	8d 83       	std	Y+5, r24	; 0x05
    5bcc:	8d 81       	ldd	r24, Y+5	; 0x05
    5bce:	9e 81       	ldd	r25, Y+6	; 0x06
    5bd0:	9a 83       	std	Y+2, r25	; 0x02
    5bd2:	89 83       	std	Y+1, r24	; 0x01
    5bd4:	89 81       	ldd	r24, Y+1	; 0x01
    5bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    5bd8:	01 97       	sbiw	r24, 0x01	; 1
    5bda:	f1 f7       	brne	.-4      	; 0x5bd8 <DribbleEnemy+0x654>
    5bdc:	9a 83       	std	Y+2, r25	; 0x02
    5bde:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(FRAME_DELAY_MS+200);
		LCD_voidClearPosition(0,playerY);
    5be0:	90 91 58 02 	lds	r25, 0x0258
    5be4:	80 e0       	ldi	r24, 0x00	; 0
    5be6:	69 2f       	mov	r22, r25
    5be8:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <LCD_voidClearPosition>
		LCD_voidClearPosition(0,playerY+1);
    5bec:	80 91 58 02 	lds	r24, 0x0258
    5bf0:	98 2f       	mov	r25, r24
    5bf2:	9f 5f       	subi	r25, 0xFF	; 255
    5bf4:	80 e0       	ldi	r24, 0x00	; 0
    5bf6:	69 2f       	mov	r22, r25
    5bf8:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <LCD_voidClearPosition>

		playerY++;
    5bfc:	80 91 58 02 	lds	r24, 0x0258
    5c00:	8f 5f       	subi	r24, 0xFF	; 255
    5c02:	80 93 58 02 	sts	0x0258, r24
	LCD_voidClearPosition(1,playerY);
	playerY++;
	LCD_voidClearLine(3);
	LCD_voidGoToPosition(3,5);
	LCD_voidWriteString((u8*) "Salah jumps!");
	while(playerY < 12){
    5c06:	80 91 58 02 	lds	r24, 0x0258
    5c0a:	8c 30       	cpi	r24, 0x0C	; 12
    5c0c:	08 f4       	brcc	.+2      	; 0x5c10 <DribbleEnemy+0x68c>
    5c0e:	5c cf       	rjmp	.-328    	; 0x5ac8 <DribbleEnemy+0x544>
		LCD_voidClearPosition(0,playerY);
		LCD_voidClearPosition(0,playerY+1);

		playerY++;
	}
}
    5c10:	ca 5b       	subi	r28, 0xBA	; 186
    5c12:	df 4f       	sbci	r29, 0xFF	; 255
    5c14:	0f b6       	in	r0, 0x3f	; 63
    5c16:	f8 94       	cli
    5c18:	de bf       	out	0x3e, r29	; 62
    5c1a:	0f be       	out	0x3f, r0	; 63
    5c1c:	cd bf       	out	0x3d, r28	; 61
    5c1e:	cf 91       	pop	r28
    5c20:	df 91       	pop	r29
    5c22:	1f 91       	pop	r17
    5c24:	0f 91       	pop	r16
    5c26:	08 95       	ret

00005c28 <PlayerShoots>:

void PlayerShoots(){
    5c28:	0f 93       	push	r16
    5c2a:	1f 93       	push	r17
    5c2c:	df 93       	push	r29
    5c2e:	cf 93       	push	r28
    5c30:	cd b7       	in	r28, 0x3d	; 61
    5c32:	de b7       	in	r29, 0x3e	; 62
    5c34:	c4 55       	subi	r28, 0x54	; 84
    5c36:	d0 40       	sbci	r29, 0x00	; 0
    5c38:	0f b6       	in	r0, 0x3f	; 63
    5c3a:	f8 94       	cli
    5c3c:	de bf       	out	0x3e, r29	; 62
    5c3e:	0f be       	out	0x3f, r0	; 63
    5c40:	cd bf       	out	0x3d, r28	; 61
	LCD_voidClearLine(3);
    5c42:	83 e0       	ldi	r24, 0x03	; 3
    5c44:	0e 94 f6 25 	call	0x4bec	; 0x4bec <LCD_voidClearLine>
	LCD_voidGoToPosition(3,5);
    5c48:	83 e0       	ldi	r24, 0x03	; 3
    5c4a:	65 e0       	ldi	r22, 0x05	; 5
    5c4c:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*) "Open goal");
    5c50:	80 eb       	ldi	r24, 0xB0	; 176
    5c52:	90 e0       	ldi	r25, 0x00	; 0
    5c54:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <LCD_voidWriteString>
	LCD_voidGoToPosition(1,playerY);
    5c58:	90 91 58 02 	lds	r25, 0x0258
    5c5c:	81 e0       	ldi	r24, 0x01	; 1
    5c5e:	69 2f       	mov	r22, r25
    5c60:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(PLAYER_RUN_1);
    5c64:	80 e0       	ldi	r24, 0x00	; 0
    5c66:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
	LCD_voidWriteChar(BALL_GROUND);
    5c6a:	8e e2       	ldi	r24, 0x2E	; 46
    5c6c:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
	LCD_voidGoToPosition(1,10);
    5c70:	81 e0       	ldi	r24, 0x01	; 1
    5c72:	6a e0       	ldi	r22, 0x0A	; 10
    5c74:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(GOALKEEPER);
    5c78:	84 e0       	ldi	r24, 0x04	; 4
    5c7a:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
	LCD_voidGoToPosition(1,15);
    5c7e:	81 e0       	ldi	r24, 0x01	; 1
    5c80:	6f e0       	ldi	r22, 0x0F	; 15
    5c82:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(GOAL_POST);
    5c86:	8a eb       	ldi	r24, 0xBA	; 186
    5c88:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
    5c8c:	fe 01       	movw	r30, r28
    5c8e:	ef 5a       	subi	r30, 0xAF	; 175
    5c90:	ff 4f       	sbci	r31, 0xFF	; 255
    5c92:	80 e0       	ldi	r24, 0x00	; 0
    5c94:	90 e0       	ldi	r25, 0x00	; 0
    5c96:	a6 e1       	ldi	r26, 0x16	; 22
    5c98:	b3 e4       	ldi	r27, 0x43	; 67
    5c9a:	80 83       	st	Z, r24
    5c9c:	91 83       	std	Z+1, r25	; 0x01
    5c9e:	a2 83       	std	Z+2, r26	; 0x02
    5ca0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ca2:	8e 01       	movw	r16, r28
    5ca4:	03 5b       	subi	r16, 0xB3	; 179
    5ca6:	1f 4f       	sbci	r17, 0xFF	; 255
    5ca8:	fe 01       	movw	r30, r28
    5caa:	ef 5a       	subi	r30, 0xAF	; 175
    5cac:	ff 4f       	sbci	r31, 0xFF	; 255
    5cae:	60 81       	ld	r22, Z
    5cb0:	71 81       	ldd	r23, Z+1	; 0x01
    5cb2:	82 81       	ldd	r24, Z+2	; 0x02
    5cb4:	93 81       	ldd	r25, Z+3	; 0x03
    5cb6:	20 e0       	ldi	r18, 0x00	; 0
    5cb8:	30 e0       	ldi	r19, 0x00	; 0
    5cba:	4a e7       	ldi	r20, 0x7A	; 122
    5cbc:	55 e4       	ldi	r21, 0x45	; 69
    5cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5cc2:	dc 01       	movw	r26, r24
    5cc4:	cb 01       	movw	r24, r22
    5cc6:	f8 01       	movw	r30, r16
    5cc8:	80 83       	st	Z, r24
    5cca:	91 83       	std	Z+1, r25	; 0x01
    5ccc:	a2 83       	std	Z+2, r26	; 0x02
    5cce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5cd0:	fe 01       	movw	r30, r28
    5cd2:	e3 5b       	subi	r30, 0xB3	; 179
    5cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    5cd6:	60 81       	ld	r22, Z
    5cd8:	71 81       	ldd	r23, Z+1	; 0x01
    5cda:	82 81       	ldd	r24, Z+2	; 0x02
    5cdc:	93 81       	ldd	r25, Z+3	; 0x03
    5cde:	20 e0       	ldi	r18, 0x00	; 0
    5ce0:	30 e0       	ldi	r19, 0x00	; 0
    5ce2:	40 e8       	ldi	r20, 0x80	; 128
    5ce4:	5f e3       	ldi	r21, 0x3F	; 63
    5ce6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5cea:	88 23       	and	r24, r24
    5cec:	44 f4       	brge	.+16     	; 0x5cfe <PlayerShoots+0xd6>
		__ticks = 1;
    5cee:	fe 01       	movw	r30, r28
    5cf0:	e5 5b       	subi	r30, 0xB5	; 181
    5cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    5cf4:	81 e0       	ldi	r24, 0x01	; 1
    5cf6:	90 e0       	ldi	r25, 0x00	; 0
    5cf8:	91 83       	std	Z+1, r25	; 0x01
    5cfa:	80 83       	st	Z, r24
    5cfc:	64 c0       	rjmp	.+200    	; 0x5dc6 <PlayerShoots+0x19e>
	else if (__tmp > 65535)
    5cfe:	fe 01       	movw	r30, r28
    5d00:	e3 5b       	subi	r30, 0xB3	; 179
    5d02:	ff 4f       	sbci	r31, 0xFF	; 255
    5d04:	60 81       	ld	r22, Z
    5d06:	71 81       	ldd	r23, Z+1	; 0x01
    5d08:	82 81       	ldd	r24, Z+2	; 0x02
    5d0a:	93 81       	ldd	r25, Z+3	; 0x03
    5d0c:	20 e0       	ldi	r18, 0x00	; 0
    5d0e:	3f ef       	ldi	r19, 0xFF	; 255
    5d10:	4f e7       	ldi	r20, 0x7F	; 127
    5d12:	57 e4       	ldi	r21, 0x47	; 71
    5d14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5d18:	18 16       	cp	r1, r24
    5d1a:	0c f0       	brlt	.+2      	; 0x5d1e <PlayerShoots+0xf6>
    5d1c:	43 c0       	rjmp	.+134    	; 0x5da4 <PlayerShoots+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d1e:	fe 01       	movw	r30, r28
    5d20:	ef 5a       	subi	r30, 0xAF	; 175
    5d22:	ff 4f       	sbci	r31, 0xFF	; 255
    5d24:	60 81       	ld	r22, Z
    5d26:	71 81       	ldd	r23, Z+1	; 0x01
    5d28:	82 81       	ldd	r24, Z+2	; 0x02
    5d2a:	93 81       	ldd	r25, Z+3	; 0x03
    5d2c:	20 e0       	ldi	r18, 0x00	; 0
    5d2e:	30 e0       	ldi	r19, 0x00	; 0
    5d30:	40 e2       	ldi	r20, 0x20	; 32
    5d32:	51 e4       	ldi	r21, 0x41	; 65
    5d34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d38:	dc 01       	movw	r26, r24
    5d3a:	cb 01       	movw	r24, r22
    5d3c:	8e 01       	movw	r16, r28
    5d3e:	05 5b       	subi	r16, 0xB5	; 181
    5d40:	1f 4f       	sbci	r17, 0xFF	; 255
    5d42:	bc 01       	movw	r22, r24
    5d44:	cd 01       	movw	r24, r26
    5d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d4a:	dc 01       	movw	r26, r24
    5d4c:	cb 01       	movw	r24, r22
    5d4e:	f8 01       	movw	r30, r16
    5d50:	91 83       	std	Z+1, r25	; 0x01
    5d52:	80 83       	st	Z, r24
    5d54:	1f c0       	rjmp	.+62     	; 0x5d94 <PlayerShoots+0x16c>
    5d56:	fe 01       	movw	r30, r28
    5d58:	e7 5b       	subi	r30, 0xB7	; 183
    5d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    5d5c:	80 e9       	ldi	r24, 0x90	; 144
    5d5e:	91 e0       	ldi	r25, 0x01	; 1
    5d60:	91 83       	std	Z+1, r25	; 0x01
    5d62:	80 83       	st	Z, r24
    5d64:	fe 01       	movw	r30, r28
    5d66:	e7 5b       	subi	r30, 0xB7	; 183
    5d68:	ff 4f       	sbci	r31, 0xFF	; 255
    5d6a:	80 81       	ld	r24, Z
    5d6c:	91 81       	ldd	r25, Z+1	; 0x01
    5d6e:	01 97       	sbiw	r24, 0x01	; 1
    5d70:	f1 f7       	brne	.-4      	; 0x5d6e <PlayerShoots+0x146>
    5d72:	fe 01       	movw	r30, r28
    5d74:	e7 5b       	subi	r30, 0xB7	; 183
    5d76:	ff 4f       	sbci	r31, 0xFF	; 255
    5d78:	91 83       	std	Z+1, r25	; 0x01
    5d7a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d7c:	de 01       	movw	r26, r28
    5d7e:	a5 5b       	subi	r26, 0xB5	; 181
    5d80:	bf 4f       	sbci	r27, 0xFF	; 255
    5d82:	fe 01       	movw	r30, r28
    5d84:	e5 5b       	subi	r30, 0xB5	; 181
    5d86:	ff 4f       	sbci	r31, 0xFF	; 255
    5d88:	80 81       	ld	r24, Z
    5d8a:	91 81       	ldd	r25, Z+1	; 0x01
    5d8c:	01 97       	sbiw	r24, 0x01	; 1
    5d8e:	11 96       	adiw	r26, 0x01	; 1
    5d90:	9c 93       	st	X, r25
    5d92:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d94:	fe 01       	movw	r30, r28
    5d96:	e5 5b       	subi	r30, 0xB5	; 181
    5d98:	ff 4f       	sbci	r31, 0xFF	; 255
    5d9a:	80 81       	ld	r24, Z
    5d9c:	91 81       	ldd	r25, Z+1	; 0x01
    5d9e:	00 97       	sbiw	r24, 0x00	; 0
    5da0:	d1 f6       	brne	.-76     	; 0x5d56 <PlayerShoots+0x12e>
    5da2:	27 c0       	rjmp	.+78     	; 0x5df2 <PlayerShoots+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5da4:	8e 01       	movw	r16, r28
    5da6:	05 5b       	subi	r16, 0xB5	; 181
    5da8:	1f 4f       	sbci	r17, 0xFF	; 255
    5daa:	fe 01       	movw	r30, r28
    5dac:	e3 5b       	subi	r30, 0xB3	; 179
    5dae:	ff 4f       	sbci	r31, 0xFF	; 255
    5db0:	60 81       	ld	r22, Z
    5db2:	71 81       	ldd	r23, Z+1	; 0x01
    5db4:	82 81       	ldd	r24, Z+2	; 0x02
    5db6:	93 81       	ldd	r25, Z+3	; 0x03
    5db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5dbc:	dc 01       	movw	r26, r24
    5dbe:	cb 01       	movw	r24, r22
    5dc0:	f8 01       	movw	r30, r16
    5dc2:	91 83       	std	Z+1, r25	; 0x01
    5dc4:	80 83       	st	Z, r24
    5dc6:	de 01       	movw	r26, r28
    5dc8:	a9 5b       	subi	r26, 0xB9	; 185
    5dca:	bf 4f       	sbci	r27, 0xFF	; 255
    5dcc:	fe 01       	movw	r30, r28
    5dce:	e5 5b       	subi	r30, 0xB5	; 181
    5dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    5dd2:	80 81       	ld	r24, Z
    5dd4:	91 81       	ldd	r25, Z+1	; 0x01
    5dd6:	8d 93       	st	X+, r24
    5dd8:	9c 93       	st	X, r25
    5dda:	fe 01       	movw	r30, r28
    5ddc:	e9 5b       	subi	r30, 0xB9	; 185
    5dde:	ff 4f       	sbci	r31, 0xFF	; 255
    5de0:	80 81       	ld	r24, Z
    5de2:	91 81       	ldd	r25, Z+1	; 0x01
    5de4:	01 97       	sbiw	r24, 0x01	; 1
    5de6:	f1 f7       	brne	.-4      	; 0x5de4 <PlayerShoots+0x1bc>
    5de8:	fe 01       	movw	r30, r28
    5dea:	e9 5b       	subi	r30, 0xB9	; 185
    5dec:	ff 4f       	sbci	r31, 0xFF	; 255
    5dee:	91 83       	std	Z+1, r25	; 0x01
    5df0:	80 83       	st	Z, r24
	_delay_ms(FRAME_DELAY_MS);
	LCD_voidClearPosition(1,playerY);
    5df2:	90 91 58 02 	lds	r25, 0x0258
    5df6:	81 e0       	ldi	r24, 0x01	; 1
    5df8:	69 2f       	mov	r22, r25
    5dfa:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <LCD_voidClearPosition>
	LCD_voidGoToPosition(1,playerY);
    5dfe:	90 91 58 02 	lds	r25, 0x0258
    5e02:	81 e0       	ldi	r24, 0x01	; 1
    5e04:	69 2f       	mov	r22, r25
    5e06:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(PLAYER_RUN_2);
    5e0a:	81 e0       	ldi	r24, 0x01	; 1
    5e0c:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
	LCD_voidWriteChar(BALL_AIR);
    5e10:	85 ea       	ldi	r24, 0xA5	; 165
    5e12:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
	LCD_voidGoToPosition(1,10);
    5e16:	81 e0       	ldi	r24, 0x01	; 1
    5e18:	6a e0       	ldi	r22, 0x0A	; 10
    5e1a:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(GOALKEEPER);
    5e1e:	84 e0       	ldi	r24, 0x04	; 4
    5e20:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
	LCD_voidGoToPosition(1,15);
    5e24:	81 e0       	ldi	r24, 0x01	; 1
    5e26:	6f e0       	ldi	r22, 0x0F	; 15
    5e28:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(GOAL_POST);
    5e2c:	8a eb       	ldi	r24, 0xBA	; 186
    5e2e:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
    5e32:	fe 01       	movw	r30, r28
    5e34:	ed 5b       	subi	r30, 0xBD	; 189
    5e36:	ff 4f       	sbci	r31, 0xFF	; 255
    5e38:	80 e0       	ldi	r24, 0x00	; 0
    5e3a:	90 e0       	ldi	r25, 0x00	; 0
    5e3c:	a6 e1       	ldi	r26, 0x16	; 22
    5e3e:	b3 e4       	ldi	r27, 0x43	; 67
    5e40:	80 83       	st	Z, r24
    5e42:	91 83       	std	Z+1, r25	; 0x01
    5e44:	a2 83       	std	Z+2, r26	; 0x02
    5e46:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e48:	8e 01       	movw	r16, r28
    5e4a:	01 5c       	subi	r16, 0xC1	; 193
    5e4c:	1f 4f       	sbci	r17, 0xFF	; 255
    5e4e:	fe 01       	movw	r30, r28
    5e50:	ed 5b       	subi	r30, 0xBD	; 189
    5e52:	ff 4f       	sbci	r31, 0xFF	; 255
    5e54:	60 81       	ld	r22, Z
    5e56:	71 81       	ldd	r23, Z+1	; 0x01
    5e58:	82 81       	ldd	r24, Z+2	; 0x02
    5e5a:	93 81       	ldd	r25, Z+3	; 0x03
    5e5c:	20 e0       	ldi	r18, 0x00	; 0
    5e5e:	30 e0       	ldi	r19, 0x00	; 0
    5e60:	4a e7       	ldi	r20, 0x7A	; 122
    5e62:	55 e4       	ldi	r21, 0x45	; 69
    5e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e68:	dc 01       	movw	r26, r24
    5e6a:	cb 01       	movw	r24, r22
    5e6c:	f8 01       	movw	r30, r16
    5e6e:	80 83       	st	Z, r24
    5e70:	91 83       	std	Z+1, r25	; 0x01
    5e72:	a2 83       	std	Z+2, r26	; 0x02
    5e74:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5e76:	fe 01       	movw	r30, r28
    5e78:	ff 96       	adiw	r30, 0x3f	; 63
    5e7a:	60 81       	ld	r22, Z
    5e7c:	71 81       	ldd	r23, Z+1	; 0x01
    5e7e:	82 81       	ldd	r24, Z+2	; 0x02
    5e80:	93 81       	ldd	r25, Z+3	; 0x03
    5e82:	20 e0       	ldi	r18, 0x00	; 0
    5e84:	30 e0       	ldi	r19, 0x00	; 0
    5e86:	40 e8       	ldi	r20, 0x80	; 128
    5e88:	5f e3       	ldi	r21, 0x3F	; 63
    5e8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5e8e:	88 23       	and	r24, r24
    5e90:	2c f4       	brge	.+10     	; 0x5e9c <PlayerShoots+0x274>
		__ticks = 1;
    5e92:	81 e0       	ldi	r24, 0x01	; 1
    5e94:	90 e0       	ldi	r25, 0x00	; 0
    5e96:	9e af       	std	Y+62, r25	; 0x3e
    5e98:	8d af       	std	Y+61, r24	; 0x3d
    5e9a:	46 c0       	rjmp	.+140    	; 0x5f28 <PlayerShoots+0x300>
	else if (__tmp > 65535)
    5e9c:	fe 01       	movw	r30, r28
    5e9e:	ff 96       	adiw	r30, 0x3f	; 63
    5ea0:	60 81       	ld	r22, Z
    5ea2:	71 81       	ldd	r23, Z+1	; 0x01
    5ea4:	82 81       	ldd	r24, Z+2	; 0x02
    5ea6:	93 81       	ldd	r25, Z+3	; 0x03
    5ea8:	20 e0       	ldi	r18, 0x00	; 0
    5eaa:	3f ef       	ldi	r19, 0xFF	; 255
    5eac:	4f e7       	ldi	r20, 0x7F	; 127
    5eae:	57 e4       	ldi	r21, 0x47	; 71
    5eb0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5eb4:	18 16       	cp	r1, r24
    5eb6:	64 f5       	brge	.+88     	; 0x5f10 <PlayerShoots+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5eb8:	fe 01       	movw	r30, r28
    5eba:	ed 5b       	subi	r30, 0xBD	; 189
    5ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    5ebe:	60 81       	ld	r22, Z
    5ec0:	71 81       	ldd	r23, Z+1	; 0x01
    5ec2:	82 81       	ldd	r24, Z+2	; 0x02
    5ec4:	93 81       	ldd	r25, Z+3	; 0x03
    5ec6:	20 e0       	ldi	r18, 0x00	; 0
    5ec8:	30 e0       	ldi	r19, 0x00	; 0
    5eca:	40 e2       	ldi	r20, 0x20	; 32
    5ecc:	51 e4       	ldi	r21, 0x41	; 65
    5ece:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ed2:	dc 01       	movw	r26, r24
    5ed4:	cb 01       	movw	r24, r22
    5ed6:	bc 01       	movw	r22, r24
    5ed8:	cd 01       	movw	r24, r26
    5eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ede:	dc 01       	movw	r26, r24
    5ee0:	cb 01       	movw	r24, r22
    5ee2:	9e af       	std	Y+62, r25	; 0x3e
    5ee4:	8d af       	std	Y+61, r24	; 0x3d
    5ee6:	0f c0       	rjmp	.+30     	; 0x5f06 <PlayerShoots+0x2de>
    5ee8:	80 e9       	ldi	r24, 0x90	; 144
    5eea:	91 e0       	ldi	r25, 0x01	; 1
    5eec:	9c af       	std	Y+60, r25	; 0x3c
    5eee:	8b af       	std	Y+59, r24	; 0x3b
    5ef0:	8b ad       	ldd	r24, Y+59	; 0x3b
    5ef2:	9c ad       	ldd	r25, Y+60	; 0x3c
    5ef4:	01 97       	sbiw	r24, 0x01	; 1
    5ef6:	f1 f7       	brne	.-4      	; 0x5ef4 <PlayerShoots+0x2cc>
    5ef8:	9c af       	std	Y+60, r25	; 0x3c
    5efa:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5efc:	8d ad       	ldd	r24, Y+61	; 0x3d
    5efe:	9e ad       	ldd	r25, Y+62	; 0x3e
    5f00:	01 97       	sbiw	r24, 0x01	; 1
    5f02:	9e af       	std	Y+62, r25	; 0x3e
    5f04:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f06:	8d ad       	ldd	r24, Y+61	; 0x3d
    5f08:	9e ad       	ldd	r25, Y+62	; 0x3e
    5f0a:	00 97       	sbiw	r24, 0x00	; 0
    5f0c:	69 f7       	brne	.-38     	; 0x5ee8 <PlayerShoots+0x2c0>
    5f0e:	16 c0       	rjmp	.+44     	; 0x5f3c <PlayerShoots+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f10:	fe 01       	movw	r30, r28
    5f12:	ff 96       	adiw	r30, 0x3f	; 63
    5f14:	60 81       	ld	r22, Z
    5f16:	71 81       	ldd	r23, Z+1	; 0x01
    5f18:	82 81       	ldd	r24, Z+2	; 0x02
    5f1a:	93 81       	ldd	r25, Z+3	; 0x03
    5f1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f20:	dc 01       	movw	r26, r24
    5f22:	cb 01       	movw	r24, r22
    5f24:	9e af       	std	Y+62, r25	; 0x3e
    5f26:	8d af       	std	Y+61, r24	; 0x3d
    5f28:	8d ad       	ldd	r24, Y+61	; 0x3d
    5f2a:	9e ad       	ldd	r25, Y+62	; 0x3e
    5f2c:	9a af       	std	Y+58, r25	; 0x3a
    5f2e:	89 af       	std	Y+57, r24	; 0x39
    5f30:	89 ad       	ldd	r24, Y+57	; 0x39
    5f32:	9a ad       	ldd	r25, Y+58	; 0x3a
    5f34:	01 97       	sbiw	r24, 0x01	; 1
    5f36:	f1 f7       	brne	.-4      	; 0x5f34 <PlayerShoots+0x30c>
    5f38:	9a af       	std	Y+58, r25	; 0x3a
    5f3a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(FRAME_DELAY_MS);
	LCD_voidClearPosition(1,playerY);
    5f3c:	90 91 58 02 	lds	r25, 0x0258
    5f40:	81 e0       	ldi	r24, 0x01	; 1
    5f42:	69 2f       	mov	r22, r25
    5f44:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <LCD_voidClearPosition>
	LCD_voidGoToPosition(1,playerY);
    5f48:	90 91 58 02 	lds	r25, 0x0258
    5f4c:	81 e0       	ldi	r24, 0x01	; 1
    5f4e:	69 2f       	mov	r22, r25
    5f50:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(PLAYER_RUN_3);
    5f54:	82 e0       	ldi	r24, 0x02	; 2
    5f56:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
	LCD_voidWriteChar(BALL_GROUND);
    5f5a:	8e e2       	ldi	r24, 0x2E	; 46
    5f5c:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
	LCD_voidGoToPosition(1,10);
    5f60:	81 e0       	ldi	r24, 0x01	; 1
    5f62:	6a e0       	ldi	r22, 0x0A	; 10
    5f64:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(GOALKEEPER);
    5f68:	84 e0       	ldi	r24, 0x04	; 4
    5f6a:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
	LCD_voidGoToPosition(1,15);
    5f6e:	81 e0       	ldi	r24, 0x01	; 1
    5f70:	6f e0       	ldi	r22, 0x0F	; 15
    5f72:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(GOAL_POST);
    5f76:	8a eb       	ldi	r24, 0xBA	; 186
    5f78:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
    5f7c:	80 e0       	ldi	r24, 0x00	; 0
    5f7e:	90 e0       	ldi	r25, 0x00	; 0
    5f80:	a6 e1       	ldi	r26, 0x16	; 22
    5f82:	b3 e4       	ldi	r27, 0x43	; 67
    5f84:	8d ab       	std	Y+53, r24	; 0x35
    5f86:	9e ab       	std	Y+54, r25	; 0x36
    5f88:	af ab       	std	Y+55, r26	; 0x37
    5f8a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5f8c:	6d a9       	ldd	r22, Y+53	; 0x35
    5f8e:	7e a9       	ldd	r23, Y+54	; 0x36
    5f90:	8f a9       	ldd	r24, Y+55	; 0x37
    5f92:	98 ad       	ldd	r25, Y+56	; 0x38
    5f94:	20 e0       	ldi	r18, 0x00	; 0
    5f96:	30 e0       	ldi	r19, 0x00	; 0
    5f98:	4a e7       	ldi	r20, 0x7A	; 122
    5f9a:	55 e4       	ldi	r21, 0x45	; 69
    5f9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5fa0:	dc 01       	movw	r26, r24
    5fa2:	cb 01       	movw	r24, r22
    5fa4:	89 ab       	std	Y+49, r24	; 0x31
    5fa6:	9a ab       	std	Y+50, r25	; 0x32
    5fa8:	ab ab       	std	Y+51, r26	; 0x33
    5faa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5fac:	69 a9       	ldd	r22, Y+49	; 0x31
    5fae:	7a a9       	ldd	r23, Y+50	; 0x32
    5fb0:	8b a9       	ldd	r24, Y+51	; 0x33
    5fb2:	9c a9       	ldd	r25, Y+52	; 0x34
    5fb4:	20 e0       	ldi	r18, 0x00	; 0
    5fb6:	30 e0       	ldi	r19, 0x00	; 0
    5fb8:	40 e8       	ldi	r20, 0x80	; 128
    5fba:	5f e3       	ldi	r21, 0x3F	; 63
    5fbc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5fc0:	88 23       	and	r24, r24
    5fc2:	2c f4       	brge	.+10     	; 0x5fce <PlayerShoots+0x3a6>
		__ticks = 1;
    5fc4:	81 e0       	ldi	r24, 0x01	; 1
    5fc6:	90 e0       	ldi	r25, 0x00	; 0
    5fc8:	98 ab       	std	Y+48, r25	; 0x30
    5fca:	8f a7       	std	Y+47, r24	; 0x2f
    5fcc:	3f c0       	rjmp	.+126    	; 0x604c <PlayerShoots+0x424>
	else if (__tmp > 65535)
    5fce:	69 a9       	ldd	r22, Y+49	; 0x31
    5fd0:	7a a9       	ldd	r23, Y+50	; 0x32
    5fd2:	8b a9       	ldd	r24, Y+51	; 0x33
    5fd4:	9c a9       	ldd	r25, Y+52	; 0x34
    5fd6:	20 e0       	ldi	r18, 0x00	; 0
    5fd8:	3f ef       	ldi	r19, 0xFF	; 255
    5fda:	4f e7       	ldi	r20, 0x7F	; 127
    5fdc:	57 e4       	ldi	r21, 0x47	; 71
    5fde:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5fe2:	18 16       	cp	r1, r24
    5fe4:	4c f5       	brge	.+82     	; 0x6038 <PlayerShoots+0x410>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5fe6:	6d a9       	ldd	r22, Y+53	; 0x35
    5fe8:	7e a9       	ldd	r23, Y+54	; 0x36
    5fea:	8f a9       	ldd	r24, Y+55	; 0x37
    5fec:	98 ad       	ldd	r25, Y+56	; 0x38
    5fee:	20 e0       	ldi	r18, 0x00	; 0
    5ff0:	30 e0       	ldi	r19, 0x00	; 0
    5ff2:	40 e2       	ldi	r20, 0x20	; 32
    5ff4:	51 e4       	ldi	r21, 0x41	; 65
    5ff6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ffa:	dc 01       	movw	r26, r24
    5ffc:	cb 01       	movw	r24, r22
    5ffe:	bc 01       	movw	r22, r24
    6000:	cd 01       	movw	r24, r26
    6002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6006:	dc 01       	movw	r26, r24
    6008:	cb 01       	movw	r24, r22
    600a:	98 ab       	std	Y+48, r25	; 0x30
    600c:	8f a7       	std	Y+47, r24	; 0x2f
    600e:	0f c0       	rjmp	.+30     	; 0x602e <PlayerShoots+0x406>
    6010:	80 e9       	ldi	r24, 0x90	; 144
    6012:	91 e0       	ldi	r25, 0x01	; 1
    6014:	9e a7       	std	Y+46, r25	; 0x2e
    6016:	8d a7       	std	Y+45, r24	; 0x2d
    6018:	8d a5       	ldd	r24, Y+45	; 0x2d
    601a:	9e a5       	ldd	r25, Y+46	; 0x2e
    601c:	01 97       	sbiw	r24, 0x01	; 1
    601e:	f1 f7       	brne	.-4      	; 0x601c <PlayerShoots+0x3f4>
    6020:	9e a7       	std	Y+46, r25	; 0x2e
    6022:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6024:	8f a5       	ldd	r24, Y+47	; 0x2f
    6026:	98 a9       	ldd	r25, Y+48	; 0x30
    6028:	01 97       	sbiw	r24, 0x01	; 1
    602a:	98 ab       	std	Y+48, r25	; 0x30
    602c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    602e:	8f a5       	ldd	r24, Y+47	; 0x2f
    6030:	98 a9       	ldd	r25, Y+48	; 0x30
    6032:	00 97       	sbiw	r24, 0x00	; 0
    6034:	69 f7       	brne	.-38     	; 0x6010 <PlayerShoots+0x3e8>
    6036:	14 c0       	rjmp	.+40     	; 0x6060 <PlayerShoots+0x438>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6038:	69 a9       	ldd	r22, Y+49	; 0x31
    603a:	7a a9       	ldd	r23, Y+50	; 0x32
    603c:	8b a9       	ldd	r24, Y+51	; 0x33
    603e:	9c a9       	ldd	r25, Y+52	; 0x34
    6040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6044:	dc 01       	movw	r26, r24
    6046:	cb 01       	movw	r24, r22
    6048:	98 ab       	std	Y+48, r25	; 0x30
    604a:	8f a7       	std	Y+47, r24	; 0x2f
    604c:	8f a5       	ldd	r24, Y+47	; 0x2f
    604e:	98 a9       	ldd	r25, Y+48	; 0x30
    6050:	9c a7       	std	Y+44, r25	; 0x2c
    6052:	8b a7       	std	Y+43, r24	; 0x2b
    6054:	8b a5       	ldd	r24, Y+43	; 0x2b
    6056:	9c a5       	ldd	r25, Y+44	; 0x2c
    6058:	01 97       	sbiw	r24, 0x01	; 1
    605a:	f1 f7       	brne	.-4      	; 0x6058 <PlayerShoots+0x430>
    605c:	9c a7       	std	Y+44, r25	; 0x2c
    605e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(FRAME_DELAY_MS);
	LCD_voidClearPosition(1,playerY);
    6060:	90 91 58 02 	lds	r25, 0x0258
    6064:	81 e0       	ldi	r24, 0x01	; 1
    6066:	69 2f       	mov	r22, r25
    6068:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <LCD_voidClearPosition>
	playerY++;
    606c:	80 91 58 02 	lds	r24, 0x0258
    6070:	8f 5f       	subi	r24, 0xFF	; 255
    6072:	80 93 58 02 	sts	0x0258, r24
	LCD_voidClearLine(3);
    6076:	83 e0       	ldi	r24, 0x03	; 3
    6078:	0e 94 f6 25 	call	0x4bec	; 0x4bec <LCD_voidClearLine>
	LCD_voidGoToPosition(3,5);
    607c:	83 e0       	ldi	r24, 0x03	; 3
    607e:	65 e0       	ldi	r22, 0x05	; 5
    6080:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*) "Salah shoots!");
    6084:	8a eb       	ldi	r24, 0xBA	; 186
    6086:	90 e0       	ldi	r25, 0x00	; 0
    6088:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <LCD_voidWriteString>
	LCD_voidGoToPosition(1,playerY);
    608c:	90 91 58 02 	lds	r25, 0x0258
    6090:	81 e0       	ldi	r24, 0x01	; 1
    6092:	69 2f       	mov	r22, r25
    6094:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(PLAYER_RUN_1);
    6098:	80 e0       	ldi	r24, 0x00	; 0
    609a:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
	LCD_voidWriteChar(BALL_GROUND);
    609e:	8e e2       	ldi	r24, 0x2E	; 46
    60a0:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
	LCD_voidClearPosition(1,10);
    60a4:	81 e0       	ldi	r24, 0x01	; 1
    60a6:	6a e0       	ldi	r22, 0x0A	; 10
    60a8:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <LCD_voidClearPosition>
	LCD_voidGoToPosition(1,11);
    60ac:	81 e0       	ldi	r24, 0x01	; 1
    60ae:	6b e0       	ldi	r22, 0x0B	; 11
    60b0:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(PLAYER_RUN_1);
    60b4:	80 e0       	ldi	r24, 0x00	; 0
    60b6:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
	LCD_voidGoToPosition(1,15);
    60ba:	81 e0       	ldi	r24, 0x01	; 1
    60bc:	6f e0       	ldi	r22, 0x0F	; 15
    60be:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(GOAL_POST);
    60c2:	8a eb       	ldi	r24, 0xBA	; 186
    60c4:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
    60c8:	80 e0       	ldi	r24, 0x00	; 0
    60ca:	90 e0       	ldi	r25, 0x00	; 0
    60cc:	a6 e1       	ldi	r26, 0x16	; 22
    60ce:	b3 e4       	ldi	r27, 0x43	; 67
    60d0:	8f a3       	std	Y+39, r24	; 0x27
    60d2:	98 a7       	std	Y+40, r25	; 0x28
    60d4:	a9 a7       	std	Y+41, r26	; 0x29
    60d6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    60d8:	6f a1       	ldd	r22, Y+39	; 0x27
    60da:	78 a5       	ldd	r23, Y+40	; 0x28
    60dc:	89 a5       	ldd	r24, Y+41	; 0x29
    60de:	9a a5       	ldd	r25, Y+42	; 0x2a
    60e0:	20 e0       	ldi	r18, 0x00	; 0
    60e2:	30 e0       	ldi	r19, 0x00	; 0
    60e4:	4a e7       	ldi	r20, 0x7A	; 122
    60e6:	55 e4       	ldi	r21, 0x45	; 69
    60e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60ec:	dc 01       	movw	r26, r24
    60ee:	cb 01       	movw	r24, r22
    60f0:	8b a3       	std	Y+35, r24	; 0x23
    60f2:	9c a3       	std	Y+36, r25	; 0x24
    60f4:	ad a3       	std	Y+37, r26	; 0x25
    60f6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    60f8:	6b a1       	ldd	r22, Y+35	; 0x23
    60fa:	7c a1       	ldd	r23, Y+36	; 0x24
    60fc:	8d a1       	ldd	r24, Y+37	; 0x25
    60fe:	9e a1       	ldd	r25, Y+38	; 0x26
    6100:	20 e0       	ldi	r18, 0x00	; 0
    6102:	30 e0       	ldi	r19, 0x00	; 0
    6104:	40 e8       	ldi	r20, 0x80	; 128
    6106:	5f e3       	ldi	r21, 0x3F	; 63
    6108:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    610c:	88 23       	and	r24, r24
    610e:	2c f4       	brge	.+10     	; 0x611a <PlayerShoots+0x4f2>
		__ticks = 1;
    6110:	81 e0       	ldi	r24, 0x01	; 1
    6112:	90 e0       	ldi	r25, 0x00	; 0
    6114:	9a a3       	std	Y+34, r25	; 0x22
    6116:	89 a3       	std	Y+33, r24	; 0x21
    6118:	3f c0       	rjmp	.+126    	; 0x6198 <PlayerShoots+0x570>
	else if (__tmp > 65535)
    611a:	6b a1       	ldd	r22, Y+35	; 0x23
    611c:	7c a1       	ldd	r23, Y+36	; 0x24
    611e:	8d a1       	ldd	r24, Y+37	; 0x25
    6120:	9e a1       	ldd	r25, Y+38	; 0x26
    6122:	20 e0       	ldi	r18, 0x00	; 0
    6124:	3f ef       	ldi	r19, 0xFF	; 255
    6126:	4f e7       	ldi	r20, 0x7F	; 127
    6128:	57 e4       	ldi	r21, 0x47	; 71
    612a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    612e:	18 16       	cp	r1, r24
    6130:	4c f5       	brge	.+82     	; 0x6184 <PlayerShoots+0x55c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6132:	6f a1       	ldd	r22, Y+39	; 0x27
    6134:	78 a5       	ldd	r23, Y+40	; 0x28
    6136:	89 a5       	ldd	r24, Y+41	; 0x29
    6138:	9a a5       	ldd	r25, Y+42	; 0x2a
    613a:	20 e0       	ldi	r18, 0x00	; 0
    613c:	30 e0       	ldi	r19, 0x00	; 0
    613e:	40 e2       	ldi	r20, 0x20	; 32
    6140:	51 e4       	ldi	r21, 0x41	; 65
    6142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6146:	dc 01       	movw	r26, r24
    6148:	cb 01       	movw	r24, r22
    614a:	bc 01       	movw	r22, r24
    614c:	cd 01       	movw	r24, r26
    614e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6152:	dc 01       	movw	r26, r24
    6154:	cb 01       	movw	r24, r22
    6156:	9a a3       	std	Y+34, r25	; 0x22
    6158:	89 a3       	std	Y+33, r24	; 0x21
    615a:	0f c0       	rjmp	.+30     	; 0x617a <PlayerShoots+0x552>
    615c:	80 e9       	ldi	r24, 0x90	; 144
    615e:	91 e0       	ldi	r25, 0x01	; 1
    6160:	98 a3       	std	Y+32, r25	; 0x20
    6162:	8f 8f       	std	Y+31, r24	; 0x1f
    6164:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6166:	98 a1       	ldd	r25, Y+32	; 0x20
    6168:	01 97       	sbiw	r24, 0x01	; 1
    616a:	f1 f7       	brne	.-4      	; 0x6168 <PlayerShoots+0x540>
    616c:	98 a3       	std	Y+32, r25	; 0x20
    616e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6170:	89 a1       	ldd	r24, Y+33	; 0x21
    6172:	9a a1       	ldd	r25, Y+34	; 0x22
    6174:	01 97       	sbiw	r24, 0x01	; 1
    6176:	9a a3       	std	Y+34, r25	; 0x22
    6178:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    617a:	89 a1       	ldd	r24, Y+33	; 0x21
    617c:	9a a1       	ldd	r25, Y+34	; 0x22
    617e:	00 97       	sbiw	r24, 0x00	; 0
    6180:	69 f7       	brne	.-38     	; 0x615c <PlayerShoots+0x534>
    6182:	14 c0       	rjmp	.+40     	; 0x61ac <PlayerShoots+0x584>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6184:	6b a1       	ldd	r22, Y+35	; 0x23
    6186:	7c a1       	ldd	r23, Y+36	; 0x24
    6188:	8d a1       	ldd	r24, Y+37	; 0x25
    618a:	9e a1       	ldd	r25, Y+38	; 0x26
    618c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6190:	dc 01       	movw	r26, r24
    6192:	cb 01       	movw	r24, r22
    6194:	9a a3       	std	Y+34, r25	; 0x22
    6196:	89 a3       	std	Y+33, r24	; 0x21
    6198:	89 a1       	ldd	r24, Y+33	; 0x21
    619a:	9a a1       	ldd	r25, Y+34	; 0x22
    619c:	9e 8f       	std	Y+30, r25	; 0x1e
    619e:	8d 8f       	std	Y+29, r24	; 0x1d
    61a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    61a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    61a4:	01 97       	sbiw	r24, 0x01	; 1
    61a6:	f1 f7       	brne	.-4      	; 0x61a4 <PlayerShoots+0x57c>
    61a8:	9e 8f       	std	Y+30, r25	; 0x1e
    61aa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(FRAME_DELAY_MS);
	LCD_voidClearPosition(1,playerY);
    61ac:	90 91 58 02 	lds	r25, 0x0258
    61b0:	81 e0       	ldi	r24, 0x01	; 1
    61b2:	69 2f       	mov	r22, r25
    61b4:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <LCD_voidClearPosition>
	LCD_voidGoToPosition(1,playerY);
    61b8:	90 91 58 02 	lds	r25, 0x0258
    61bc:	81 e0       	ldi	r24, 0x01	; 1
    61be:	69 2f       	mov	r22, r25
    61c0:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(PLAYER_RUN_2);
    61c4:	81 e0       	ldi	r24, 0x01	; 1
    61c6:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
	LCD_voidWriteChar(BALL_AIR);
    61ca:	85 ea       	ldi	r24, 0xA5	; 165
    61cc:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
	LCD_voidClearPosition(1,11);
    61d0:	81 e0       	ldi	r24, 0x01	; 1
    61d2:	6b e0       	ldi	r22, 0x0B	; 11
    61d4:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <LCD_voidClearPosition>
	LCD_voidGoToPosition(1,12);
    61d8:	81 e0       	ldi	r24, 0x01	; 1
    61da:	6c e0       	ldi	r22, 0x0C	; 12
    61dc:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(PLAYER_RUN_1);
    61e0:	80 e0       	ldi	r24, 0x00	; 0
    61e2:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
	LCD_voidGoToPosition(1,15);
    61e6:	81 e0       	ldi	r24, 0x01	; 1
    61e8:	6f e0       	ldi	r22, 0x0F	; 15
    61ea:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(GOAL_POST);
    61ee:	8a eb       	ldi	r24, 0xBA	; 186
    61f0:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
    61f4:	80 e0       	ldi	r24, 0x00	; 0
    61f6:	90 e0       	ldi	r25, 0x00	; 0
    61f8:	a6 e1       	ldi	r26, 0x16	; 22
    61fa:	b3 e4       	ldi	r27, 0x43	; 67
    61fc:	89 8f       	std	Y+25, r24	; 0x19
    61fe:	9a 8f       	std	Y+26, r25	; 0x1a
    6200:	ab 8f       	std	Y+27, r26	; 0x1b
    6202:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6204:	69 8d       	ldd	r22, Y+25	; 0x19
    6206:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6208:	8b 8d       	ldd	r24, Y+27	; 0x1b
    620a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    620c:	20 e0       	ldi	r18, 0x00	; 0
    620e:	30 e0       	ldi	r19, 0x00	; 0
    6210:	4a e7       	ldi	r20, 0x7A	; 122
    6212:	55 e4       	ldi	r21, 0x45	; 69
    6214:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6218:	dc 01       	movw	r26, r24
    621a:	cb 01       	movw	r24, r22
    621c:	8d 8b       	std	Y+21, r24	; 0x15
    621e:	9e 8b       	std	Y+22, r25	; 0x16
    6220:	af 8b       	std	Y+23, r26	; 0x17
    6222:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6224:	6d 89       	ldd	r22, Y+21	; 0x15
    6226:	7e 89       	ldd	r23, Y+22	; 0x16
    6228:	8f 89       	ldd	r24, Y+23	; 0x17
    622a:	98 8d       	ldd	r25, Y+24	; 0x18
    622c:	20 e0       	ldi	r18, 0x00	; 0
    622e:	30 e0       	ldi	r19, 0x00	; 0
    6230:	40 e8       	ldi	r20, 0x80	; 128
    6232:	5f e3       	ldi	r21, 0x3F	; 63
    6234:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6238:	88 23       	and	r24, r24
    623a:	2c f4       	brge	.+10     	; 0x6246 <PlayerShoots+0x61e>
		__ticks = 1;
    623c:	81 e0       	ldi	r24, 0x01	; 1
    623e:	90 e0       	ldi	r25, 0x00	; 0
    6240:	9c 8b       	std	Y+20, r25	; 0x14
    6242:	8b 8b       	std	Y+19, r24	; 0x13
    6244:	3f c0       	rjmp	.+126    	; 0x62c4 <PlayerShoots+0x69c>
	else if (__tmp > 65535)
    6246:	6d 89       	ldd	r22, Y+21	; 0x15
    6248:	7e 89       	ldd	r23, Y+22	; 0x16
    624a:	8f 89       	ldd	r24, Y+23	; 0x17
    624c:	98 8d       	ldd	r25, Y+24	; 0x18
    624e:	20 e0       	ldi	r18, 0x00	; 0
    6250:	3f ef       	ldi	r19, 0xFF	; 255
    6252:	4f e7       	ldi	r20, 0x7F	; 127
    6254:	57 e4       	ldi	r21, 0x47	; 71
    6256:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    625a:	18 16       	cp	r1, r24
    625c:	4c f5       	brge	.+82     	; 0x62b0 <PlayerShoots+0x688>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    625e:	69 8d       	ldd	r22, Y+25	; 0x19
    6260:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6262:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6264:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6266:	20 e0       	ldi	r18, 0x00	; 0
    6268:	30 e0       	ldi	r19, 0x00	; 0
    626a:	40 e2       	ldi	r20, 0x20	; 32
    626c:	51 e4       	ldi	r21, 0x41	; 65
    626e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6272:	dc 01       	movw	r26, r24
    6274:	cb 01       	movw	r24, r22
    6276:	bc 01       	movw	r22, r24
    6278:	cd 01       	movw	r24, r26
    627a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    627e:	dc 01       	movw	r26, r24
    6280:	cb 01       	movw	r24, r22
    6282:	9c 8b       	std	Y+20, r25	; 0x14
    6284:	8b 8b       	std	Y+19, r24	; 0x13
    6286:	0f c0       	rjmp	.+30     	; 0x62a6 <PlayerShoots+0x67e>
    6288:	80 e9       	ldi	r24, 0x90	; 144
    628a:	91 e0       	ldi	r25, 0x01	; 1
    628c:	9a 8b       	std	Y+18, r25	; 0x12
    628e:	89 8b       	std	Y+17, r24	; 0x11
    6290:	89 89       	ldd	r24, Y+17	; 0x11
    6292:	9a 89       	ldd	r25, Y+18	; 0x12
    6294:	01 97       	sbiw	r24, 0x01	; 1
    6296:	f1 f7       	brne	.-4      	; 0x6294 <PlayerShoots+0x66c>
    6298:	9a 8b       	std	Y+18, r25	; 0x12
    629a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    629c:	8b 89       	ldd	r24, Y+19	; 0x13
    629e:	9c 89       	ldd	r25, Y+20	; 0x14
    62a0:	01 97       	sbiw	r24, 0x01	; 1
    62a2:	9c 8b       	std	Y+20, r25	; 0x14
    62a4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    62a6:	8b 89       	ldd	r24, Y+19	; 0x13
    62a8:	9c 89       	ldd	r25, Y+20	; 0x14
    62aa:	00 97       	sbiw	r24, 0x00	; 0
    62ac:	69 f7       	brne	.-38     	; 0x6288 <PlayerShoots+0x660>
    62ae:	14 c0       	rjmp	.+40     	; 0x62d8 <PlayerShoots+0x6b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    62b0:	6d 89       	ldd	r22, Y+21	; 0x15
    62b2:	7e 89       	ldd	r23, Y+22	; 0x16
    62b4:	8f 89       	ldd	r24, Y+23	; 0x17
    62b6:	98 8d       	ldd	r25, Y+24	; 0x18
    62b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    62bc:	dc 01       	movw	r26, r24
    62be:	cb 01       	movw	r24, r22
    62c0:	9c 8b       	std	Y+20, r25	; 0x14
    62c2:	8b 8b       	std	Y+19, r24	; 0x13
    62c4:	8b 89       	ldd	r24, Y+19	; 0x13
    62c6:	9c 89       	ldd	r25, Y+20	; 0x14
    62c8:	98 8b       	std	Y+16, r25	; 0x10
    62ca:	8f 87       	std	Y+15, r24	; 0x0f
    62cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    62ce:	98 89       	ldd	r25, Y+16	; 0x10
    62d0:	01 97       	sbiw	r24, 0x01	; 1
    62d2:	f1 f7       	brne	.-4      	; 0x62d0 <PlayerShoots+0x6a8>
    62d4:	98 8b       	std	Y+16, r25	; 0x10
    62d6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(FRAME_DELAY_MS);
	LCD_voidClearPosition(1,playerY+1);
    62d8:	80 91 58 02 	lds	r24, 0x0258
    62dc:	98 2f       	mov	r25, r24
    62de:	9f 5f       	subi	r25, 0xFF	; 255
    62e0:	81 e0       	ldi	r24, 0x01	; 1
    62e2:	69 2f       	mov	r22, r25
    62e4:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <LCD_voidClearPosition>
	LCD_voidClearPosition(1,playerY);
    62e8:	90 91 58 02 	lds	r25, 0x0258
    62ec:	81 e0       	ldi	r24, 0x01	; 1
    62ee:	69 2f       	mov	r22, r25
    62f0:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <LCD_voidClearPosition>
	LCD_voidGoToPosition(1,playerY);
    62f4:	90 91 58 02 	lds	r25, 0x0258
    62f8:	81 e0       	ldi	r24, 0x01	; 1
    62fa:	69 2f       	mov	r22, r25
    62fc:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(PLAYER_RUN_3);
    6300:	82 e0       	ldi	r24, 0x02	; 2
    6302:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
	LCD_voidGoToPosition(1,playerY+2);
    6306:	80 91 58 02 	lds	r24, 0x0258
    630a:	98 2f       	mov	r25, r24
    630c:	9e 5f       	subi	r25, 0xFE	; 254
    630e:	81 e0       	ldi	r24, 0x01	; 1
    6310:	69 2f       	mov	r22, r25
    6312:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(BALL_AIR);
    6316:	85 ea       	ldi	r24, 0xA5	; 165
    6318:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
	LCD_voidGoToPosition(1,12);
    631c:	81 e0       	ldi	r24, 0x01	; 1
    631e:	6c e0       	ldi	r22, 0x0C	; 12
    6320:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(PLAYER_RUN_1);
    6324:	80 e0       	ldi	r24, 0x00	; 0
    6326:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
	LCD_voidGoToPosition(1,15);
    632a:	81 e0       	ldi	r24, 0x01	; 1
    632c:	6f e0       	ldi	r22, 0x0F	; 15
    632e:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(GOAL_POST);
    6332:	8a eb       	ldi	r24, 0xBA	; 186
    6334:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
    6338:	80 e0       	ldi	r24, 0x00	; 0
    633a:	90 e0       	ldi	r25, 0x00	; 0
    633c:	a6 e1       	ldi	r26, 0x16	; 22
    633e:	b3 e4       	ldi	r27, 0x43	; 67
    6340:	8b 87       	std	Y+11, r24	; 0x0b
    6342:	9c 87       	std	Y+12, r25	; 0x0c
    6344:	ad 87       	std	Y+13, r26	; 0x0d
    6346:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6348:	6b 85       	ldd	r22, Y+11	; 0x0b
    634a:	7c 85       	ldd	r23, Y+12	; 0x0c
    634c:	8d 85       	ldd	r24, Y+13	; 0x0d
    634e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6350:	20 e0       	ldi	r18, 0x00	; 0
    6352:	30 e0       	ldi	r19, 0x00	; 0
    6354:	4a e7       	ldi	r20, 0x7A	; 122
    6356:	55 e4       	ldi	r21, 0x45	; 69
    6358:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    635c:	dc 01       	movw	r26, r24
    635e:	cb 01       	movw	r24, r22
    6360:	8f 83       	std	Y+7, r24	; 0x07
    6362:	98 87       	std	Y+8, r25	; 0x08
    6364:	a9 87       	std	Y+9, r26	; 0x09
    6366:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6368:	6f 81       	ldd	r22, Y+7	; 0x07
    636a:	78 85       	ldd	r23, Y+8	; 0x08
    636c:	89 85       	ldd	r24, Y+9	; 0x09
    636e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6370:	20 e0       	ldi	r18, 0x00	; 0
    6372:	30 e0       	ldi	r19, 0x00	; 0
    6374:	40 e8       	ldi	r20, 0x80	; 128
    6376:	5f e3       	ldi	r21, 0x3F	; 63
    6378:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    637c:	88 23       	and	r24, r24
    637e:	2c f4       	brge	.+10     	; 0x638a <PlayerShoots+0x762>
		__ticks = 1;
    6380:	81 e0       	ldi	r24, 0x01	; 1
    6382:	90 e0       	ldi	r25, 0x00	; 0
    6384:	9e 83       	std	Y+6, r25	; 0x06
    6386:	8d 83       	std	Y+5, r24	; 0x05
    6388:	3f c0       	rjmp	.+126    	; 0x6408 <PlayerShoots+0x7e0>
	else if (__tmp > 65535)
    638a:	6f 81       	ldd	r22, Y+7	; 0x07
    638c:	78 85       	ldd	r23, Y+8	; 0x08
    638e:	89 85       	ldd	r24, Y+9	; 0x09
    6390:	9a 85       	ldd	r25, Y+10	; 0x0a
    6392:	20 e0       	ldi	r18, 0x00	; 0
    6394:	3f ef       	ldi	r19, 0xFF	; 255
    6396:	4f e7       	ldi	r20, 0x7F	; 127
    6398:	57 e4       	ldi	r21, 0x47	; 71
    639a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    639e:	18 16       	cp	r1, r24
    63a0:	4c f5       	brge	.+82     	; 0x63f4 <PlayerShoots+0x7cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    63a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    63a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    63a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    63a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    63aa:	20 e0       	ldi	r18, 0x00	; 0
    63ac:	30 e0       	ldi	r19, 0x00	; 0
    63ae:	40 e2       	ldi	r20, 0x20	; 32
    63b0:	51 e4       	ldi	r21, 0x41	; 65
    63b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    63b6:	dc 01       	movw	r26, r24
    63b8:	cb 01       	movw	r24, r22
    63ba:	bc 01       	movw	r22, r24
    63bc:	cd 01       	movw	r24, r26
    63be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    63c2:	dc 01       	movw	r26, r24
    63c4:	cb 01       	movw	r24, r22
    63c6:	9e 83       	std	Y+6, r25	; 0x06
    63c8:	8d 83       	std	Y+5, r24	; 0x05
    63ca:	0f c0       	rjmp	.+30     	; 0x63ea <PlayerShoots+0x7c2>
    63cc:	80 e9       	ldi	r24, 0x90	; 144
    63ce:	91 e0       	ldi	r25, 0x01	; 1
    63d0:	9c 83       	std	Y+4, r25	; 0x04
    63d2:	8b 83       	std	Y+3, r24	; 0x03
    63d4:	8b 81       	ldd	r24, Y+3	; 0x03
    63d6:	9c 81       	ldd	r25, Y+4	; 0x04
    63d8:	01 97       	sbiw	r24, 0x01	; 1
    63da:	f1 f7       	brne	.-4      	; 0x63d8 <PlayerShoots+0x7b0>
    63dc:	9c 83       	std	Y+4, r25	; 0x04
    63de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    63e0:	8d 81       	ldd	r24, Y+5	; 0x05
    63e2:	9e 81       	ldd	r25, Y+6	; 0x06
    63e4:	01 97       	sbiw	r24, 0x01	; 1
    63e6:	9e 83       	std	Y+6, r25	; 0x06
    63e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    63ea:	8d 81       	ldd	r24, Y+5	; 0x05
    63ec:	9e 81       	ldd	r25, Y+6	; 0x06
    63ee:	00 97       	sbiw	r24, 0x00	; 0
    63f0:	69 f7       	brne	.-38     	; 0x63cc <PlayerShoots+0x7a4>
    63f2:	14 c0       	rjmp	.+40     	; 0x641c <PlayerShoots+0x7f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    63f4:	6f 81       	ldd	r22, Y+7	; 0x07
    63f6:	78 85       	ldd	r23, Y+8	; 0x08
    63f8:	89 85       	ldd	r24, Y+9	; 0x09
    63fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    63fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6400:	dc 01       	movw	r26, r24
    6402:	cb 01       	movw	r24, r22
    6404:	9e 83       	std	Y+6, r25	; 0x06
    6406:	8d 83       	std	Y+5, r24	; 0x05
    6408:	8d 81       	ldd	r24, Y+5	; 0x05
    640a:	9e 81       	ldd	r25, Y+6	; 0x06
    640c:	9a 83       	std	Y+2, r25	; 0x02
    640e:	89 83       	std	Y+1, r24	; 0x01
    6410:	89 81       	ldd	r24, Y+1	; 0x01
    6412:	9a 81       	ldd	r25, Y+2	; 0x02
    6414:	01 97       	sbiw	r24, 0x01	; 1
    6416:	f1 f7       	brne	.-4      	; 0x6414 <PlayerShoots+0x7ec>
    6418:	9a 83       	std	Y+2, r25	; 0x02
    641a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(FRAME_DELAY_MS);
	LCD_voidClearPosition(1,playerY);
    641c:	90 91 58 02 	lds	r25, 0x0258
    6420:	81 e0       	ldi	r24, 0x01	; 1
    6422:	69 2f       	mov	r22, r25
    6424:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <LCD_voidClearPosition>
}
    6428:	cc 5a       	subi	r28, 0xAC	; 172
    642a:	df 4f       	sbci	r29, 0xFF	; 255
    642c:	0f b6       	in	r0, 0x3f	; 63
    642e:	f8 94       	cli
    6430:	de bf       	out	0x3e, r29	; 62
    6432:	0f be       	out	0x3f, r0	; 63
    6434:	cd bf       	out	0x3d, r28	; 61
    6436:	cf 91       	pop	r28
    6438:	df 91       	pop	r29
    643a:	1f 91       	pop	r17
    643c:	0f 91       	pop	r16
    643e:	08 95       	ret

00006440 <PlayerScores>:

void PlayerScores(){
    6440:	df 93       	push	r29
    6442:	cf 93       	push	r28
    6444:	cd b7       	in	r28, 0x3d	; 61
    6446:	de b7       	in	r29, 0x3e	; 62
    6448:	2e 97       	sbiw	r28, 0x0e	; 14
    644a:	0f b6       	in	r0, 0x3f	; 63
    644c:	f8 94       	cli
    644e:	de bf       	out	0x3e, r29	; 62
    6450:	0f be       	out	0x3f, r0	; 63
    6452:	cd bf       	out	0x3d, r28	; 61
	LCD_voidClearLine(3);
    6454:	83 e0       	ldi	r24, 0x03	; 3
    6456:	0e 94 f6 25 	call	0x4bec	; 0x4bec <LCD_voidClearLine>
	LCD_voidGoToPosition(3,5);
    645a:	83 e0       	ldi	r24, 0x03	; 3
    645c:	65 e0       	ldi	r22, 0x05	; 5
    645e:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*) "Salah scores!");
    6462:	88 ec       	ldi	r24, 0xC8	; 200
    6464:	90 e0       	ldi	r25, 0x00	; 0
    6466:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <LCD_voidWriteString>
	LCD_voidGoToPosition(1,13);
    646a:	81 e0       	ldi	r24, 0x01	; 1
    646c:	6d e0       	ldi	r22, 0x0D	; 13
    646e:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(PLAYER_RUN_3);
    6472:	82 e0       	ldi	r24, 0x02	; 2
    6474:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
	LCD_voidGoToPosition(1,12);
    6478:	81 e0       	ldi	r24, 0x01	; 1
    647a:	6c e0       	ldi	r22, 0x0C	; 12
    647c:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(PLAYER_RUN_1);
    6480:	80 e0       	ldi	r24, 0x00	; 0
    6482:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
	LCD_voidGoToPosition(1,15);
    6486:	81 e0       	ldi	r24, 0x01	; 1
    6488:	6f e0       	ldi	r22, 0x0F	; 15
    648a:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(GOAL_SCORED);
    648e:	87 e0       	ldi	r24, 0x07	; 7
    6490:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
	DIO_voidSetPinValue(DIO_PortC, DIO_PIN6, High);
    6494:	83 e0       	ldi	r24, 0x03	; 3
    6496:	66 e0       	ldi	r22, 0x06	; 6
    6498:	41 e0       	ldi	r20, 0x01	; 1
    649a:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
    649e:	80 e0       	ldi	r24, 0x00	; 0
    64a0:	90 e0       	ldi	r25, 0x00	; 0
    64a2:	a1 ee       	ldi	r26, 0xE1	; 225
    64a4:	b3 e4       	ldi	r27, 0x43	; 67
    64a6:	8b 87       	std	Y+11, r24	; 0x0b
    64a8:	9c 87       	std	Y+12, r25	; 0x0c
    64aa:	ad 87       	std	Y+13, r26	; 0x0d
    64ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    64ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    64b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    64b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    64b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    64b6:	20 e0       	ldi	r18, 0x00	; 0
    64b8:	30 e0       	ldi	r19, 0x00	; 0
    64ba:	4a e7       	ldi	r20, 0x7A	; 122
    64bc:	55 e4       	ldi	r21, 0x45	; 69
    64be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    64c2:	dc 01       	movw	r26, r24
    64c4:	cb 01       	movw	r24, r22
    64c6:	8f 83       	std	Y+7, r24	; 0x07
    64c8:	98 87       	std	Y+8, r25	; 0x08
    64ca:	a9 87       	std	Y+9, r26	; 0x09
    64cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    64ce:	6f 81       	ldd	r22, Y+7	; 0x07
    64d0:	78 85       	ldd	r23, Y+8	; 0x08
    64d2:	89 85       	ldd	r24, Y+9	; 0x09
    64d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    64d6:	20 e0       	ldi	r18, 0x00	; 0
    64d8:	30 e0       	ldi	r19, 0x00	; 0
    64da:	40 e8       	ldi	r20, 0x80	; 128
    64dc:	5f e3       	ldi	r21, 0x3F	; 63
    64de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    64e2:	88 23       	and	r24, r24
    64e4:	2c f4       	brge	.+10     	; 0x64f0 <PlayerScores+0xb0>
		__ticks = 1;
    64e6:	81 e0       	ldi	r24, 0x01	; 1
    64e8:	90 e0       	ldi	r25, 0x00	; 0
    64ea:	9e 83       	std	Y+6, r25	; 0x06
    64ec:	8d 83       	std	Y+5, r24	; 0x05
    64ee:	3f c0       	rjmp	.+126    	; 0x656e <PlayerScores+0x12e>
	else if (__tmp > 65535)
    64f0:	6f 81       	ldd	r22, Y+7	; 0x07
    64f2:	78 85       	ldd	r23, Y+8	; 0x08
    64f4:	89 85       	ldd	r24, Y+9	; 0x09
    64f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    64f8:	20 e0       	ldi	r18, 0x00	; 0
    64fa:	3f ef       	ldi	r19, 0xFF	; 255
    64fc:	4f e7       	ldi	r20, 0x7F	; 127
    64fe:	57 e4       	ldi	r21, 0x47	; 71
    6500:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6504:	18 16       	cp	r1, r24
    6506:	4c f5       	brge	.+82     	; 0x655a <PlayerScores+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6508:	6b 85       	ldd	r22, Y+11	; 0x0b
    650a:	7c 85       	ldd	r23, Y+12	; 0x0c
    650c:	8d 85       	ldd	r24, Y+13	; 0x0d
    650e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6510:	20 e0       	ldi	r18, 0x00	; 0
    6512:	30 e0       	ldi	r19, 0x00	; 0
    6514:	40 e2       	ldi	r20, 0x20	; 32
    6516:	51 e4       	ldi	r21, 0x41	; 65
    6518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    651c:	dc 01       	movw	r26, r24
    651e:	cb 01       	movw	r24, r22
    6520:	bc 01       	movw	r22, r24
    6522:	cd 01       	movw	r24, r26
    6524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6528:	dc 01       	movw	r26, r24
    652a:	cb 01       	movw	r24, r22
    652c:	9e 83       	std	Y+6, r25	; 0x06
    652e:	8d 83       	std	Y+5, r24	; 0x05
    6530:	0f c0       	rjmp	.+30     	; 0x6550 <PlayerScores+0x110>
    6532:	80 e9       	ldi	r24, 0x90	; 144
    6534:	91 e0       	ldi	r25, 0x01	; 1
    6536:	9c 83       	std	Y+4, r25	; 0x04
    6538:	8b 83       	std	Y+3, r24	; 0x03
    653a:	8b 81       	ldd	r24, Y+3	; 0x03
    653c:	9c 81       	ldd	r25, Y+4	; 0x04
    653e:	01 97       	sbiw	r24, 0x01	; 1
    6540:	f1 f7       	brne	.-4      	; 0x653e <PlayerScores+0xfe>
    6542:	9c 83       	std	Y+4, r25	; 0x04
    6544:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6546:	8d 81       	ldd	r24, Y+5	; 0x05
    6548:	9e 81       	ldd	r25, Y+6	; 0x06
    654a:	01 97       	sbiw	r24, 0x01	; 1
    654c:	9e 83       	std	Y+6, r25	; 0x06
    654e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6550:	8d 81       	ldd	r24, Y+5	; 0x05
    6552:	9e 81       	ldd	r25, Y+6	; 0x06
    6554:	00 97       	sbiw	r24, 0x00	; 0
    6556:	69 f7       	brne	.-38     	; 0x6532 <PlayerScores+0xf2>
    6558:	14 c0       	rjmp	.+40     	; 0x6582 <PlayerScores+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    655a:	6f 81       	ldd	r22, Y+7	; 0x07
    655c:	78 85       	ldd	r23, Y+8	; 0x08
    655e:	89 85       	ldd	r24, Y+9	; 0x09
    6560:	9a 85       	ldd	r25, Y+10	; 0x0a
    6562:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6566:	dc 01       	movw	r26, r24
    6568:	cb 01       	movw	r24, r22
    656a:	9e 83       	std	Y+6, r25	; 0x06
    656c:	8d 83       	std	Y+5, r24	; 0x05
    656e:	8d 81       	ldd	r24, Y+5	; 0x05
    6570:	9e 81       	ldd	r25, Y+6	; 0x06
    6572:	9a 83       	std	Y+2, r25	; 0x02
    6574:	89 83       	std	Y+1, r24	; 0x01
    6576:	89 81       	ldd	r24, Y+1	; 0x01
    6578:	9a 81       	ldd	r25, Y+2	; 0x02
    657a:	01 97       	sbiw	r24, 0x01	; 1
    657c:	f1 f7       	brne	.-4      	; 0x657a <PlayerScores+0x13a>
    657e:	9a 83       	std	Y+2, r25	; 0x02
    6580:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(FRAME_DELAY_MS + 300);
	DIO_voidSetPinValue(DIO_PortC, DIO_PIN6, Low);
    6582:	83 e0       	ldi	r24, 0x03	; 3
    6584:	66 e0       	ldi	r22, 0x06	; 6
    6586:	40 e0       	ldi	r20, 0x00	; 0
    6588:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
}
    658c:	2e 96       	adiw	r28, 0x0e	; 14
    658e:	0f b6       	in	r0, 0x3f	; 63
    6590:	f8 94       	cli
    6592:	de bf       	out	0x3e, r29	; 62
    6594:	0f be       	out	0x3f, r0	; 63
    6596:	cd bf       	out	0x3d, r28	; 61
    6598:	cf 91       	pop	r28
    659a:	df 91       	pop	r29
    659c:	08 95       	ret

0000659e <PlayerCelebrates>:

void PlayerCelebrates(){
    659e:	df 93       	push	r29
    65a0:	cf 93       	push	r28
    65a2:	cd b7       	in	r28, 0x3d	; 61
    65a4:	de b7       	in	r29, 0x3e	; 62
    65a6:	aa 97       	sbiw	r28, 0x2a	; 42
    65a8:	0f b6       	in	r0, 0x3f	; 63
    65aa:	f8 94       	cli
    65ac:	de bf       	out	0x3e, r29	; 62
    65ae:	0f be       	out	0x3f, r0	; 63
    65b0:	cd bf       	out	0x3d, r28	; 61
	LCD_voidClearLine(3);
    65b2:	83 e0       	ldi	r24, 0x03	; 3
    65b4:	0e 94 f6 25 	call	0x4bec	; 0x4bec <LCD_voidClearLine>
	LCD_voidGoToPosition(3,2);
    65b8:	83 e0       	ldi	r24, 0x03	; 3
    65ba:	62 e0       	ldi	r22, 0x02	; 2
    65bc:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*) "GOAAAAAAAAL!");
    65c0:	86 ed       	ldi	r24, 0xD6	; 214
    65c2:	90 e0       	ldi	r25, 0x00	; 0
    65c4:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <LCD_voidWriteString>
	LCD_voidGoToPosition(1,13);
    65c8:	81 e0       	ldi	r24, 0x01	; 1
    65ca:	6d e0       	ldi	r22, 0x0D	; 13
    65cc:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(PLAYER_RUN_1);
    65d0:	80 e0       	ldi	r24, 0x00	; 0
    65d2:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
	LCD_voidGoToPosition(1,12);
    65d6:	81 e0       	ldi	r24, 0x01	; 1
    65d8:	6c e0       	ldi	r22, 0x0C	; 12
    65da:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(KEEPER_SLIDE);
    65de:	85 e0       	ldi	r24, 0x05	; 5
    65e0:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
	LCD_voidGoToPosition(1,15);
    65e4:	81 e0       	ldi	r24, 0x01	; 1
    65e6:	6f e0       	ldi	r22, 0x0F	; 15
    65e8:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(GOAL_SCORED);
    65ec:	87 e0       	ldi	r24, 0x07	; 7
    65ee:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
    65f2:	80 e0       	ldi	r24, 0x00	; 0
    65f4:	90 e8       	ldi	r25, 0x80	; 128
    65f6:	a2 e2       	ldi	r26, 0x22	; 34
    65f8:	b4 e4       	ldi	r27, 0x44	; 68
    65fa:	8f a3       	std	Y+39, r24	; 0x27
    65fc:	98 a7       	std	Y+40, r25	; 0x28
    65fe:	a9 a7       	std	Y+41, r26	; 0x29
    6600:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6602:	6f a1       	ldd	r22, Y+39	; 0x27
    6604:	78 a5       	ldd	r23, Y+40	; 0x28
    6606:	89 a5       	ldd	r24, Y+41	; 0x29
    6608:	9a a5       	ldd	r25, Y+42	; 0x2a
    660a:	20 e0       	ldi	r18, 0x00	; 0
    660c:	30 e0       	ldi	r19, 0x00	; 0
    660e:	4a e7       	ldi	r20, 0x7A	; 122
    6610:	55 e4       	ldi	r21, 0x45	; 69
    6612:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6616:	dc 01       	movw	r26, r24
    6618:	cb 01       	movw	r24, r22
    661a:	8b a3       	std	Y+35, r24	; 0x23
    661c:	9c a3       	std	Y+36, r25	; 0x24
    661e:	ad a3       	std	Y+37, r26	; 0x25
    6620:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6622:	6b a1       	ldd	r22, Y+35	; 0x23
    6624:	7c a1       	ldd	r23, Y+36	; 0x24
    6626:	8d a1       	ldd	r24, Y+37	; 0x25
    6628:	9e a1       	ldd	r25, Y+38	; 0x26
    662a:	20 e0       	ldi	r18, 0x00	; 0
    662c:	30 e0       	ldi	r19, 0x00	; 0
    662e:	40 e8       	ldi	r20, 0x80	; 128
    6630:	5f e3       	ldi	r21, 0x3F	; 63
    6632:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6636:	88 23       	and	r24, r24
    6638:	2c f4       	brge	.+10     	; 0x6644 <PlayerCelebrates+0xa6>
		__ticks = 1;
    663a:	81 e0       	ldi	r24, 0x01	; 1
    663c:	90 e0       	ldi	r25, 0x00	; 0
    663e:	9a a3       	std	Y+34, r25	; 0x22
    6640:	89 a3       	std	Y+33, r24	; 0x21
    6642:	3f c0       	rjmp	.+126    	; 0x66c2 <PlayerCelebrates+0x124>
	else if (__tmp > 65535)
    6644:	6b a1       	ldd	r22, Y+35	; 0x23
    6646:	7c a1       	ldd	r23, Y+36	; 0x24
    6648:	8d a1       	ldd	r24, Y+37	; 0x25
    664a:	9e a1       	ldd	r25, Y+38	; 0x26
    664c:	20 e0       	ldi	r18, 0x00	; 0
    664e:	3f ef       	ldi	r19, 0xFF	; 255
    6650:	4f e7       	ldi	r20, 0x7F	; 127
    6652:	57 e4       	ldi	r21, 0x47	; 71
    6654:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6658:	18 16       	cp	r1, r24
    665a:	4c f5       	brge	.+82     	; 0x66ae <PlayerCelebrates+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    665c:	6f a1       	ldd	r22, Y+39	; 0x27
    665e:	78 a5       	ldd	r23, Y+40	; 0x28
    6660:	89 a5       	ldd	r24, Y+41	; 0x29
    6662:	9a a5       	ldd	r25, Y+42	; 0x2a
    6664:	20 e0       	ldi	r18, 0x00	; 0
    6666:	30 e0       	ldi	r19, 0x00	; 0
    6668:	40 e2       	ldi	r20, 0x20	; 32
    666a:	51 e4       	ldi	r21, 0x41	; 65
    666c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6670:	dc 01       	movw	r26, r24
    6672:	cb 01       	movw	r24, r22
    6674:	bc 01       	movw	r22, r24
    6676:	cd 01       	movw	r24, r26
    6678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    667c:	dc 01       	movw	r26, r24
    667e:	cb 01       	movw	r24, r22
    6680:	9a a3       	std	Y+34, r25	; 0x22
    6682:	89 a3       	std	Y+33, r24	; 0x21
    6684:	0f c0       	rjmp	.+30     	; 0x66a4 <PlayerCelebrates+0x106>
    6686:	80 e9       	ldi	r24, 0x90	; 144
    6688:	91 e0       	ldi	r25, 0x01	; 1
    668a:	98 a3       	std	Y+32, r25	; 0x20
    668c:	8f 8f       	std	Y+31, r24	; 0x1f
    668e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6690:	98 a1       	ldd	r25, Y+32	; 0x20
    6692:	01 97       	sbiw	r24, 0x01	; 1
    6694:	f1 f7       	brne	.-4      	; 0x6692 <PlayerCelebrates+0xf4>
    6696:	98 a3       	std	Y+32, r25	; 0x20
    6698:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    669a:	89 a1       	ldd	r24, Y+33	; 0x21
    669c:	9a a1       	ldd	r25, Y+34	; 0x22
    669e:	01 97       	sbiw	r24, 0x01	; 1
    66a0:	9a a3       	std	Y+34, r25	; 0x22
    66a2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    66a4:	89 a1       	ldd	r24, Y+33	; 0x21
    66a6:	9a a1       	ldd	r25, Y+34	; 0x22
    66a8:	00 97       	sbiw	r24, 0x00	; 0
    66aa:	69 f7       	brne	.-38     	; 0x6686 <PlayerCelebrates+0xe8>
    66ac:	14 c0       	rjmp	.+40     	; 0x66d6 <PlayerCelebrates+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    66ae:	6b a1       	ldd	r22, Y+35	; 0x23
    66b0:	7c a1       	ldd	r23, Y+36	; 0x24
    66b2:	8d a1       	ldd	r24, Y+37	; 0x25
    66b4:	9e a1       	ldd	r25, Y+38	; 0x26
    66b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    66ba:	dc 01       	movw	r26, r24
    66bc:	cb 01       	movw	r24, r22
    66be:	9a a3       	std	Y+34, r25	; 0x22
    66c0:	89 a3       	std	Y+33, r24	; 0x21
    66c2:	89 a1       	ldd	r24, Y+33	; 0x21
    66c4:	9a a1       	ldd	r25, Y+34	; 0x22
    66c6:	9e 8f       	std	Y+30, r25	; 0x1e
    66c8:	8d 8f       	std	Y+29, r24	; 0x1d
    66ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    66cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    66ce:	01 97       	sbiw	r24, 0x01	; 1
    66d0:	f1 f7       	brne	.-4      	; 0x66ce <PlayerCelebrates+0x130>
    66d2:	9e 8f       	std	Y+30, r25	; 0x1e
    66d4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(FRAME_DELAY_MS + 500);
	LCD_voidClearPosition(1,13);
    66d6:	81 e0       	ldi	r24, 0x01	; 1
    66d8:	6d e0       	ldi	r22, 0x0D	; 13
    66da:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <LCD_voidClearPosition>
	LCD_voidClearLine(3);
    66de:	83 e0       	ldi	r24, 0x03	; 3
    66e0:	0e 94 f6 25 	call	0x4bec	; 0x4bec <LCD_voidClearLine>
	LCD_voidGoToPosition(3,4);
    66e4:	83 e0       	ldi	r24, 0x03	; 3
    66e6:	64 e0       	ldi	r22, 0x04	; 4
    66e8:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*) "SIUUUUUUUUUU!");
    66ec:	83 ee       	ldi	r24, 0xE3	; 227
    66ee:	90 e0       	ldi	r25, 0x00	; 0
    66f0:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <LCD_voidWriteString>
	LCD_voidGoToPosition(2,13);
    66f4:	82 e0       	ldi	r24, 0x02	; 2
    66f6:	6d e0       	ldi	r22, 0x0D	; 13
    66f8:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(PLAYER_JUMP);
    66fc:	83 e0       	ldi	r24, 0x03	; 3
    66fe:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
	LCD_voidGoToPosition(1,12);
    6702:	81 e0       	ldi	r24, 0x01	; 1
    6704:	6c e0       	ldi	r22, 0x0C	; 12
    6706:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(KEEPER_SLIDE);
    670a:	85 e0       	ldi	r24, 0x05	; 5
    670c:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
	LCD_voidGoToPosition(1,15);
    6710:	81 e0       	ldi	r24, 0x01	; 1
    6712:	6f e0       	ldi	r22, 0x0F	; 15
    6714:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(GOAL_SCORED);
    6718:	87 e0       	ldi	r24, 0x07	; 7
    671a:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
    671e:	80 e0       	ldi	r24, 0x00	; 0
    6720:	90 e8       	ldi	r25, 0x80	; 128
    6722:	a2 e2       	ldi	r26, 0x22	; 34
    6724:	b4 e4       	ldi	r27, 0x44	; 68
    6726:	89 8f       	std	Y+25, r24	; 0x19
    6728:	9a 8f       	std	Y+26, r25	; 0x1a
    672a:	ab 8f       	std	Y+27, r26	; 0x1b
    672c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    672e:	69 8d       	ldd	r22, Y+25	; 0x19
    6730:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6732:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6734:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6736:	20 e0       	ldi	r18, 0x00	; 0
    6738:	30 e0       	ldi	r19, 0x00	; 0
    673a:	4a e7       	ldi	r20, 0x7A	; 122
    673c:	55 e4       	ldi	r21, 0x45	; 69
    673e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6742:	dc 01       	movw	r26, r24
    6744:	cb 01       	movw	r24, r22
    6746:	8d 8b       	std	Y+21, r24	; 0x15
    6748:	9e 8b       	std	Y+22, r25	; 0x16
    674a:	af 8b       	std	Y+23, r26	; 0x17
    674c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    674e:	6d 89       	ldd	r22, Y+21	; 0x15
    6750:	7e 89       	ldd	r23, Y+22	; 0x16
    6752:	8f 89       	ldd	r24, Y+23	; 0x17
    6754:	98 8d       	ldd	r25, Y+24	; 0x18
    6756:	20 e0       	ldi	r18, 0x00	; 0
    6758:	30 e0       	ldi	r19, 0x00	; 0
    675a:	40 e8       	ldi	r20, 0x80	; 128
    675c:	5f e3       	ldi	r21, 0x3F	; 63
    675e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6762:	88 23       	and	r24, r24
    6764:	2c f4       	brge	.+10     	; 0x6770 <PlayerCelebrates+0x1d2>
		__ticks = 1;
    6766:	81 e0       	ldi	r24, 0x01	; 1
    6768:	90 e0       	ldi	r25, 0x00	; 0
    676a:	9c 8b       	std	Y+20, r25	; 0x14
    676c:	8b 8b       	std	Y+19, r24	; 0x13
    676e:	3f c0       	rjmp	.+126    	; 0x67ee <PlayerCelebrates+0x250>
	else if (__tmp > 65535)
    6770:	6d 89       	ldd	r22, Y+21	; 0x15
    6772:	7e 89       	ldd	r23, Y+22	; 0x16
    6774:	8f 89       	ldd	r24, Y+23	; 0x17
    6776:	98 8d       	ldd	r25, Y+24	; 0x18
    6778:	20 e0       	ldi	r18, 0x00	; 0
    677a:	3f ef       	ldi	r19, 0xFF	; 255
    677c:	4f e7       	ldi	r20, 0x7F	; 127
    677e:	57 e4       	ldi	r21, 0x47	; 71
    6780:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6784:	18 16       	cp	r1, r24
    6786:	4c f5       	brge	.+82     	; 0x67da <PlayerCelebrates+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6788:	69 8d       	ldd	r22, Y+25	; 0x19
    678a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    678c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    678e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6790:	20 e0       	ldi	r18, 0x00	; 0
    6792:	30 e0       	ldi	r19, 0x00	; 0
    6794:	40 e2       	ldi	r20, 0x20	; 32
    6796:	51 e4       	ldi	r21, 0x41	; 65
    6798:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    679c:	dc 01       	movw	r26, r24
    679e:	cb 01       	movw	r24, r22
    67a0:	bc 01       	movw	r22, r24
    67a2:	cd 01       	movw	r24, r26
    67a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    67a8:	dc 01       	movw	r26, r24
    67aa:	cb 01       	movw	r24, r22
    67ac:	9c 8b       	std	Y+20, r25	; 0x14
    67ae:	8b 8b       	std	Y+19, r24	; 0x13
    67b0:	0f c0       	rjmp	.+30     	; 0x67d0 <PlayerCelebrates+0x232>
    67b2:	80 e9       	ldi	r24, 0x90	; 144
    67b4:	91 e0       	ldi	r25, 0x01	; 1
    67b6:	9a 8b       	std	Y+18, r25	; 0x12
    67b8:	89 8b       	std	Y+17, r24	; 0x11
    67ba:	89 89       	ldd	r24, Y+17	; 0x11
    67bc:	9a 89       	ldd	r25, Y+18	; 0x12
    67be:	01 97       	sbiw	r24, 0x01	; 1
    67c0:	f1 f7       	brne	.-4      	; 0x67be <PlayerCelebrates+0x220>
    67c2:	9a 8b       	std	Y+18, r25	; 0x12
    67c4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    67c6:	8b 89       	ldd	r24, Y+19	; 0x13
    67c8:	9c 89       	ldd	r25, Y+20	; 0x14
    67ca:	01 97       	sbiw	r24, 0x01	; 1
    67cc:	9c 8b       	std	Y+20, r25	; 0x14
    67ce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    67d0:	8b 89       	ldd	r24, Y+19	; 0x13
    67d2:	9c 89       	ldd	r25, Y+20	; 0x14
    67d4:	00 97       	sbiw	r24, 0x00	; 0
    67d6:	69 f7       	brne	.-38     	; 0x67b2 <PlayerCelebrates+0x214>
    67d8:	14 c0       	rjmp	.+40     	; 0x6802 <PlayerCelebrates+0x264>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    67da:	6d 89       	ldd	r22, Y+21	; 0x15
    67dc:	7e 89       	ldd	r23, Y+22	; 0x16
    67de:	8f 89       	ldd	r24, Y+23	; 0x17
    67e0:	98 8d       	ldd	r25, Y+24	; 0x18
    67e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    67e6:	dc 01       	movw	r26, r24
    67e8:	cb 01       	movw	r24, r22
    67ea:	9c 8b       	std	Y+20, r25	; 0x14
    67ec:	8b 8b       	std	Y+19, r24	; 0x13
    67ee:	8b 89       	ldd	r24, Y+19	; 0x13
    67f0:	9c 89       	ldd	r25, Y+20	; 0x14
    67f2:	98 8b       	std	Y+16, r25	; 0x10
    67f4:	8f 87       	std	Y+15, r24	; 0x0f
    67f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    67f8:	98 89       	ldd	r25, Y+16	; 0x10
    67fa:	01 97       	sbiw	r24, 0x01	; 1
    67fc:	f1 f7       	brne	.-4      	; 0x67fa <PlayerCelebrates+0x25c>
    67fe:	98 8b       	std	Y+16, r25	; 0x10
    6800:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(FRAME_DELAY_MS + 500);
	LCD_voidClearPosition(2,13);
    6802:	82 e0       	ldi	r24, 0x02	; 2
    6804:	6d e0       	ldi	r22, 0x0D	; 13
    6806:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <LCD_voidClearPosition>
	LCD_voidGoToPosition(2,13);
    680a:	82 e0       	ldi	r24, 0x02	; 2
    680c:	6d e0       	ldi	r22, 0x0D	; 13
    680e:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(PLAYER_CELEBRATE);
    6812:	84 e0       	ldi	r24, 0x04	; 4
    6814:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
	LCD_voidGoToPosition(1,12);
    6818:	81 e0       	ldi	r24, 0x01	; 1
    681a:	6c e0       	ldi	r22, 0x0C	; 12
    681c:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(KEEPER_SLIDE);
    6820:	85 e0       	ldi	r24, 0x05	; 5
    6822:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
	LCD_voidGoToPosition(1,15);
    6826:	81 e0       	ldi	r24, 0x01	; 1
    6828:	6f e0       	ldi	r22, 0x0F	; 15
    682a:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(GOAL_SCORED);
    682e:	87 e0       	ldi	r24, 0x07	; 7
    6830:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
    6834:	80 e0       	ldi	r24, 0x00	; 0
    6836:	90 e8       	ldi	r25, 0x80	; 128
    6838:	a2 e2       	ldi	r26, 0x22	; 34
    683a:	b4 e4       	ldi	r27, 0x44	; 68
    683c:	8b 87       	std	Y+11, r24	; 0x0b
    683e:	9c 87       	std	Y+12, r25	; 0x0c
    6840:	ad 87       	std	Y+13, r26	; 0x0d
    6842:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6844:	6b 85       	ldd	r22, Y+11	; 0x0b
    6846:	7c 85       	ldd	r23, Y+12	; 0x0c
    6848:	8d 85       	ldd	r24, Y+13	; 0x0d
    684a:	9e 85       	ldd	r25, Y+14	; 0x0e
    684c:	20 e0       	ldi	r18, 0x00	; 0
    684e:	30 e0       	ldi	r19, 0x00	; 0
    6850:	4a e7       	ldi	r20, 0x7A	; 122
    6852:	55 e4       	ldi	r21, 0x45	; 69
    6854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6858:	dc 01       	movw	r26, r24
    685a:	cb 01       	movw	r24, r22
    685c:	8f 83       	std	Y+7, r24	; 0x07
    685e:	98 87       	std	Y+8, r25	; 0x08
    6860:	a9 87       	std	Y+9, r26	; 0x09
    6862:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6864:	6f 81       	ldd	r22, Y+7	; 0x07
    6866:	78 85       	ldd	r23, Y+8	; 0x08
    6868:	89 85       	ldd	r24, Y+9	; 0x09
    686a:	9a 85       	ldd	r25, Y+10	; 0x0a
    686c:	20 e0       	ldi	r18, 0x00	; 0
    686e:	30 e0       	ldi	r19, 0x00	; 0
    6870:	40 e8       	ldi	r20, 0x80	; 128
    6872:	5f e3       	ldi	r21, 0x3F	; 63
    6874:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6878:	88 23       	and	r24, r24
    687a:	2c f4       	brge	.+10     	; 0x6886 <PlayerCelebrates+0x2e8>
		__ticks = 1;
    687c:	81 e0       	ldi	r24, 0x01	; 1
    687e:	90 e0       	ldi	r25, 0x00	; 0
    6880:	9e 83       	std	Y+6, r25	; 0x06
    6882:	8d 83       	std	Y+5, r24	; 0x05
    6884:	3f c0       	rjmp	.+126    	; 0x6904 <PlayerCelebrates+0x366>
	else if (__tmp > 65535)
    6886:	6f 81       	ldd	r22, Y+7	; 0x07
    6888:	78 85       	ldd	r23, Y+8	; 0x08
    688a:	89 85       	ldd	r24, Y+9	; 0x09
    688c:	9a 85       	ldd	r25, Y+10	; 0x0a
    688e:	20 e0       	ldi	r18, 0x00	; 0
    6890:	3f ef       	ldi	r19, 0xFF	; 255
    6892:	4f e7       	ldi	r20, 0x7F	; 127
    6894:	57 e4       	ldi	r21, 0x47	; 71
    6896:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    689a:	18 16       	cp	r1, r24
    689c:	4c f5       	brge	.+82     	; 0x68f0 <PlayerCelebrates+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    689e:	6b 85       	ldd	r22, Y+11	; 0x0b
    68a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    68a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    68a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    68a6:	20 e0       	ldi	r18, 0x00	; 0
    68a8:	30 e0       	ldi	r19, 0x00	; 0
    68aa:	40 e2       	ldi	r20, 0x20	; 32
    68ac:	51 e4       	ldi	r21, 0x41	; 65
    68ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    68b2:	dc 01       	movw	r26, r24
    68b4:	cb 01       	movw	r24, r22
    68b6:	bc 01       	movw	r22, r24
    68b8:	cd 01       	movw	r24, r26
    68ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    68be:	dc 01       	movw	r26, r24
    68c0:	cb 01       	movw	r24, r22
    68c2:	9e 83       	std	Y+6, r25	; 0x06
    68c4:	8d 83       	std	Y+5, r24	; 0x05
    68c6:	0f c0       	rjmp	.+30     	; 0x68e6 <PlayerCelebrates+0x348>
    68c8:	80 e9       	ldi	r24, 0x90	; 144
    68ca:	91 e0       	ldi	r25, 0x01	; 1
    68cc:	9c 83       	std	Y+4, r25	; 0x04
    68ce:	8b 83       	std	Y+3, r24	; 0x03
    68d0:	8b 81       	ldd	r24, Y+3	; 0x03
    68d2:	9c 81       	ldd	r25, Y+4	; 0x04
    68d4:	01 97       	sbiw	r24, 0x01	; 1
    68d6:	f1 f7       	brne	.-4      	; 0x68d4 <PlayerCelebrates+0x336>
    68d8:	9c 83       	std	Y+4, r25	; 0x04
    68da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    68dc:	8d 81       	ldd	r24, Y+5	; 0x05
    68de:	9e 81       	ldd	r25, Y+6	; 0x06
    68e0:	01 97       	sbiw	r24, 0x01	; 1
    68e2:	9e 83       	std	Y+6, r25	; 0x06
    68e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    68e6:	8d 81       	ldd	r24, Y+5	; 0x05
    68e8:	9e 81       	ldd	r25, Y+6	; 0x06
    68ea:	00 97       	sbiw	r24, 0x00	; 0
    68ec:	69 f7       	brne	.-38     	; 0x68c8 <PlayerCelebrates+0x32a>
    68ee:	14 c0       	rjmp	.+40     	; 0x6918 <PlayerCelebrates+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    68f0:	6f 81       	ldd	r22, Y+7	; 0x07
    68f2:	78 85       	ldd	r23, Y+8	; 0x08
    68f4:	89 85       	ldd	r24, Y+9	; 0x09
    68f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    68f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    68fc:	dc 01       	movw	r26, r24
    68fe:	cb 01       	movw	r24, r22
    6900:	9e 83       	std	Y+6, r25	; 0x06
    6902:	8d 83       	std	Y+5, r24	; 0x05
    6904:	8d 81       	ldd	r24, Y+5	; 0x05
    6906:	9e 81       	ldd	r25, Y+6	; 0x06
    6908:	9a 83       	std	Y+2, r25	; 0x02
    690a:	89 83       	std	Y+1, r24	; 0x01
    690c:	89 81       	ldd	r24, Y+1	; 0x01
    690e:	9a 81       	ldd	r25, Y+2	; 0x02
    6910:	01 97       	sbiw	r24, 0x01	; 1
    6912:	f1 f7       	brne	.-4      	; 0x6910 <PlayerCelebrates+0x372>
    6914:	9a 83       	std	Y+2, r25	; 0x02
    6916:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(FRAME_DELAY_MS + 500);
	LCD_voidSendCommand(LCD_ClearDisplay);
    6918:	81 e0       	ldi	r24, 0x01	; 1
    691a:	0e 94 50 21 	call	0x42a0	; 0x42a0 <LCD_voidSendCommand>
}
    691e:	aa 96       	adiw	r28, 0x2a	; 42
    6920:	0f b6       	in	r0, 0x3f	; 63
    6922:	f8 94       	cli
    6924:	de bf       	out	0x3e, r29	; 62
    6926:	0f be       	out	0x3f, r0	; 63
    6928:	cd bf       	out	0x3d, r28	; 61
    692a:	cf 91       	pop	r28
    692c:	df 91       	pop	r29
    692e:	08 95       	ret

00006930 <PlayerCeremony>:

void PlayerCeremony(){
    6930:	df 93       	push	r29
    6932:	cf 93       	push	r28
    6934:	cd b7       	in	r28, 0x3d	; 61
    6936:	de b7       	in	r29, 0x3e	; 62
    6938:	2e 97       	sbiw	r28, 0x0e	; 14
    693a:	0f b6       	in	r0, 0x3f	; 63
    693c:	f8 94       	cli
    693e:	de bf       	out	0x3e, r29	; 62
    6940:	0f be       	out	0x3f, r0	; 63
    6942:	cd bf       	out	0x3d, r28	; 61
	LCD_voidGoToPosition(1,9);
    6944:	81 e0       	ldi	r24, 0x01	; 1
    6946:	69 e0       	ldi	r22, 0x09	; 9
    6948:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(PLAYER_CELEBRATE);
    694c:	84 e0       	ldi	r24, 0x04	; 4
    694e:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
	LCD_voidGoToPosition(1,10);
    6952:	81 e0       	ldi	r24, 0x01	; 1
    6954:	6a e0       	ldi	r22, 0x0A	; 10
    6956:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteChar(TROPHY);
    695a:	86 e0       	ldi	r24, 0x06	; 6
    695c:	0e 94 00 23 	call	0x4600	; 0x4600 <LCD_voidWriteChar>
	LCD_voidGoToPosition(3,2);
    6960:	83 e0       	ldi	r24, 0x03	; 3
    6962:	62 e0       	ldi	r22, 0x02	; 2
    6964:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*) "Man of the match");
    6968:	81 ef       	ldi	r24, 0xF1	; 241
    696a:	90 e0       	ldi	r25, 0x00	; 0
    696c:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <LCD_voidWriteString>
    6970:	80 e0       	ldi	r24, 0x00	; 0
    6972:	90 ec       	ldi	r25, 0xC0	; 192
    6974:	af e8       	ldi	r26, 0x8F	; 143
    6976:	b4 e4       	ldi	r27, 0x44	; 68
    6978:	8b 87       	std	Y+11, r24	; 0x0b
    697a:	9c 87       	std	Y+12, r25	; 0x0c
    697c:	ad 87       	std	Y+13, r26	; 0x0d
    697e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6980:	6b 85       	ldd	r22, Y+11	; 0x0b
    6982:	7c 85       	ldd	r23, Y+12	; 0x0c
    6984:	8d 85       	ldd	r24, Y+13	; 0x0d
    6986:	9e 85       	ldd	r25, Y+14	; 0x0e
    6988:	20 e0       	ldi	r18, 0x00	; 0
    698a:	30 e0       	ldi	r19, 0x00	; 0
    698c:	4a e7       	ldi	r20, 0x7A	; 122
    698e:	55 e4       	ldi	r21, 0x45	; 69
    6990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6994:	dc 01       	movw	r26, r24
    6996:	cb 01       	movw	r24, r22
    6998:	8f 83       	std	Y+7, r24	; 0x07
    699a:	98 87       	std	Y+8, r25	; 0x08
    699c:	a9 87       	std	Y+9, r26	; 0x09
    699e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    69a0:	6f 81       	ldd	r22, Y+7	; 0x07
    69a2:	78 85       	ldd	r23, Y+8	; 0x08
    69a4:	89 85       	ldd	r24, Y+9	; 0x09
    69a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    69a8:	20 e0       	ldi	r18, 0x00	; 0
    69aa:	30 e0       	ldi	r19, 0x00	; 0
    69ac:	40 e8       	ldi	r20, 0x80	; 128
    69ae:	5f e3       	ldi	r21, 0x3F	; 63
    69b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    69b4:	88 23       	and	r24, r24
    69b6:	2c f4       	brge	.+10     	; 0x69c2 <PlayerCeremony+0x92>
		__ticks = 1;
    69b8:	81 e0       	ldi	r24, 0x01	; 1
    69ba:	90 e0       	ldi	r25, 0x00	; 0
    69bc:	9e 83       	std	Y+6, r25	; 0x06
    69be:	8d 83       	std	Y+5, r24	; 0x05
    69c0:	3f c0       	rjmp	.+126    	; 0x6a40 <PlayerCeremony+0x110>
	else if (__tmp > 65535)
    69c2:	6f 81       	ldd	r22, Y+7	; 0x07
    69c4:	78 85       	ldd	r23, Y+8	; 0x08
    69c6:	89 85       	ldd	r24, Y+9	; 0x09
    69c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    69ca:	20 e0       	ldi	r18, 0x00	; 0
    69cc:	3f ef       	ldi	r19, 0xFF	; 255
    69ce:	4f e7       	ldi	r20, 0x7F	; 127
    69d0:	57 e4       	ldi	r21, 0x47	; 71
    69d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    69d6:	18 16       	cp	r1, r24
    69d8:	4c f5       	brge	.+82     	; 0x6a2c <PlayerCeremony+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    69da:	6b 85       	ldd	r22, Y+11	; 0x0b
    69dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    69de:	8d 85       	ldd	r24, Y+13	; 0x0d
    69e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    69e2:	20 e0       	ldi	r18, 0x00	; 0
    69e4:	30 e0       	ldi	r19, 0x00	; 0
    69e6:	40 e2       	ldi	r20, 0x20	; 32
    69e8:	51 e4       	ldi	r21, 0x41	; 65
    69ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    69ee:	dc 01       	movw	r26, r24
    69f0:	cb 01       	movw	r24, r22
    69f2:	bc 01       	movw	r22, r24
    69f4:	cd 01       	movw	r24, r26
    69f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    69fa:	dc 01       	movw	r26, r24
    69fc:	cb 01       	movw	r24, r22
    69fe:	9e 83       	std	Y+6, r25	; 0x06
    6a00:	8d 83       	std	Y+5, r24	; 0x05
    6a02:	0f c0       	rjmp	.+30     	; 0x6a22 <PlayerCeremony+0xf2>
    6a04:	80 e9       	ldi	r24, 0x90	; 144
    6a06:	91 e0       	ldi	r25, 0x01	; 1
    6a08:	9c 83       	std	Y+4, r25	; 0x04
    6a0a:	8b 83       	std	Y+3, r24	; 0x03
    6a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    6a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    6a10:	01 97       	sbiw	r24, 0x01	; 1
    6a12:	f1 f7       	brne	.-4      	; 0x6a10 <PlayerCeremony+0xe0>
    6a14:	9c 83       	std	Y+4, r25	; 0x04
    6a16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6a18:	8d 81       	ldd	r24, Y+5	; 0x05
    6a1a:	9e 81       	ldd	r25, Y+6	; 0x06
    6a1c:	01 97       	sbiw	r24, 0x01	; 1
    6a1e:	9e 83       	std	Y+6, r25	; 0x06
    6a20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6a22:	8d 81       	ldd	r24, Y+5	; 0x05
    6a24:	9e 81       	ldd	r25, Y+6	; 0x06
    6a26:	00 97       	sbiw	r24, 0x00	; 0
    6a28:	69 f7       	brne	.-38     	; 0x6a04 <PlayerCeremony+0xd4>
    6a2a:	14 c0       	rjmp	.+40     	; 0x6a54 <PlayerCeremony+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6a2c:	6f 81       	ldd	r22, Y+7	; 0x07
    6a2e:	78 85       	ldd	r23, Y+8	; 0x08
    6a30:	89 85       	ldd	r24, Y+9	; 0x09
    6a32:	9a 85       	ldd	r25, Y+10	; 0x0a
    6a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a38:	dc 01       	movw	r26, r24
    6a3a:	cb 01       	movw	r24, r22
    6a3c:	9e 83       	std	Y+6, r25	; 0x06
    6a3e:	8d 83       	std	Y+5, r24	; 0x05
    6a40:	8d 81       	ldd	r24, Y+5	; 0x05
    6a42:	9e 81       	ldd	r25, Y+6	; 0x06
    6a44:	9a 83       	std	Y+2, r25	; 0x02
    6a46:	89 83       	std	Y+1, r24	; 0x01
    6a48:	89 81       	ldd	r24, Y+1	; 0x01
    6a4a:	9a 81       	ldd	r25, Y+2	; 0x02
    6a4c:	01 97       	sbiw	r24, 0x01	; 1
    6a4e:	f1 f7       	brne	.-4      	; 0x6a4c <PlayerCeremony+0x11c>
    6a50:	9a 83       	std	Y+2, r25	; 0x02
    6a52:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(FRAME_DELAY_MS + 1000);
	LCD_voidSendCommand(LCD_ClearDisplay);
    6a54:	81 e0       	ldi	r24, 0x01	; 1
    6a56:	0e 94 50 21 	call	0x42a0	; 0x42a0 <LCD_voidSendCommand>
}
    6a5a:	2e 96       	adiw	r28, 0x0e	; 14
    6a5c:	0f b6       	in	r0, 0x3f	; 63
    6a5e:	f8 94       	cli
    6a60:	de bf       	out	0x3e, r29	; 62
    6a62:	0f be       	out	0x3f, r0	; 63
    6a64:	cd bf       	out	0x3d, r28	; 61
    6a66:	cf 91       	pop	r28
    6a68:	df 91       	pop	r29
    6a6a:	08 95       	ret

00006a6c <__mulsi3>:
    6a6c:	62 9f       	mul	r22, r18
    6a6e:	d0 01       	movw	r26, r0
    6a70:	73 9f       	mul	r23, r19
    6a72:	f0 01       	movw	r30, r0
    6a74:	82 9f       	mul	r24, r18
    6a76:	e0 0d       	add	r30, r0
    6a78:	f1 1d       	adc	r31, r1
    6a7a:	64 9f       	mul	r22, r20
    6a7c:	e0 0d       	add	r30, r0
    6a7e:	f1 1d       	adc	r31, r1
    6a80:	92 9f       	mul	r25, r18
    6a82:	f0 0d       	add	r31, r0
    6a84:	83 9f       	mul	r24, r19
    6a86:	f0 0d       	add	r31, r0
    6a88:	74 9f       	mul	r23, r20
    6a8a:	f0 0d       	add	r31, r0
    6a8c:	65 9f       	mul	r22, r21
    6a8e:	f0 0d       	add	r31, r0
    6a90:	99 27       	eor	r25, r25
    6a92:	72 9f       	mul	r23, r18
    6a94:	b0 0d       	add	r27, r0
    6a96:	e1 1d       	adc	r30, r1
    6a98:	f9 1f       	adc	r31, r25
    6a9a:	63 9f       	mul	r22, r19
    6a9c:	b0 0d       	add	r27, r0
    6a9e:	e1 1d       	adc	r30, r1
    6aa0:	f9 1f       	adc	r31, r25
    6aa2:	bd 01       	movw	r22, r26
    6aa4:	cf 01       	movw	r24, r30
    6aa6:	11 24       	eor	r1, r1
    6aa8:	08 95       	ret

00006aaa <__divmodqi4>:
    6aaa:	87 fb       	bst	r24, 7
    6aac:	08 2e       	mov	r0, r24
    6aae:	06 26       	eor	r0, r22
    6ab0:	87 fd       	sbrc	r24, 7
    6ab2:	81 95       	neg	r24
    6ab4:	67 fd       	sbrc	r22, 7
    6ab6:	61 95       	neg	r22
    6ab8:	20 d0       	rcall	.+64     	; 0x6afa <__udivmodqi4>
    6aba:	0e f4       	brtc	.+2      	; 0x6abe <__divmodqi4_1>
    6abc:	91 95       	neg	r25

00006abe <__divmodqi4_1>:
    6abe:	07 fc       	sbrc	r0, 7
    6ac0:	81 95       	neg	r24

00006ac2 <__divmodqi4_exit>:
    6ac2:	08 95       	ret

00006ac4 <__divmodsi4>:
    6ac4:	97 fb       	bst	r25, 7
    6ac6:	09 2e       	mov	r0, r25
    6ac8:	05 26       	eor	r0, r21
    6aca:	0e d0       	rcall	.+28     	; 0x6ae8 <__divmodsi4_neg1>
    6acc:	57 fd       	sbrc	r21, 7
    6ace:	04 d0       	rcall	.+8      	; 0x6ad8 <__divmodsi4_neg2>
    6ad0:	20 d0       	rcall	.+64     	; 0x6b12 <__udivmodsi4>
    6ad2:	0a d0       	rcall	.+20     	; 0x6ae8 <__divmodsi4_neg1>
    6ad4:	00 1c       	adc	r0, r0
    6ad6:	38 f4       	brcc	.+14     	; 0x6ae6 <__divmodsi4_exit>

00006ad8 <__divmodsi4_neg2>:
    6ad8:	50 95       	com	r21
    6ada:	40 95       	com	r20
    6adc:	30 95       	com	r19
    6ade:	21 95       	neg	r18
    6ae0:	3f 4f       	sbci	r19, 0xFF	; 255
    6ae2:	4f 4f       	sbci	r20, 0xFF	; 255
    6ae4:	5f 4f       	sbci	r21, 0xFF	; 255

00006ae6 <__divmodsi4_exit>:
    6ae6:	08 95       	ret

00006ae8 <__divmodsi4_neg1>:
    6ae8:	f6 f7       	brtc	.-4      	; 0x6ae6 <__divmodsi4_exit>
    6aea:	90 95       	com	r25
    6aec:	80 95       	com	r24
    6aee:	70 95       	com	r23
    6af0:	61 95       	neg	r22
    6af2:	7f 4f       	sbci	r23, 0xFF	; 255
    6af4:	8f 4f       	sbci	r24, 0xFF	; 255
    6af6:	9f 4f       	sbci	r25, 0xFF	; 255
    6af8:	08 95       	ret

00006afa <__udivmodqi4>:
    6afa:	99 1b       	sub	r25, r25
    6afc:	79 e0       	ldi	r23, 0x09	; 9
    6afe:	04 c0       	rjmp	.+8      	; 0x6b08 <__udivmodqi4_ep>

00006b00 <__udivmodqi4_loop>:
    6b00:	99 1f       	adc	r25, r25
    6b02:	96 17       	cp	r25, r22
    6b04:	08 f0       	brcs	.+2      	; 0x6b08 <__udivmodqi4_ep>
    6b06:	96 1b       	sub	r25, r22

00006b08 <__udivmodqi4_ep>:
    6b08:	88 1f       	adc	r24, r24
    6b0a:	7a 95       	dec	r23
    6b0c:	c9 f7       	brne	.-14     	; 0x6b00 <__udivmodqi4_loop>
    6b0e:	80 95       	com	r24
    6b10:	08 95       	ret

00006b12 <__udivmodsi4>:
    6b12:	a1 e2       	ldi	r26, 0x21	; 33
    6b14:	1a 2e       	mov	r1, r26
    6b16:	aa 1b       	sub	r26, r26
    6b18:	bb 1b       	sub	r27, r27
    6b1a:	fd 01       	movw	r30, r26
    6b1c:	0d c0       	rjmp	.+26     	; 0x6b38 <__udivmodsi4_ep>

00006b1e <__udivmodsi4_loop>:
    6b1e:	aa 1f       	adc	r26, r26
    6b20:	bb 1f       	adc	r27, r27
    6b22:	ee 1f       	adc	r30, r30
    6b24:	ff 1f       	adc	r31, r31
    6b26:	a2 17       	cp	r26, r18
    6b28:	b3 07       	cpc	r27, r19
    6b2a:	e4 07       	cpc	r30, r20
    6b2c:	f5 07       	cpc	r31, r21
    6b2e:	20 f0       	brcs	.+8      	; 0x6b38 <__udivmodsi4_ep>
    6b30:	a2 1b       	sub	r26, r18
    6b32:	b3 0b       	sbc	r27, r19
    6b34:	e4 0b       	sbc	r30, r20
    6b36:	f5 0b       	sbc	r31, r21

00006b38 <__udivmodsi4_ep>:
    6b38:	66 1f       	adc	r22, r22
    6b3a:	77 1f       	adc	r23, r23
    6b3c:	88 1f       	adc	r24, r24
    6b3e:	99 1f       	adc	r25, r25
    6b40:	1a 94       	dec	r1
    6b42:	69 f7       	brne	.-38     	; 0x6b1e <__udivmodsi4_loop>
    6b44:	60 95       	com	r22
    6b46:	70 95       	com	r23
    6b48:	80 95       	com	r24
    6b4a:	90 95       	com	r25
    6b4c:	9b 01       	movw	r18, r22
    6b4e:	ac 01       	movw	r20, r24
    6b50:	bd 01       	movw	r22, r26
    6b52:	cf 01       	movw	r24, r30
    6b54:	08 95       	ret

00006b56 <__prologue_saves__>:
    6b56:	2f 92       	push	r2
    6b58:	3f 92       	push	r3
    6b5a:	4f 92       	push	r4
    6b5c:	5f 92       	push	r5
    6b5e:	6f 92       	push	r6
    6b60:	7f 92       	push	r7
    6b62:	8f 92       	push	r8
    6b64:	9f 92       	push	r9
    6b66:	af 92       	push	r10
    6b68:	bf 92       	push	r11
    6b6a:	cf 92       	push	r12
    6b6c:	df 92       	push	r13
    6b6e:	ef 92       	push	r14
    6b70:	ff 92       	push	r15
    6b72:	0f 93       	push	r16
    6b74:	1f 93       	push	r17
    6b76:	cf 93       	push	r28
    6b78:	df 93       	push	r29
    6b7a:	cd b7       	in	r28, 0x3d	; 61
    6b7c:	de b7       	in	r29, 0x3e	; 62
    6b7e:	ca 1b       	sub	r28, r26
    6b80:	db 0b       	sbc	r29, r27
    6b82:	0f b6       	in	r0, 0x3f	; 63
    6b84:	f8 94       	cli
    6b86:	de bf       	out	0x3e, r29	; 62
    6b88:	0f be       	out	0x3f, r0	; 63
    6b8a:	cd bf       	out	0x3d, r28	; 61
    6b8c:	09 94       	ijmp

00006b8e <__epilogue_restores__>:
    6b8e:	2a 88       	ldd	r2, Y+18	; 0x12
    6b90:	39 88       	ldd	r3, Y+17	; 0x11
    6b92:	48 88       	ldd	r4, Y+16	; 0x10
    6b94:	5f 84       	ldd	r5, Y+15	; 0x0f
    6b96:	6e 84       	ldd	r6, Y+14	; 0x0e
    6b98:	7d 84       	ldd	r7, Y+13	; 0x0d
    6b9a:	8c 84       	ldd	r8, Y+12	; 0x0c
    6b9c:	9b 84       	ldd	r9, Y+11	; 0x0b
    6b9e:	aa 84       	ldd	r10, Y+10	; 0x0a
    6ba0:	b9 84       	ldd	r11, Y+9	; 0x09
    6ba2:	c8 84       	ldd	r12, Y+8	; 0x08
    6ba4:	df 80       	ldd	r13, Y+7	; 0x07
    6ba6:	ee 80       	ldd	r14, Y+6	; 0x06
    6ba8:	fd 80       	ldd	r15, Y+5	; 0x05
    6baa:	0c 81       	ldd	r16, Y+4	; 0x04
    6bac:	1b 81       	ldd	r17, Y+3	; 0x03
    6bae:	aa 81       	ldd	r26, Y+2	; 0x02
    6bb0:	b9 81       	ldd	r27, Y+1	; 0x01
    6bb2:	ce 0f       	add	r28, r30
    6bb4:	d1 1d       	adc	r29, r1
    6bb6:	0f b6       	in	r0, 0x3f	; 63
    6bb8:	f8 94       	cli
    6bba:	de bf       	out	0x3e, r29	; 62
    6bbc:	0f be       	out	0x3f, r0	; 63
    6bbe:	cd bf       	out	0x3d, r28	; 61
    6bc0:	ed 01       	movw	r28, r26
    6bc2:	08 95       	ret

00006bc4 <_exit>:
    6bc4:	f8 94       	cli

00006bc6 <__stop_program>:
    6bc6:	ff cf       	rjmp	.-2      	; 0x6bc6 <__stop_program>
